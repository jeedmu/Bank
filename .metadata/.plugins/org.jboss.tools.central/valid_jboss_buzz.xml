<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Good news: Business automation is not about SOA</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oxNDF6NUlqU/" /><category term="BPM" scheme="searchisko:content:tags" /><category term="BPMN" scheme="searchisko:content:tags" /><category term="business automation" scheme="searchisko:content:tags" /><category term="business process management" scheme="searchisko:content:tags" /><category term="CMNN" scheme="searchisko:content:tags" /><category term="DMN" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jboss bpm suite" scheme="searchisko:content:tags" /><category term="JBoss BRMS" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat Decision Manager" scheme="searchisko:content:tags" /><category term="Red Hat Process Automation Manager" scheme="searchisko:content:tags" /><category term="RHPAM" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><author><name>Karina Varela</name></author><id>searchisko:content:id:jbossorg_blog-good_news_business_automation_is_not_about_soa</id><updated>2019-02-20T13:00:12Z</updated><published>2019-02-20T13:00:12Z</published><content type="html">&lt;p&gt;This is not an article about service-oriented architecture (SOA); neither is it a business process management (BPM) article. This article is about how business automation can change the way you create software.&lt;/p&gt; &lt;p&gt;At a first, developers and architects tend to associate the use of BPM suites (or business-oriented architecture) with SOA. This behavior immediately leads to an incorrect bias about the subject.&lt;/p&gt; &lt;p&gt;C-suite executives understand: Transform—or be suppressed by new, disruptive, technology-driven startups. In 2019, business automation is a key transformation that executives will seek in order to improve business performance and lower costs. However, some technology teams are not very open to it. Why?&lt;/p&gt; &lt;p&gt;In the past, BPM suites have been used as big centralized orchestrators for services, external systems, and human tasks. &lt;a href="https://www.redhat.com/es/blog/the-jboss-soa-platform-has-arrived"&gt;JBoss SOA Platform&lt;/a&gt;, released in 2008, is an example of such an integration platform. Unfortunately, this kind of application does not fit new cloud- and microservices-oriented architectures. The good news is that business automation evolved and can help teams to reach the next step in DevOps: &lt;em&gt;BizDevOps&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-556997"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Business automation in 2019&lt;/h2&gt; &lt;p&gt;Since it is never too late to learn something new, if I must sum up, here is what every architect and developer should know:&lt;/p&gt; &lt;p&gt;Business automation is about improving manual tasks or manual decisions by automating and decoupling business logic (rules and flows) from application code. It is about bringing the business team closer to the development cycle (BizDevOps) and, consequently, being able to address customer feedback more quickly.&lt;/p&gt; &lt;p&gt;Here are important points about the most recent technical advantages of using a process-driven architecture by way of products such as &lt;a href="https://developers.redhat.com/products/rhpam/overview/"&gt;Red Hat Process Automation Manager&lt;/a&gt; (RHPAM):&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Extract business logic from the application code (which totally fits within a microservice architecture).&lt;/li&gt; &lt;li&gt;Nourish a new culture for the development cycle: the business team can understand and be responsible for authoring business assets, which are converted into code (more on this later).&lt;/li&gt; &lt;li&gt;Rules and processes can have an independent and automated (pipeline) deployment and delivery lifecycle.&lt;/li&gt; &lt;li&gt;Advanced dashboards with business information can be provided so C-suite executives can make decisions regarding the company&amp;#8217;s future.&lt;/li&gt; &lt;li&gt;Applications can be delivered without heavy code programming.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;But you might ask, &amp;#8220;How can non-technical business analysts come closer to the technology team? They can&amp;#8217;t code!?&amp;#8221;&lt;/p&gt; &lt;h2&gt;Developers create code. Business analysts create business assets.&lt;/h2&gt; &lt;p&gt;Business ideas are the reason why software is created. Therefore, it is understandable that the knowledge that gives rise to software resides within the business analyst team. And it is fair that business analysts are the ones who should be responsible for maintaining business rules and processes (and I do not mean using Microsoft Word).&lt;/p&gt; &lt;p&gt;But how can a business analyst create consumable business code?&lt;/p&gt; &lt;p&gt;Specifications such as Business Process Model and Notation 2 (BPMN2), Case Management Model and Notation (CMMN), and Decision Model and Notation (DMN) allow analysts to create assets using business concepts with intuitive tools. Under the covers, such tools convert these assets to code; create and maintain the code as Maven projects; compile the code as a Knowledge Java Archive (KJAR); and deploy the code on Process Engine, a component from Red Hat Process Automation Manager responsible for executing the business assets created using Business Central.&lt;/p&gt; &lt;h2&gt;You can speak the same language&lt;/h2&gt; &lt;p&gt;Analysts have been using BPM notation fluently for business process modeling. Now, Red Hat Process Automation Manager has released support for modeling and processing of Case Management (dynamic flows) and Decision Modeling Notation (DMN). The following Decision Model was created with the DMN Modeler (available in the tech preview of version 7.2):&lt;/p&gt; &lt;div&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-25-at-17.58.03.png"&gt;&lt;img class=" aligncenter wp-image-557047 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-25-at-17.58.03.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-25-at-17.58.03.png" alt="Decision Model created with the DMN Modeler" width="686" height="429" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-25-at-17.58.03.png 686w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screen-Shot-2019-01-25-at-17.58.03-300x188.png 300w" sizes="(max-width: 686px) 100vw, 686px" /&gt;&lt;/a&gt;&lt;/div&gt; &lt;p&gt;Although some developers might not understand the complete rule at a first sight, those who have other roles and are involved with decision management can easily read decision diagrams. In other words, they will feel comfortable while designing business rules and decision flows (without coding!).&lt;/p&gt; &lt;p&gt;A friendly interface such as the Red Hat Process Automation Manager component called &lt;em&gt;Business Central&lt;/em&gt; is what enables business users to work side by side with developers for the creation of modern applications.&lt;/p&gt; &lt;p&gt;Don&amp;#8217;t be confused: This is not orchestration. This is a &lt;strong&gt;graphical representation&lt;/strong&gt; of business rules. A &lt;em&gt;Decision Engine &lt;/em&gt;will be responsible for &lt;strong&gt;executing&lt;/strong&gt; the rules. If you want to know more about DMN, check the &lt;a href="https://www.omg.org/dmn/"&gt;Object Management Group&amp;#8217;s (OMG) website&lt;/a&gt;&lt;a href="https://www.omg.org/dmn/"&gt;,&lt;/a&gt; the entity responsible for maintaining this specification.&lt;/p&gt; &lt;h2&gt;Give it a try&lt;/h2&gt; &lt;p&gt;If you want to try RHPAM, I suggest you follow these simple steps to run a complete authoring and execution environment on Spring Boot:&lt;/p&gt; &lt;p&gt;1. Access &lt;a href="http://start.jbpm.org" rel="noopener"&gt;start.jbpm.org&lt;/a&gt; and click &amp;#8220;Generate default business application.&amp;#8221;&lt;/p&gt; &lt;p&gt;2. After the download is complete, unzip the project, enter the folder, and execute the launch script:&lt;/p&gt; &lt;pre&gt;$ unzip business-application.zip $ cd business-application-service $ launch.sh clean install &lt;/pre&gt; &lt;p&gt;3. Access http://localhost:8090 on your browser.&lt;/p&gt; &lt;p&gt;In the &lt;a href="https://GITHUB.COM/BUSINESS-APPLICATIONS" rel="noopener"&gt;business applications repository&lt;/a&gt;, there are several open source examples of business projects based on Spring Boot.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Business automation is not about orchestration. It is about empowering communication between silos that the DevOps culture does not reach: Tech and Business.  Adding business automation to open source software is a must. An open culture promotes global knowledge building. This is why it is possible to find ample open documentation about &lt;a href="https://github.com/kiegroup/jbpm"&gt;jBPM&lt;/a&gt;, the upstream version of RHPAM (the enterprise version supported by Red Hat).&lt;/p&gt; &lt;p&gt;jBPM has an active users community supported by Red Hat engineers who are available to help anyone who needs information about business automation. Feel free to reach us on the IRC channel whenever you need (&lt;em&gt;chat.freenode.net:6667, #jbpm)&lt;/em&gt;.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;p&gt;Here are related articles available on the Red Hat Developer blog:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/01/spring-boot-enabled-business-process-automation-with-red-hat-process-automation-manager/"&gt;Spring Boot-enabled business process automation with Red Hat Process Automation Manager&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/04/quickly-try-red-hat-process-automation-manager-in-your-cloud/"&gt;Quickly try Red Hat Process Automation Manager in your cloud&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/10/demystifying-the-red-hat-decision-manager-and-process-automation-manager-remote-client/"&gt;Demystifying the Red Hat Decision Manager and Process Automation Manager Remote Client&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#38;linkname=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F20%2Fgood-news-business-automation-is-not-about-soa%2F&amp;#038;title=Good%20news%3A%20Business%20automation%20is%20not%20about%20SOA" data-a2a-url="https://developers.redhat.com/blog/2019/02/20/good-news-business-automation-is-not-about-soa/" data-a2a-title="Good news: Business automation is not about SOA"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/02/20/good-news-business-automation-is-not-about-soa/"&gt;Good news: Business automation is not about SOA&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oxNDF6NUlqU" height="1" width="1" alt=""/&gt;</content><summary>This is not an article about service-oriented architecture (SOA); neither is it a business process management (BPM) article. This article is about how business automation can change the way you create software. At a first, developers and architects tend to associate the use of BPM suites (or business-oriented architecture) with SOA. This behavior immediately leads to an incorrect bias about the su...</summary><dc:creator>Karina Varela</dc:creator><dc:date>2019-02-20T13:00:12Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/02/20/good-news-business-automation-is-not-about-soa/</feedburner:origLink></entry><entry><title>Scotland JBug - Modern Process Integration Tooling Workshop</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6wibjMEsaWU/scotland-jbug-modern-process-integration-tooling-workshop.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="jbug" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-scotland_jbug_modern_process_integration_tooling_workshop</id><updated>2019-02-20T06:00:03Z</updated><published>2019-02-20T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://www.soprasteria.co.uk/en/newsroom/event/2018/06/06/default-calendar/sopra-steria-sponsors-jbug-scotland-appdev-in-the-cloud-workshop" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="jbug scotland" border="0" data-original-height="256" data-original-width="256" height="200" src="https://3.bp.blogspot.com/-hcg0RzC1ifY/VMZDoi_rtZI/AAAAAAAAd2w/X0ZkKnXLKNc-o8eGvDWXQpMIRwy_4Av7ACPcBGAYYCw/s200/jbug-scotland.jpeg" title="" width="200" /&gt;&lt;/a&gt;&lt;br /&gt;I'm &lt;a href="https://www.soprasteria.co.uk/en/newsroom/event/2019/03/07/default-calendar/sopra-steria-sponsors-jbug-scotland-integrating-the-world---modern-process-integration-tooling-workshop" target="_blank"&gt;heading back to my friends in Edinburgh&lt;/a&gt; to speak at the Scotland JBug&amp;nbsp;next month.&lt;br /&gt;&lt;br /&gt;It's a fun group of people that really seem to enjoy working with open source and JBoss software stacks.&lt;br /&gt;&lt;br /&gt;This time around I'm bringing a full hands-on workshop showcasing automation integration using Red Hat Process Automation Manager.&lt;br /&gt;&lt;br /&gt;The event is on Mar 7th, 2019 from 17:15 to 19:30 or so...&amp;nbsp;If you would like to attend please email &lt;b&gt;&lt;i&gt;JBUG.Scotland@soprasteria.com&lt;/i&gt;&lt;/b&gt;. The event is free to attend.&lt;br /&gt;&lt;br /&gt;The abstract for the workshop and talk:&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;&lt;a href="https://bpmworkshop.github.io/" target="_blank"&gt;Modern Process Integration Tooling Workshop&lt;/a&gt;&lt;/h3&gt;&lt;i&gt;With this workshop you get a chance to unlock the power of process integration in your development projects. We'll take you through it all step-by-step - building a domain model, creating a process, integrating human tasks and more using the Red Hat Process Automation Manager. This all-new workshop guides you through the entire creation and execution of a human resources employee rewards process project.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;Bring your laptop as this is a hands on experience that takes you from nothing to a fully working process integration project with Red Hat open source software. No experience in process integration is required, you will be guided by the experienced speaker and go home ready to apply what you have learned in your own projects.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Bring your laptop and see you in Scotland next month!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yizDFkrAyGQ:97md7EuowNw:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yizDFkrAyGQ:97md7EuowNw:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yizDFkrAyGQ:97md7EuowNw:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yizDFkrAyGQ:97md7EuowNw:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yizDFkrAyGQ:97md7EuowNw:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yizDFkrAyGQ:97md7EuowNw:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yizDFkrAyGQ:97md7EuowNw:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yizDFkrAyGQ:97md7EuowNw:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yizDFkrAyGQ:97md7EuowNw:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yizDFkrAyGQ:97md7EuowNw:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yizDFkrAyGQ:97md7EuowNw:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/yizDFkrAyGQ" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6wibjMEsaWU" height="1" width="1" alt=""/&gt;</content><summary>I'm heading back to my friends in Edinburgh to speak at the Scotland JBug next month. It's a fun group of people that really seem to enjoy working with open source and JBoss software stacks. This time around I'm bringing a full hands-on workshop showcasing automation integration using Red Hat Process Automation Manager. The event is on Mar 7th, 2019 from 17:15 to 19:30 or so... If you would like t...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-02-20T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/yizDFkrAyGQ/scotland-jbug-modern-process-integration-tooling-workshop.html</feedburner:origLink></entry><entry><title>Register Transfer Language for CRuby</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/niji_djr_mk/" /><category term="community" scheme="searchisko:content:tags" /><category term="CRuby" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="register transfer language" scheme="searchisko:content:tags" /><category term="RTL" scheme="searchisko:content:tags" /><category term="Ruby" scheme="searchisko:content:tags" /><author><name>Vladimir Makarov</name></author><id>searchisko:content:id:jbossorg_blog-register_transfer_language_for_cruby</id><updated>2019-02-19T13:00:06Z</updated><published>2019-02-19T13:00:06Z</published><content type="html">&lt;p&gt;For the last two years, I have been trying to improve &lt;a href="https://github.com/ruby/ruby"&gt;CRuby&lt;/a&gt; performance. I have been working simultaneously on two major fronts: introducing register transfer language (RTL) for the CRuby virtual machine (VM) and &lt;a href="https://en.wikipedia.org/wiki/Just-in-time_compilation"&gt;just-in-time (JIT) compilation&lt;/a&gt;. For background on the goal of having Ruby 3 be 3 times faster than version 2 (3X3), see my previous article, &amp;#8220;&lt;a href="https://developers.redhat.com/blog/2018/03/22/ruby-3x3-performance-goal/"&gt;Towards the Ruby 3&amp;#215;3 Performance Goal&lt;/a&gt;&amp;#8220;.&lt;/p&gt; &lt;p&gt;The JIT project (MJIT) is advancing successfully. The JIT approach and engine I proposed and implemented has been adopted by the CRuby community. Takashi Kokubun hardened the code and adapted it to the current CRuby &lt;a href="https://en.wikipedia.org/wiki/Stack_machine"&gt;stack machine&lt;/a&gt; and recently MJIT became an experimental feature of the &lt;a href="https://www.ruby-lang.org/en/news/2018/12/25/ruby-2-6-0-released/"&gt;CRuby 2.6 release&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Introducing a Register Transfer Language (RTL) to the CRuby VM turned out to be an even harder task than introducing the initial JIT compiler. The required changes to the VM are far more invasive than the ones needed for the JIT compiler.&lt;/p&gt; &lt;p&gt;This article describes the advantages and disadvantages of RTL for CRuby.&lt;/p&gt; &lt;p&gt;&lt;span id="more-559277"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2 id="rtl"&gt;What is RTL?&lt;/h2&gt; &lt;p&gt;First of all, what is RTL? The current CRuby VM uses &lt;em&gt;stack instructions&lt;/em&gt;. Here is an example of stack instructions for the Ruby code &lt;code&gt;a = b + c&lt;/code&gt;, where &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt; are local variables:&lt;/p&gt; &lt;pre&gt;  getlocal_OP__WC__0 &amp;#60;b index&amp;#62; getlocal_OP__WC__0 &amp;#60;c index&amp;#62; opt_plus setlocal_OP__WC__0 &amp;#60;a index&amp;#62;&lt;/pre&gt; &lt;p&gt;The first two instructions put the values of local variables &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; on the VM stack. The third instruction takes both values from the stack, performs the addition and puts the result on the stack. And the last instruction takes the result from the stack and assigns it to local variable &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The stack instructions refer to operands &lt;em&gt;implicitly&lt;/em&gt; from the top of the stack. Therefore, they are simple and short.&lt;/p&gt; &lt;p&gt;We could use instructions referring to operands &lt;em&gt;explicitly&lt;/em&gt;. I use the terms &lt;em&gt;register transfer language&lt;/em&gt; and &lt;em&gt;RTL&lt;/em&gt; for a set of such instructions. I use these names because I have been working on the &lt;a href="https://gcc.gnu.org/"&gt;GCC project&lt;/a&gt; for a long time and GCC has an intermediate representation with explicitly referenced operands called &lt;a href="https://gcc.gnu.org/onlinedocs/gccint/RTL.html"&gt;RTL&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here is how the above example would look in RTL:&lt;/p&gt; &lt;pre&gt; plus &amp;#60;a index&amp;#62;, &amp;#60;b index&amp;#62;, &amp;#60;c index&amp;#62;&lt;/pre&gt; &lt;p&gt;Instructions in RTL are longer but there are fewer of them for the same code. Usually &lt;strong&gt;RTL is interpreted faster&lt;/strong&gt; because a smaller number of executed instructions results in &lt;strong&gt;less instruction-dispatching overhead&lt;/strong&gt; and &lt;strong&gt;less memory traffic for operand values&lt;/strong&gt;, which is more important for modern computers with a bigger gap in speeds of CPU and memory.&lt;/p&gt; &lt;p&gt;Faster interpretation is one reason for adopting RTL. There is another more important reason to use RTL. To improve CRuby performance significantly, &lt;strong&gt;we need a convenient intermediate representation (IR) for analysis and transformation of Ruby code&lt;/strong&gt;. It is hard to do this at the stack instruction level. Therefore, optimizing compilers never use stack instructions.&lt;/p&gt; &lt;p&gt;Stack instructions are a good representation for an interface language because of their simplicity and compactness. Stack instructions of &lt;a href="https://en.wikipedia.org/wiki/WebAssembly"&gt;WASM&lt;/a&gt; or &lt;a href="https://en.wikipedia.org/wiki/Java_bytecode"&gt;Java bytecode&lt;/a&gt; are examples of interface representation. Optimizations and code transformations are done on instructions with explicit operands like &lt;a href="https://llvm.org/docs/LangRef.html"&gt;LLVM IR&lt;/a&gt; or even on instructions containing both data- and control-flow dependencies like &lt;a href="https://labs.oracle.com/pls/apex/f?p=labs:40150:0::::P40000_PUBLICATION_ID:4470"&gt;Graal IR&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="additional-rtl-instructions"&gt;Additional RTL instructions&lt;/h2&gt; &lt;p&gt;To further improve RTL interpretation performance, initially, I added &lt;em&gt;specialized&lt;/em&gt;, &lt;em&gt;combined&lt;/em&gt;, and &lt;em&gt;speculative&lt;/em&gt; instructions.&lt;/p&gt; &lt;p&gt;When we know an operand value during RTL generation, we can use a &lt;em&gt;specialized instruction&lt;/em&gt;. Here is an example where we can use &lt;code&gt;plusi&lt;/code&gt;, an addition with immediate value operands (&lt;code&gt;t&amp;#60;index&amp;#62;&lt;/code&gt; and &lt;code&gt;l&amp;#60;index&amp;#62;&lt;/code&gt; denote indices of temporary and local variables, correspondingly):&lt;/p&gt; &lt;pre&gt; val2temp t1, 42 plus t2, l1, t1 --&amp;#62; plusi t2, l1, 42&lt;/pre&gt; &lt;p&gt;Usually, RTL code contains frequently used pairs of instructions. We can combine such pairs into one &lt;em&gt;combined instruction&lt;/em&gt;. Here is an example where we can use &lt;code&gt;btlt&lt;/code&gt;, a combined instruction for comparison and branch:&lt;/p&gt; &lt;pre&gt; lt t1, l1, t2 bt Label, t1 --&amp;#62; btlt Label, l1, t2&lt;/pre&gt; &lt;p&gt;Using specialized and combined instructions decreases the number of instructions and the overall code size.&lt;/p&gt; &lt;p&gt;Usually, one CRuby VM instruction can perform operations on a few different types. For example, the &lt;code&gt;plus&lt;/code&gt; instruction can perform both integer and floating point addition. If the operand types are known to be the same, we can use a simpler instruction that works only for given operand types.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Speculative instructions&lt;/em&gt; are generated during code interpretation. The original instruction checks the operand types. If they are the same, the instruction modifies itself into a speculative instruction, which works only for the given operand types. The speculative instruction still checks the operand types, and if they are not what is expected, the speculative instruction modifies itself into an unchangeable instruction, which works on all operand types just as the original instruction, but it never modifies itself.&lt;/p&gt; &lt;p&gt;For example, a &lt;code&gt;plus&lt;/code&gt; instruction can be changed into &lt;code&gt;iplus&lt;/code&gt; or &lt;code&gt;fplus&lt;/code&gt;, which work only on integer or floating point operands, respectively. If a speculative plus instruction receives operand values of unexpected types, it is changed into the instruction &lt;code&gt;uplus&lt;/code&gt;(unchangeable plus), which works for any operand types. And the instruction &lt;code&gt;uplus&lt;/code&gt; is never changed afterwards.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Specinsn.png"&gt;&lt;img class=" aligncenter wp-image-559327 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Specinsn.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Specinsn.png" alt="A plus instruction can be changed into iplus or fplus" width="416" height="151" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Specinsn.png 416w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Specinsn-300x109.png 300w" sizes="(max-width: 416px) 100vw, 416px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For interpretation usage, speculative instructions are probably unprofitable, because they still perform operand type checks. But these instructions will be quite important for JIT compilation, because they help to perform speculative optimizations. They also create large &lt;a href="https://en.wikipedia.org/wiki/Extended_basic_block"&gt;extended basic blocks&lt;/a&gt; in JITted code, which are optimized fairly well by JIT compilers.&lt;/p&gt; &lt;p&gt;Generally speaking, we can add specialized, combined, and speculative instructions to stack instructions too, but this makes little sense when the stack instructions are used as an interface language because such instructions will mostly complicate the interface.&lt;/p&gt; &lt;p&gt;It is a rare case when one solution has only advantages over another one. Introducing RTL is not an exception. I would not be honest if I omitted the following &lt;strong&gt;RTL drawbacks&lt;/strong&gt; here:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;First of all, &lt;strong&gt;RTL code is usually longer&lt;/strong&gt;. &lt;strong&gt;RTL could be slower&lt;/strong&gt; too when operand processing overhead and worse code locality outweigh smaller instruction dispatching overhead and less value memory traffic. Usually, this happens when RTL code has the same number of instructions as analogous stack instruction code. A typical case is code containing only call instructions where operands are processed only in stack mode.&lt;/li&gt; &lt;li&gt;Execution of &lt;strong&gt;RTL code consumes more memory on the VM stack&lt;/strong&gt;. This can happen when non-call RTL instruction execution results in a call to another RTL instruction sequence. For example, an RTL &lt;code&gt;plus&lt;/code&gt; instruction could receive an object as the first operand and the object class could have a method &lt;code&gt;+&lt;/code&gt; written in Ruby. Most of the time during RTL execution, we maintain a stack pointer with an address of the location after all stack slots for the temporary variables. With such an approach, we do not need to track stack pointer changes and we can easily implement different RTL optimizations involving instruction removal and moves. By the way, the same approach is used by most C compilers: they generate function code that sets up and keeps a stack pointer referencing the location after all stack slots for (user and temporary) variables of the function. More memory consumption on the stack would be not a problem if we had one stack. Because Ruby has threads, each thread has own stack, and currently, we need to reserve memory for each thread&amp;#8217;s stack for the worst-case stack consumption scenario; an increase of the stack memory reservation for RTL will be multiplied by the number of threads.&lt;br /&gt; Fortunately, the Ruby developers are working on implementing &lt;a href="https://rubykaigi.org/2018/presentations/sugiyama-k.html#jun02"&gt;variable length stacks&lt;/a&gt;, because fixed length stacks will be a problem for Ruby code in the future when a &lt;a href="https://rubykaigi.org/2018/presentations/ko1.html#jun01"&gt;new concurrency model&lt;/a&gt; will permit parallelism and will open the opportunity to use a much larger number of Ruby threads.&lt;/li&gt; &lt;li&gt;When we use stack instructions, all parts of the stack corresponding to a method written in Ruby always contain valid Ruby values. If the value has two zero final bits, it is a pointer to some object in the heap. For RTL, this might be not true, because the values of some stack slots might be undefined or contain obsolete data, for example, pointers to objects already garbage collected. Therefore, &lt;strong&gt;in the case of RTL, the garbage collector should treat stack slot values conservatively&lt;/strong&gt;. If the value looks like a pointer to an object in the heap, we treat it as a pointer even if it is not, for example, even if it is undefined random data. It is a bit more expensive to process the stack values conservatively (we need to check that the value appearing to be a pointer is some address in the heap) and there is a very small possibility that an object is not garbage collected although it should be. CRuby already has code for conservative value treatment for parts of the stack corresponding to methods written in C. We just reuse this code for the RTL implementation.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id="recent-rtl-development"&gt;Recent RTL development&lt;/h2&gt; &lt;p&gt;I already described the RTL project in my &lt;a href="https://developers.redhat.com/blog/2018/03/22/ruby-3x3-performance-goal"&gt;blog post&lt;/a&gt; a year ago. A lot has happened for the project since then. Here is a description of the recent RTL development work.&lt;/p&gt; &lt;h3 id="new-rtl-code-generation"&gt;New RTL code generation&lt;/h3&gt; &lt;p&gt;Initially, I implemented RTL code generation directly from CRuby &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;AST&lt;/a&gt; in place of the generation of stack instructions. In this approach, there is no additional RTL generation overhead, but there is also no place for the current stack instructions.&lt;/p&gt; &lt;p&gt;Unfortunately, the stack instructions interface is already open to the Ruby programmer. There are Ruby applications that directly handle stack instructions, for example, a Ruby debugger. Also, the Ruby programmer can generate stack instructions during Ruby code execution or save them in persistent memory and load them later into the VM to save time on compiling Ruby source code.&lt;/p&gt; &lt;p&gt;After a discussion with &lt;a href="https://en.wikipedia.org/wiki/Koichi_Sasada"&gt;Koichi Sasada&lt;/a&gt;, author of &lt;a href="https://en.wikipedia.org/wiki/YARV"&gt;YARV&lt;/a&gt; and the current stack instructions, I decided to re-implement RTL generation. &lt;strong&gt;Instead of AST, RTL should be generated from stack instructions&lt;/strong&gt;. It could be done after stack instruction generation or after loading stack instructions from persistent memory.&lt;/p&gt; &lt;p&gt;For the past year, I have been working on this implementation. In &lt;a href="https://www.youtube.com/watch?v=qpZDw-p9yag"&gt;my presentation&lt;/a&gt; at &lt;a href="http://rubykaigi.org/2017"&gt;RubyKaigi 2017&lt;/a&gt;, I said that it would be simpler to generate RTL from stack instructions instead of the abstract nodes. This turns out to be true only if we don&amp;#8217;t care about the generation of good RTL code. Here is an &lt;strong&gt;example of how to generate unoptimized RTL code&lt;/strong&gt;. You just need to use temporary variables for all instruction results.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen1.png"&gt;&lt;img class=" aligncenter wp-image-559297 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen1.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen1.png" alt="Example of how to generate unoptimized RTL code" width="899" height="520" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen1.png 899w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen1-300x174.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen1-768x444.png 768w" sizes="(max-width: 899px) 100vw, 899px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;RTL allows us to use local variables and immediate values as instruction operands. Here is &lt;strong&gt;optimized code that can be generated &lt;/strong&gt;for the same example. We can remove two instructions putting the same local variable value on the stack.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen2.png"&gt;&lt;img class=" aligncenter wp-image-559287 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen2.png" alt="Example of how to generate optimized RTL code" width="899" height="520" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen2.png 899w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen2-300x174.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/rtl-gen2-768x444.png 768w" sizes="(max-width: 899px) 100vw, 899px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;To generate optimized RTL, we need to know what each stack slot contains, for example, a known constant value or some local variable value. If the stack slot may contain different values on a join point of the &lt;a href="https://en.wikipedia.org/wiki/Control_flow_graph"&gt;control-flow graph&lt;/a&gt; (CFG), we should put these different values into the same temporary variable.&lt;/p&gt; &lt;p&gt;I will not describe in detail how to get such information. It is defined by the following &lt;a href="https://en.wikipedia.org/wiki/Data-flow_analysis"&gt;forward data flow problem&lt;/a&gt;, whose solution is based on lattice theory:&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/stack-data-flow.png"&gt;&lt;img class=" aligncenter wp-image-559317 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/stack-data-flow.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/stack-data-flow.png" alt="Forward data flow problem" width="493" height="65" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/stack-data-flow.png 493w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/stack-data-flow-300x40.png 300w" sizes="(max-width: 493px) 100vw, 493px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;Here, &lt;em&gt;Stack_In&lt;/em&gt; and &lt;em&gt;Stack_Out&lt;/em&gt; are states of the stack at the start and at the end of a basic block (BB). &lt;em&gt;Stack_Kill&lt;/em&gt; and &lt;em&gt;Stack_Gen&lt;/em&gt; define changes of the stack state in the given basic block (BB). Possible stack slot state changes are described by the following lattice.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/lattice.png"&gt;&lt;img class=" aligncenter wp-image-559387 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/lattice.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/lattice.png" alt="Lattice that shows the possible stack slot state changes " width="560" height="312" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/lattice.png 560w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/lattice-300x167.png 300w" sizes="(max-width: 560px) 100vw, 560px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For example, if a stack slot state is unknown in one immediate predecessor BB in the CFG and set to some known value in all other immediate predecessor BBs, the stack slot state will be the known value at the BB start.&lt;/p&gt; &lt;p&gt;If a stack slot state is known to have a value of some local variable in all predecessor BBs, the stack slot state will be the local variable at the BB start. If the states of the predecessors have values of different local variables, the stack slot state will be a temporary variable at the BB start (in this case, we must generate moves of the local variables into the temporary variable in the predecessors), and so on.&lt;/p&gt; &lt;p&gt;I was afraid that RTL generation might be time-consuming. Fortunately, that is not the case. It adds &lt;strong&gt;less than 1.5%&lt;/strong&gt; to the overall compilation time of the &lt;a href="https://github.com/mame/optcarrot"&gt;Optcarrot benchmark&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;By the way, you can also optimize RTL code by using classical &lt;a href="https://en.wikipedia.org/wiki/Constant_folding#Constant_propagation"&gt;constant folding&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Copy_propagation"&gt;copy propagation&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Dead_code_elimination"&gt;dead code elimination&lt;/a&gt;. But such optimizations will be slower than my approach because they will need more passes.&lt;/p&gt; &lt;p&gt;RTL generation removes a lot of &lt;code&gt;nop&lt;/code&gt; instructions but sometimes the generation adds other new &lt;code&gt;nop&lt;/code&gt; instructions. This happens when there is no direct correspondence between the original stack and generated RTL instructions and we need &lt;code&gt;nop&lt;/code&gt; instructions to correctly mark exception handling and instruction tracing boundaries.&lt;/p&gt; &lt;h3 id="new-rtl-instructions"&gt;New RTL instructions&lt;/h3&gt; &lt;p&gt;To decrease RTL code size, I&amp;#8217;ve added &lt;strong&gt;new specialized RTL instructions&lt;/strong&gt; for numerous cases when operands are processed in stack order. For example, if we have an RTL instruction &lt;code&gt;plus &amp;#60;index -1&amp;#62;, &amp;#60;index -1&amp;#62;, &amp;#60;index -2&amp;#62;&lt;/code&gt;, which takes temporary stack slots with &lt;code&gt;index -1&lt;/code&gt; and &lt;code&gt;index-2&lt;/code&gt; and puts the result into stack slot with &lt;code&gt;index -1&lt;/code&gt;, we can use the simple instruction &lt;code&gt;splus &amp;#60;index -1&amp;#62;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;CRuby has a &lt;a href="https://en.wikipedia.org/wiki/Tracing_garbage_collection#Generational_GC_(ephemeral_GC)"&gt;generational garbage collector&lt;/a&gt;, and every time we assign a value to a (non-temporary) variable, we should inform the garbage collector about this. So for the result of the RTL instruction, we should check that the result is not a temporary variable and call the garbage collector after that.&lt;/p&gt; &lt;p&gt;Although the check is small, it might considerably decrease RTL interpretation speed. I found that in most cases, faster code can be generated for the interpreter if we use only temporaries as RTL instruction results and generate an additional move instruction if we need the final result to be stored in a local variable.&lt;/p&gt; &lt;p&gt;For MJIT, such a constraint on RTL instruction results would not be necessary, because an optimizing compiler can easily remove the check.&lt;/p&gt; &lt;h3 id="rtl-code-merging"&gt;RTL code merging&lt;/h3&gt; &lt;p&gt;Since the start of my work on RTL and JIT, I never merged trunk into my development branch. This was a big mistake. CRuby is developed at a very fast pace. A lot of changes were made in the VM code by Koichi Sasada and to MJIT by Takashi Kokubun during the last two years.&lt;/p&gt; &lt;p&gt;Merging 2 years of changes to the trunk into my CRuby RTL branch took 6 months. I spent 50% of my work time on CRuby development. So it means that one year of CRuby development needs 1.5 months of my work to merge trunk changes into my CRuby RTL branch. This says a lot about the invasiveness of the changes required to implement RTL in CRuby.&lt;/p&gt; &lt;p&gt;But finally I have fresh RTL CRuby code very close to the CRuby 2.6 release and I can compare RTL CRuby performance in the interpreter and JIT modes with the performance of trunk CRuby on the latest merge point.&lt;/p&gt; &lt;h3 id="perfomance-comparison-of-rtl-cruby-and-trunk-cruby"&gt;Performance comparison of RTL CRuby and trunk CRuby&lt;/h3&gt; &lt;p&gt;For an RTL and stack instruction comparison, I used an Intel i7-9700K machine with 16GB of memory under Linux Fedora Core 29. I compared the RTL version of CRuby and the trunk at the latest merge point with the RTL branch. The comparison information below is &lt;strong&gt;always given for the same modes&lt;/strong&gt; (CRuby interpreter only and CRuby with JIT usage).&lt;/p&gt; &lt;p&gt;Each benchmark ran three times and the best result was used. For wall and CPU time, this is the smallest time. For peak memory consumption, this is the smallest &lt;a href="https://en.wikipedia.org/wiki/Resident_set_size"&gt;maximum resident size&lt;/a&gt; of the CRuby process.&lt;/p&gt; &lt;p&gt;I used micro and small benchmarks. You can find these benchmarks in the directory &lt;a href="https://github.com/vnmakarov/ruby/tree/stack-rtl-mjit/MJIT-benchmarks"&gt;MJIT-benchmark&lt;/a&gt; in my repository on GitHub.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/wall.png"&gt;&lt;img class=" aligncenter wp-image-559307 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/wall.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/wall.png" alt="Wall time comparison" width="613" height="460" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/wall.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/wall-300x225.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/cpu.png"&gt;&lt;img class=" aligncenter wp-image-559417 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/cpu.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/cpu.png" alt="CPU time comparison" width="613" height="460" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/cpu.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/cpu-300x225.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;As you can see, the RTL version of CRuby is about &lt;strong&gt;40% and 50% faster&lt;/strong&gt;, respectively, in the interpreter and JIT modes. Nine months ago, the RTL version with the JIT compiler was almost two times faster but, thanks to Takashi Kokubun, &lt;a href="https://medium.com/@k0kubun/ruby-2-6-jit-progress-and-future-84e0a830ecbf"&gt;MJIT with stack instructions was improved considerably since then&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/mem.png"&gt;&lt;img class=" aligncenter wp-image-559377 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/mem.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/mem.png" alt="Peak memory footprint increase" width="613" height="460" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/mem.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/mem-300x225.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Peak memory consumption is about &lt;strong&gt;3% and 14% more, &lt;/strong&gt;respectively, in the interpreter and JIT modes for the RTL version of CRuby. The major reasons for this are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The code of the RTL version of CRuby is simply bigger.&lt;/li&gt; &lt;li&gt;We have to keep two versions of the Ruby bytecode: stack and RTL instructions.&lt;/li&gt; &lt;li&gt;We increased the VM stack size for Ruby processes to pass CRuby tests with deep recursion because RTL code execution can consume more memory on the VM stack.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I also used &lt;a href="https://github.com/mame/optcarrot"&gt;Optcarrot&lt;/a&gt; for benchmarking. It is a medium-size Ruby program that emulates a Nintendo game computer. The number of generated frames for the picture processing unit (PPU) of the emulated computer defines how long the program runs. I used 2,000 frames for Optcarrot. There are two versions of Optcarrot code. One is an unoptimized version and the other is manually optimized. To run the optimized version, the option &lt;code&gt;--opt&lt;/code&gt; should be used.&lt;/p&gt; &lt;p&gt;Here are the results.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-wall.png"&gt;&lt;img class=" aligncenter wp-image-559347 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-wall.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-wall.png" alt="Wall time comparison" width="613" height="460" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-wall.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-wall-300x225.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-cpu.png"&gt;&lt;img class=" aligncenter wp-image-559367 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-cpu.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-cpu.png" alt="CPU time comparison" width="613" height="460" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-cpu.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-cpu-300x225.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The RTL version of CRuby runs &lt;strong&gt;up to 30% faster&lt;/strong&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-mem.png"&gt;&lt;img class=" aligncenter wp-image-559357 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-mem.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-mem.png" alt="Peak memory footprint increase" width="613" height="460" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-mem.png 613w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/optcarrot-mem-300x225.png 300w" sizes="(max-width: 613px) 100vw, 613px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id="ruby-specific-rtl-optimization"&gt;Ruby-specific RTL optimization&lt;/h3&gt; &lt;p&gt;To demonstrate the RTL advantage for Ruby code analysis and transformation, I recently implemented redundant code removal for boxing and unboxing floating point values.&lt;/p&gt; &lt;p&gt;CRuby uses so-called &lt;em&gt;tagged values&lt;/em&gt;. Let us consider 64-bit machines because they are most commonly used these days.&lt;/p&gt; &lt;p&gt;Many values are just pointers to the objects in the heap. Because the objects in the heap are 8-byte aligned, the last three bits of the pointers are always zero.&lt;/p&gt; &lt;p&gt;Fixnum values use 63 bits and have binary tag &lt;code&gt;1&lt;/code&gt;. Larger integer numbers are represented by multiple-precision numbers in the heap.&lt;/p&gt; &lt;p&gt;Floating point values use 62 bits and have binary tag &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/values.png"&gt;&lt;img class=" aligncenter wp-image-559337 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/values.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/values.png" alt="Pointers to the objects in the heap" width="400" height="292" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/values.png 400w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/values-300x219.png 300w" sizes="(max-width: 400px) 100vw, 400px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Most computers use the &lt;a href="https://en.wikipedia.org/wiki/IEEE_754"&gt;IEEE standard for floating point arithmetic&lt;/a&gt;. According to the standard, double floating point numbers have one bit for the number sign, 11 bits for the binary exponent, and 52 bits for the mantissa (also called a &lt;em&gt;fraction&lt;/em&gt;).&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/IEEE_double.png"&gt;&lt;img class=" aligncenter wp-image-559427 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/IEEE_double.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/IEEE_double.png" alt="Double floating point numbers" width="540" height="132" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/IEEE_double.png 540w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/IEEE_double-300x73.png 300w" sizes="(max-width: 540px) 100vw, 540px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;So how can CRuby fit a 64-bit double into 62 bits? CRuby can do this only for a subset of all possible double values. The numbers outside the subset are kept in the heap.&lt;/p&gt; &lt;p&gt;CRuby could keep fixed 2 bits from the mantissa or sign. But this would be a very bad idea because probably about 3/4 of all numbers would be stored in the heap. The only reasonable choice is to keep fixed 2 bits in the exponent. The exponent range is too big and most programs use only a very small part of it.&lt;/p&gt; &lt;p&gt;CRuby uses this approach. It fixes 2 bits in the exponent. The exponents with fixed bits are in the range from minus 255 to 256. I call the transformation of double floating point values &lt;strong&gt;from&lt;/strong&gt; and &lt;strong&gt;to&lt;/strong&gt; CRuby 64-bit values &lt;strong&gt;unboxing&lt;/strong&gt; and &lt;strong&gt;boxing&lt;/strong&gt;, respectively.&lt;/p&gt; &lt;p&gt;Here is the C code used by CRuby to box an IEEE double floating point value &lt;code&gt;d&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; union { double d; VALUE v; } t; int bits; t.d = d; bits = (int)((VALUE)(t.v &amp;#62;&amp;#62; 60) &amp;#38; 0x7); if (t.v != 0x3000000000000000 /* 1.72723e-77 */ &amp;#38;&amp;#38; !((bits-3) &amp;#38; ~0x01)) { return (RUBY_BIT_ROTL(t.v, 3) &amp;#38; ~(VALUE)0x01) | 0x02; } else if (t.v == (VALUE)0) { /* +0.0 */ return 0x8000000000000002; } /* else create heap representation */&lt;/pre&gt; &lt;p&gt;This is very clever and well-optimized code. I will not explain how the code works. It is not necessary for describing the boxing/unboxing optimization. If you like puzzles, you can figure out what this code actually does.&lt;/p&gt; &lt;p&gt;And here is the C code for unboxing a floating point value &lt;code&gt;v&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; union { double d; VALUE v; } t; int bits; if (v != (VALUE)0x8000000000000002) { /* LIKELY */ VALUE b63 = (v &amp;#62;&amp;#62; 63); t.v = RUBY_BIT_ROTR((2 - b63) | (v &amp;#38; ~(VALUE)0x03), 3); return t.d; } return 0.0;&lt;/pre&gt; &lt;p&gt;The CRuby JIT compiler (MJIT) uses &lt;a href="https://gcc.gnu.org/"&gt;GCC&lt;/a&gt; or &lt;a href="https://llvm.org/"&gt;LLVM&lt;/a&gt; to generate machine code. For this pair of Ruby multiplication statements:&lt;/p&gt; &lt;pre&gt; r *= m r *= m&lt;/pre&gt; &lt;p&gt;the JIT-generated code can be roughly represented by the following pseudocode:&lt;/p&gt; &lt;pre&gt; d1 = unbox r d2 = unbox m d1 = d1 * d2 r = box d1 // redundant d1 = unbox r // redundant d2 = unbox m // redundant d1 = d1 * d2 r = box d1&lt;/pre&gt; &lt;p&gt;where &lt;code&gt;d1&lt;/code&gt; and &lt;code&gt;d2&lt;/code&gt; are C double floating variables.&lt;/p&gt; &lt;p&gt;No optimizing compiler, including GCC or LLVM, can remove redundant unboxing and boxing code. So we need to optimize this ourselves.&lt;/p&gt; &lt;p&gt;Here is simplified RTL for the multiplication statement pair:&lt;/p&gt; &lt;pre&gt; mult t1, l4, l3 temp2loc l4, t1 mult t1, l4, l3 temp2loc l4, t1&lt;/pre&gt; &lt;p&gt;where &lt;code&gt;l3&lt;/code&gt; and &lt;code&gt;l4&lt;/code&gt; denote local RTL variables for the Ruby variables &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;r&lt;/code&gt;, respectively.&lt;/p&gt; &lt;p&gt;After interpreting this RTL code several times, the RTL &lt;code&gt;mult&lt;/code&gt; instructions are transformed into speculative floating point mult instructions &lt;code&gt;fmult&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt; fmult t1, l4, l3 temp2loc l4, t1 fmult t1, l4, l3 temp2loc l4, t1&lt;/pre&gt; &lt;p&gt;When MJIT generates code for the RTL speculative instructions, we know that the result of a speculative floating point instruction is always a floating point value in the JITted code. If the result is not a floating value for some reason, the speculative instruction would be transformed into the non-speculative form, the execution of the generated machine code would be canceled, and we would switch to the interpretation of the new non-speculative code.&lt;/p&gt; &lt;p&gt;When we know that the result is a floating point value, we can reuse the unboxed double floating value in subsequent instructions. That gives a very brief idea of the optimization.&lt;/p&gt; &lt;p&gt;In more detail, we build a control flow graph of the RTL code (basic blocks of RTL instructions and edges between them describing possible control flow) and determine which local or temporary variables contain floating point values at the beginning and at the end of each basic block, solving the following forward data flow problem:&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/FP-data-flow.png"&gt;&lt;img class=" aligncenter wp-image-559407 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/FP-data-flow.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/FP-data-flow.png" alt="Forward data flow problem" width="326" height="65" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/FP-data-flow.png 326w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/FP-data-flow-300x60.png 300w" sizes="(max-width: 326px) 100vw, 326px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;hr /&gt; &lt;p&gt;Here, &lt;em&gt;In&lt;/em&gt; and &lt;em&gt;Out&lt;/em&gt; are local and temporary variables known to contain floating point values at the start and the end of a basic block. &lt;em&gt;Gen &lt;/em&gt;defines local and temporary variables containing a floating point value at the end of a basic block because the variables are results of speculative floating point instructions in the basic block. &lt;em&gt;Kill&lt;/em&gt; defines local and temporary variables whose values might become a non-floating point value at the end of the basic block. For example, a local variable used as a result of a generic arithmetic instruction in a basic block is killed in the basic block.&lt;/p&gt; &lt;p&gt;Then we use this information to generate JITted code, which reuses unboxed values where possible.&lt;/p&gt; &lt;p&gt;How profitable could this optimization be?&lt;/p&gt; &lt;p&gt;Let us consider the Ruby code:&lt;/p&gt; &lt;pre&gt;def f r = 2.0; m = 1.001 i = 0 while i &amp;#60; 1_000 do r *= m; r *= m; r *= m; r *= m; r *= m r *= m; r *= m; r *= m; r *= m; r *= m i += 1 end r end r = 0.0 100_000.times { r = f} p r&lt;/pre&gt; &lt;p&gt;The following bar-chart contains elapsed time in seconds of Ruby code execution on the Intel i7-9700K for different CRuby usage modes:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/fpopt.png"&gt;&lt;img class=" aligncenter wp-image-559397 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/fpopt.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/fpopt.png" alt="Elapsed time in seconds of Ruby code execution" width="614" height="461" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/fpopt.png 614w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/fpopt-300x225.png 300w" sizes="(max-width: 614px) 100vw, 614px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;So &lt;strong&gt;the optimization improves JITted code by 3.2 times&lt;/strong&gt; for this example.&lt;/p&gt; &lt;p&gt;It is very hard to implement this optimization using stack instructions where temporary variables are not represented explicitly. The optimization also needs speculative instructions that are absent in the current stack instruction set.&lt;/p&gt; &lt;p&gt;Analogously, RTL could be used for &lt;a href="https://en.wikipedia.org/wiki/Escape_analysis"&gt;escape analysis&lt;/a&gt; to avoid object creation in the heap, which could considerably speed up execution for some cases.&lt;/p&gt; &lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this post, I&amp;#8217;ve tried to show the advantages and disadvantages of RTL for CRuby. From my point of view, it is worthwhile to seriously consider using RTL for CRuby in the future.&lt;/p&gt; &lt;p&gt;Adding RTL to CRuby will be not an easy task. The change is very invasive to CRuby code, and probably I am not the right person to do this because I am still a novice to CRuby development.&lt;/p&gt; &lt;p&gt;Maintaining the code on the branch requires a lot of effort from me. I think I am done with the RTL project for CRuby and I will spend my efforts on another less-CRuby-code-dependent project that will also be beneficial for improving CRuby performance.&lt;/p&gt; &lt;p&gt;I hope the code and proposed solutions will still be useful for Ruby core developers, and I will be glad to help if someone tries to use them in CRuby.&lt;/p&gt; &lt;p&gt;The RTL implementation sources can be found in my repository on branch &lt;a href="https://github.com/vnmakarov/ruby/tree/stack-rtl-mjit"&gt;stack-rtl-mjit&lt;/a&gt;. For easy comparison of RTL and stack VM implementations, this branch is always based on a &lt;a href="https://github.com/vnmakarov/ruby/tree/stack-rtl-mjit-base"&gt;branch containing only trunk changes&lt;/a&gt;, which currently is pretty close to the CRuby 2.6 release.&lt;/p&gt; &lt;h2&gt;Other Ruby performance articles on Red Hat Developers&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/22/ruby-3x3-performance-goal/"&gt;Towards the Ruby 3&amp;#215;3 performance goal&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/02/27/towards-faster-ruby-hash-tables/"&gt;Towards faster Ruby hash tables&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/14/making-the-operation-of-code-more-transparent-and-obvious/"&gt;Making the operation of code more transparent with SystemTap&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/11/use-the-dynamic-tracing-tools-luke/"&gt;&amp;#8220;Use the dynamic tracing tools, Luke&amp;#8221;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#38;linkname=Register%20Transfer%20Language%20for%20CRuby" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F19%2Fregister-transfer-language-for-cruby%2F&amp;#038;title=Register%20Transfer%20Language%20for%20CRuby" data-a2a-url="https://developers.redhat.com/blog/2019/02/19/register-transfer-language-for-cruby/" data-a2a-title="Register Transfer Language for CRuby"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/02/19/register-transfer-language-for-cruby/"&gt;Register Transfer Language for CRuby&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/niji_djr_mk" height="1" width="1" alt=""/&gt;</content><summary>For the last two years, I have been trying to improve CRuby performance. I have been working simultaneously on two major fronts: introducing register transfer language (RTL) for the CRuby virtual machine (VM) and just-in-time (JIT) compilation. For background on the goal of having Ruby 3 be 3 times faster than version 2 (3X3), see my previous article, “Towards the Ruby 3×3 Performance Goal“. The J...</summary><dc:creator>Vladimir Makarov</dc:creator><dc:date>2019-02-19T13:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/02/19/register-transfer-language-for-cruby/</feedburner:origLink></entry><entry><title>Hibernate ORM 5.3.8.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9IZ4WzQeMNk/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_orm_5_3_8_final_released</id><updated>2019-02-19T11:20:06Z</updated><published>2019-02-19T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Today, we released a new maintenance release of Hibernate ORM 5.3: 5.3.8.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="bug-fixes"&gt;&lt;a class="anchor" href="#bug-fixes"&gt;&lt;/a&gt;Bug fixes&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We fixed a couple of compatibility issues and bugs.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find the full list of changes &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31715/tab/release-report-all-issues"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31715&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-5-3-8-final"&gt;&lt;a class="anchor" href="#getting-5-3-8-final"&gt;&lt;/a&gt;Getting 5.3.8.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on &lt;a href="http://hibernate.org/orm/releases/5.3/#get-it"&gt;the dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/hibernate"&gt;&lt;strong&gt;hibernate&lt;/strong&gt; tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-orm"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9IZ4WzQeMNk" height="1" width="1" alt=""/&gt;</content><summary>Today, we released a new maintenance release of Hibernate ORM 5.3: 5.3.8.Final. What’s new Bug fixes We fixed a couple of compatibility issues and bugs. You can find the full list of changes here (or, for people without a Hibernate Jira account, here). Getting 5.3.8.Final All details are available and up to date on the dedicated page on hibernate.org. Feedback, issues, ideas? To get in touch, use ...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2019-02-19T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/02/19/hibernate-orm-538-final-out/</feedburner:origLink></entry><entry><title>Creating a containerized Python/Flask development environment with Red Hat CodeReady Workspaces</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/H0TpUuMYMKo/" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="flask" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes Operator" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Python Flask" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Shane Boulden</name></author><id>searchisko:content:id:jbossorg_blog-creating_a_containerized_python_flask_development_environment_with_red_hat_codeready_workspaces</id><updated>2019-02-18T13:00:13Z</updated><published>2019-02-18T13:00:13Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview/"&gt;Red Hat CodeReady Workspaces&lt;/a&gt; provide developers with containerized development environments hosted on &lt;a href="http://openshift.com/"&gt;OpenShift&lt;/a&gt;/&lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;. DevOps teams can now use a hosted development environment that&amp;#8217;s pre-built for their chosen stack and customized for their project.&lt;/p&gt; &lt;p&gt;CodeReady Workspaces can help you rapidly onboard developers for your project as everything they need to develop is running in a containized workspace. In this post, we&amp;#8217;re going to use CodeReady Workspaces to get up and running quickly with an existing open source project, Peak. Peak is a multi-container Kubernetes application for performance testing web services, and it allows you to create distributed performance tests using the Kubernetes Batch API for test orchestration. We&amp;#8217;ll make some modifications to Peak&amp;#8217;s Flask front end, a stateless web interface that interacts with a Falcon RESTful API to return data about performance tests. You won&amp;#8217;t need the complete Peak application deployed, though if you like, you can find steps to deploy it to OpenShift &lt;a href="https://github.com/peak-oss/peakdocs"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To follow along you&amp;#8217;ll need a Red Hat OpenShift Container Platform 3.11 environment. You can use the &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;Red Hat Container Development Kit&lt;/a&gt; on your Windows, macOS, or Linux laptop or a hosted Red Hat OpenShift instance to do it on online.&lt;span id="more-559107"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s get started!&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Deploying CodeReady Workspaces&lt;/h2&gt; &lt;p&gt;CodeReady Workspaces uses a Kubernetes Operator for deployment. An Operator is basically a method of packaging, deploying, and managing a Kubernetes application. If you&amp;#8217;d like to read more about the Operator Framework, Brandon Philips has an awesome write-up on the &lt;a href="https://blog.openshift.com/introducing-the-operator-framework/"&gt;OpenShift blog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Create a new project for your CodeReady components:&lt;/p&gt; &lt;pre&gt;$ oc new-project codeready &lt;/pre&gt; &lt;p&gt;You can download the CodeReady Workspaces Kubernetes Operator &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview/"&gt;here&lt;/a&gt;. Once downloaded, run the &lt;code&gt;deploy&lt;/code&gt; script to instantiate the Operator into the &lt;code&gt;codeready&lt;/code&gt; project:&lt;/p&gt; &lt;pre&gt;$ ./deploy.sh --deploy -p=codeready &lt;/pre&gt; &lt;p&gt;You should see something like this once the Operator and components are successfully deployed:&lt;/p&gt; &lt;pre&gt;[INFO]: Welcome to CodeReady Workspaces Installer [INFO]: Found oc client in PATH [INFO]: Checking if you are currently logged in... [INFO]: Active session found. Your current context is: codeready/master-youropenshift-com:443/user [INFO]: Creating installer service account serviceaccount/che-operator created rolebinding.rbac.authorization.k8s.io/che-operator created configmap/che-operator created configmap/che-operator patched Unable to use a TTY - container che-operator did not allocate one If you don't see a command prompt, try pressing enter. time="2019-02-05T22:35:14Z" level=info msg="postgres successfully deployed" time="2019-02-05T22:35:14Z" level=info msg="Provisioning resources in pod postgres-7dd4d9cd8f-vs64b" time="2019-02-05T22:35:21Z" level=info msg="Provisioning completed" time="2019-02-05T22:35:21Z" level=info msg="Waiting for deployment keycloak. Default timeout: 420 seconds" time="2019-02-05T22:38:17Z" level=info msg="keycloak successfully deployed" time="2019-02-05T22:38:17Z" level=info msg="Provisioning resources in pod keycloak-66f64ddd49-qhmsp" time="2019-02-05T22:38:59Z" level=info msg="Provisioning completed" time="2019-02-05T22:39:00Z" level=info msg="Waiting for deployment che. Default timeout: 420 seconds" time="2019-02-05T22:40:40Z" level=info msg="che successfully deployed" time="2019-02-05T22:40:40Z" level=info msg="Che is available at: http://codeready-codeready.apps.youropenshift.com" time="2019-02-05T22:40:40Z" level=info msg="Deployment took 6m11.033927729s" [INFO]: CodeReady Workspaces successfully deployed and available at http://codeready-codeready.apps.youropenshift.com &lt;/pre&gt; &lt;h2&gt;Creating a Flask workspace&lt;/h2&gt; &lt;p&gt;First, we need to discover the URL for the CodeReady Workspaces dashboard:&lt;/p&gt; &lt;pre&gt;$ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD codeready codeready-codeready.apps.youropenshift.com che-host &amp;#60;all&amp;#62; None keycloak keycloak-codeready.apps.youropenshift.com keycloak &amp;#60;all&amp;#62; None &lt;/pre&gt; &lt;p&gt;Navigate to the Codeready URL, and you&amp;#8217;ll be redirected to a &lt;a href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat Single Sign-On&lt;/a&gt; login page. You can use the credentials &lt;code&gt;admin/admin&lt;/code&gt; initially:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-48-30.png"&gt;&lt;img class=" aligncenter wp-image-559197 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-48-30-1024x510.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-48-30-1024x510.png" alt="Red Hat Single Sign-On login page" width="640" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-48-30-1024x510.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-48-30-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-48-30-768x383.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;After you&amp;#8217;re logged in, you&amp;#8217;ll be presented with the CodeReady dashboard.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-51-09.png"&gt;&lt;img class=" aligncenter wp-image-559207 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-51-09-1024x255.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-51-09-1024x255.png" alt="CodeReady dashboard" width="640" height="159" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-51-09-1024x255.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-51-09-300x75.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-51-09-768x191.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Select &amp;#8216;Add Workspace,&amp;#8217; and give your workspace a name on the next page. Then, select the &amp;#8216;python&amp;#8217; stack from the list, and leave 2GB of RAM for the dev-machine.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-52-08.png"&gt;&lt;img class=" aligncenter wp-image-559217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-52-08-1024x410.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-52-08-1024x410.png" alt="Workspace configuration" width="640" height="256" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-52-08-1024x410.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-52-08-300x120.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-52-08-768x308.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Next, select the &amp;#8216;Add or Import Project&amp;#8217; button. Select &amp;#8216;Github,&amp;#8217; and then enter the URL for the Peak Flask application: &lt;code&gt;https://github.com/peak-oss/peakweb&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-54-42.png"&gt;&lt;img class=" aligncenter wp-image-559227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-54-42-1024x169.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-54-42-1024x169.png" alt="Entering the URL for the Peak Flask application" width="640" height="106" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-54-42-1024x169.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-54-42-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-07-21-54-42-768x126.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Finally, select &amp;#8216;Add&amp;#8217; and then &amp;#8216;Create &amp;#38; Open&amp;#8217;. Our CodeReady Workspace is now available, and you&amp;#8217;ll find the Peak code has already been cloned and Python development tools are installed:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-13-48-04.png"&gt;&lt;img class=" aligncenter wp-image-560177 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-13-48-04-1024x510.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-13-48-04-1024x510.png" alt="CodeReady Workspace available" width="640" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-13-48-04-1024x510.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-13-48-04-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-13-48-04-768x382.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Running the Flask app&lt;/h2&gt; &lt;p&gt;We have our code cloned and our development tools installed, so let&amp;#8217;s try running the Flask application. From the menu, select &amp;#8216;Assistant &amp;#62; Tool Windows &amp;#62; Commands.&amp;#8217; You&amp;#8217;ll now see the commands window presented and a single command: &lt;code&gt;run&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-09-34.png"&gt;&lt;img class=" aligncenter wp-image-560477 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-09-34-1024x507.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-09-34-1024x507.png" alt="Commands window and &amp;#34;run&amp;#34; command" width="640" height="317" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-09-34-1024x507.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-09-34-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-09-34-768x380.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Click the &amp;#8216;run&amp;#8217; command to edit it, and copy the following script into the &amp;#8216;Command line&amp;#8217; section:&lt;/p&gt; &lt;pre&gt;pushd peakweb pip install -r requirements.txt export PYTHONDONTWRITEBYTECODE=1 export FLASK_SECRET=1234 export PEAKORC="" gunicorn wsgi:application -b 0.0.0.0 &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s look a little deeper at this script:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;pushd peakweb&lt;/code&gt;: Change into the &lt;code&gt;peakweb&lt;/code&gt; directory holding our code.&lt;/li&gt; &lt;li&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;: Ensure the Python dependencies for the project are installed.&lt;/li&gt; &lt;li&gt;&lt;code&gt;export PYTHONDONTWRITEBYTECODE=1&lt;/code&gt;: Python leaves bytecode artifacts around when we run the application, and we don&amp;#8217;t want these cluttering our source code.&lt;/li&gt; &lt;li&gt;&lt;code&gt;export FLASK_SECRET=1234&lt;/code&gt;: This is the cross-site request forgery (CSRF) secret for the application. In production, we&amp;#8217;d set this to a more complex string value.&lt;/li&gt; &lt;li&gt;&lt;code&gt;export PEAKORC=""&lt;/code&gt;: This environment variable defines the Peak API that the Flask front end communicates with. We don&amp;#8217;t need it for the changes we&amp;#8217;ll make, though the application won&amp;#8217;t start without this.&lt;/li&gt; &lt;li&gt;&lt;code&gt;gunicorn wsgi:application -b 0.0.0.0&lt;/code&gt;: This command starts the Flask application and binds to all interfaces in our containerized server.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once finished, your new command should look like the screenshot below:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-09.png"&gt;&lt;img class=" aligncenter wp-image-560437 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-09-1024x510.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-09-1024x510.png" alt="Contents of the new command" width="640" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-09-1024x510.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-09-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-09-768x383.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Click &amp;#8216;Save&amp;#8217; and then &amp;#8216;Run&amp;#8217; to try out the command. You&amp;#8217;ll see a new terminal window appear with output from the command we ran above:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-54.png"&gt;&lt;img class=" aligncenter wp-image-560447 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-54-1024x510.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-54-1024x510.png" alt="New terminal window appear with output from the command" width="640" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-54-1024x510.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-54-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-06-54-768x383.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;We can now see what our deployed app looks like. Select the [+] next to the &amp;#8216;run&amp;#8217; command to open the &amp;#8216;Servers&amp;#8217; menu:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-07-41.png"&gt;&lt;img class=" aligncenter wp-image-560457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-07-41-1024x508.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-07-41-1024x508.png" alt="The 'Servers' menu" width="640" height="318" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-07-41-1024x508.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-07-41-300x149.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-21-07-41-768x381.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You&amp;#8217;ll see a few different ports listed here, each allocated to a specific route. Our Flask app is running on port 8000, so select the HTTP route listed next to port 8000. Here&amp;#8217;s the deployed Flask application:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-37-19.png"&gt;&lt;img class=" aligncenter wp-image-560087 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-37-19-1024x307.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-37-19-1024x307.png" alt="The deployed Flask application" width="640" height="192" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-37-19-1024x307.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-37-19-300x90.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-37-19-768x230.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-37-19.png 1400w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Making changes&lt;/h2&gt; &lt;p&gt;Looks like we&amp;#8217;re all set! Let&amp;#8217;s make a small change, run our new build command, and preview the changes in the CodeReady Workspace.&lt;/p&gt; &lt;p&gt;Open the &amp;#8216;peakweb &amp;#62; templates &amp;#62; base.html&amp;#8217; file, and modify the footer section here to read &amp;#8216;Peak is open source software!&amp;#8217;:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-44-57.png"&gt;&lt;img class=" aligncenter wp-image-560097 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-44-57-1024x511.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-44-57-1024x511.png" alt="Making a small change" width="640" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-44-57-1024x511.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-44-57-300x150.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-44-57-768x383.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Run your shiny new &lt;code&gt;run&lt;/code&gt; command again, open the preview from the &amp;#8216;Servers&amp;#8217; menu, and verify the changes have been made. Note you will need to stop the previous &lt;code&gt;run&lt;/code&gt; command to free up the socket:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-48-40.png"&gt;&lt;img class=" aligncenter wp-image-560107 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-48-40-1024x301.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-48-40-1024x301.png" alt="Running the modified command" width="640" height="188" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-48-40-1024x301.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-48-40-300x88.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-48-40-768x226.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screenshot-from-2019-02-08-10-48-40.png 1357w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Awesome! We now have a containerized development environment for our Flask application that&amp;#8217;s hosted on OpenShift and we can access anytime. If you want to take this a step further, you can look at using a &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces_for_openshift/1.0.0/html/administration_guide/administering_workspaces#factories"&gt;factory&lt;/a&gt; to create instances of our now-configured workspace, making it easier to onboard new developers to the team. You can also find examples of how to use factories in &lt;a href="https://developers.redhat.com/blog/2019/01/28/codeready-workspaces-streamline-jboss-eap-development-part2/"&gt;Laurent Broudoux&amp;#8217;s brilliant series&lt;/a&gt; on Red Hat JBoss Enterprise Application Platform development with CodeReady Workspaces.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/21/codeready-workspaces-streamline-jboss-eap-development/"&gt;Streamline your JBoss EAP dev environment with Red Hat CodeReady Workspaces: Part 1&lt;/a&gt;  and &lt;a href="https://developers.redhat.com/blog/2019/01/28/codeready-workspaces-streamline-jboss-eap-development-part2/"&gt;Part 2&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/11/codeready-workspaces-openshift/"&gt;CodeReady Workspaces for OpenShift (Beta) – It works on their machines too&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/18/eclipse-che-7-coming-part-1/"&gt;Eclipse Che 7 is Coming and It’s Really Hot&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/"&gt;Extending Eclipse Che 7 to use VS Code extensions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/12/29/create-scalable-rest-api-falcon-rhscl/"&gt;Create a scalable REST API with Falcon and RHSCL&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#38;linkname=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F18%2Fcontainerized-python-flask-development-environment-red-hat-codeready-workspaces%2F&amp;#038;title=Creating%20a%20containerized%20Python%2FFlask%20development%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces" data-a2a-url="https://developers.redhat.com/blog/2019/02/18/containerized-python-flask-development-environment-red-hat-codeready-workspaces/" data-a2a-title="Creating a containerized Python/Flask development environment with Red Hat CodeReady Workspaces"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/02/18/containerized-python-flask-development-environment-red-hat-codeready-workspaces/"&gt;Creating a containerized Python/Flask development environment with Red Hat CodeReady Workspaces&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/H0TpUuMYMKo" height="1" width="1" alt=""/&gt;</content><summary>Red Hat CodeReady Workspaces provide developers with containerized development environments hosted on OpenShift/Kubernetes. DevOps teams can now use a hosted development environment that’s pre-built for their chosen stack and customized for their project. CodeReady Workspaces can help you rapidly onboard developers for your project as everything they need to develop is running in a containized wor...</summary><dc:creator>Shane Boulden</dc:creator><dc:date>2019-02-18T13:00:13Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/02/18/containerized-python-flask-development-environment-red-hat-codeready-workspaces/</feedburner:origLink></entry><entry><title>Modern Process Integration Tooling Workshop - Lab 5 Completing Process Details</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SvIjO60cI_k/modern-process-integration-tooling-workshop-lab5.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-modern_process_integration_tooling_workshop_lab_5_completing_process_details</id><updated>2019-02-18T06:00:10Z</updated><published>2019-02-18T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/index-redhat.html#/3" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;" target="_blank"&gt;&lt;img alt="process automation manager workshops" border="0" data-original-height="521" data-original-width="819" height="203" src="https://3.bp.blogspot.com/-H2LUVHDZXiI/XAfW1rJVeHI/AAAAAAAAtWU/z6mG0YikV6sCDhZDIamQo3Wd2ntzRl46wCLcBGAs/s320/Screenshot%2B2018-12-05%2Bat%2B14.45.32.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Click to start workshop&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;Since starting to update my &lt;a href="https://bpmworkshop.gitlab.io/#/" target="_blank"&gt;free online rules and process automation workshops&lt;/a&gt; that showcase how to get started using modern business logic tooling, you've come a long ways with process automation.&lt;br /&gt;&lt;br /&gt;The updates started with moving from JBoss BPM&amp;nbsp; to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager.&lt;br /&gt;&lt;br /&gt;This article highlights the newest lab update for Red Hat Process Automation Manager, where you learn to complete the process details needed to run the process.&lt;br /&gt;&lt;br /&gt;Let's take a look at the lab shall we?&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Lab 5 - Completing process details&lt;/h3&gt;This lab is the latest step on learning to develop a process integration project. It's a step by step guide on how to finish designing your first process by adding the details to each node.&lt;br /&gt;&lt;br /&gt;The easiest way is to just &lt;a href="https://bpmworkshop.gitlab.io/rhpam/lab05.html" target="_blank"&gt;jump right into lab 5&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhpam/lab05.html" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Comments or feedback on any part of the workshop that might not be clear, just reach out.&lt;br /&gt;&lt;br /&gt;Stay tuned for the next lab update, coming soon!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yjdJlNlX6mk:MB3EVBD-OOQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yjdJlNlX6mk:MB3EVBD-OOQ:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yjdJlNlX6mk:MB3EVBD-OOQ:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yjdJlNlX6mk:MB3EVBD-OOQ:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yjdJlNlX6mk:MB3EVBD-OOQ:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yjdJlNlX6mk:MB3EVBD-OOQ:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yjdJlNlX6mk:MB3EVBD-OOQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yjdJlNlX6mk:MB3EVBD-OOQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yjdJlNlX6mk:MB3EVBD-OOQ:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=yjdJlNlX6mk:MB3EVBD-OOQ:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=yjdJlNlX6mk:MB3EVBD-OOQ:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/yjdJlNlX6mk" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SvIjO60cI_k" height="1" width="1" alt=""/&gt;</content><summary>Click to start workshop Since starting to update my free online rules and process automation workshops that showcase how to get started using modern business logic tooling, you've come a long ways with process automation. The updates started with moving from JBoss BPM  to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager. This article highlights the newest lab...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-02-18T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/yjdJlNlX6mk/modern-process-integration-tooling-workshop-lab5.html</feedburner:origLink></entry><entry><title>Hibernate Validator 6.0.15.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7SRaEDkWbcg/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate Validator" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_validator_6_0_15_final_released</id><updated>2019-02-19T11:20:06Z</updated><published>2019-02-18T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just released Hibernate Validator 6.0.15.Final which includes only one bugfix.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.14.Final.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We fixed one important issue related to the usage of &lt;code&gt;@GroupSequence&lt;/code&gt;: &lt;a href="https://hibernate.atlassian.net/browse/HV-1692"&gt;HV-1692&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-6-0-15-final"&gt;&lt;a class="anchor" href="#getting-6-0-15-final"&gt;&lt;/a&gt;Getting 6.0.15.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get the release with Maven, Gradle etc. use the following GAV coordinates:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator:6.0.15.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator-cdi:6.0.15.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;em&gt;org.hibernate.validator:hibernate-validator-annotation-processor:6.0.15.Final&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that the group id has changed from &lt;code&gt;org.hibernate&lt;/code&gt; (Hibernate Validator 5 and earlier) to &lt;code&gt;org.hibernate.validator&lt;/code&gt; (from Hibernate Validator 6 onwards).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Alternatively, a distribution bundle containing all the bits is provided on SourceForge (&lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.15.Final/hibernate-validator-6.0.15.Final-dist.tar.gz/download"&gt;TAR.GZ&lt;/a&gt;, &lt;a href="http://sourceforge.net/projects/hibernate/files/hibernate-validator/6.0.15.Final/hibernate-validator-6.0.15.Final-dist.zip/download"&gt;ZIP&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to benefit from the new features of this version on WildFly, we also provide WildFly patches for &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.15.Final/hibernate-validator-modules-6.0.15.Final-wildfly-15.0.0.Final-patch.zip"&gt;WildFly 15&lt;/a&gt; and &lt;a href="http://search.maven.org/remotecontent?filepath=org/hibernate/validator/hibernate-validator-modules/6.0.15.Final/hibernate-validator-modules-6.0.15.Final-wildfly-14.0.1.Final-patch.zip"&gt;WildFly 14&lt;/a&gt;. You can read about how to apply such patches &lt;a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#_updating_hibernate_validator_in_wildfly"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-validator"&gt;hibernate-validator tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-validator"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HV"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/beanvalidation-dev/"&gt;Bean Validation development mailing list&lt;/a&gt; (discussions about the Bean Validation specification)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7SRaEDkWbcg" height="1" width="1" alt=""/&gt;</content><summary>We just released Hibernate Validator 6.0.15.Final which includes only one bugfix. This is a recommended upgrade for everyone using Hibernate Validator and it is a drop-in replacement for 6.0.14.Final. What’s new We fixed one important issue related to the usage of @GroupSequence: HV-1692. Getting 6.0.15.Final To get the release with Maven, Gradle etc. use the following GAV coordinates: org.hiberna...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2019-02-18T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/02/18/hibernate-validator-6015-final-out/</feedburner:origLink></entry><entry><title>November 2018 ISO C++ meeting trip report (Core Language)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/opNrdnaWKik/" /><category term="C standardization" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="iso" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><author><name>Jason Merrill</name></author><id>searchisko:content:id:jbossorg_blog-november_2018_iso_c_meeting_trip_report_core_language</id><updated>2019-02-15T13:00:38Z</updated><published>2019-02-15T13:00:38Z</published><content type="html">&lt;p&gt;The ISO C++ standards meeting in November 2018 was held in San Diego, CA. As usual, Red Hat sent three of us to the meeting: me (for the Core Language Working Group), Jonathan Wakely (for the Library Working Group [LEWG]), and Thomas Rodgers (for the Concurrency and Parallelism Study Group [SG1]). I felt the meeting was productive, though some features that had been expected to make it into C++20 are now in question.&lt;/p&gt; &lt;p&gt;Here are new C++ features accepted at the meeting:&lt;span id="more-557297"&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Expanded constexpr: Constant expressions can now include &lt;a href="http://wg21.link/p1002r1"&gt;try blocks&lt;/a&gt; (in a constexpr function), &lt;a href="http://wg21.link/p1327r1"&gt;dynamic_cast&lt;/a&gt;, and typeid, but only if they wouldn&amp;#8217;t throw an exception. Throwing an expression still makes the expression non-constant. Constant expressions can now also &lt;a href="http://wg21.link/p1330r0"&gt;change the active member&lt;/a&gt; of a union created during constant evaluation.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p0482r6"&gt;char8_t&lt;/a&gt;: A specific type for UTF-8 code units that also doesn&amp;#8217;t have the aliasing issues of the C char type.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p1073r3"&gt;immediate functions (&amp;#8220;consteval&amp;#8221;)&lt;/a&gt;: A stronger form of constexpr functions that are always immediately evaluated for a constant value. I&amp;#8217;m still not convinced this is a sufficiently useful distinction from normal constexpr functions, but others seem rather keen on it.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p0595r2"&gt;std::is_constant_evaluated()&lt;/a&gt;: Allows constexpr functions to use one implementation during constant evaluation and a more efficient but non-constexpr implementation during runtime evaluation.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p1094r2"&gt;Nested inline namespaces&lt;/a&gt;: Adds support for declaring inline namespaces to the C++ nested namespace definition feature.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p1141r2"&gt;&amp;#8220;Constrained auto&amp;#8221;&lt;/a&gt;: Most significantly reintroduces abbreviated function templates from the Concepts TS with somewhat different syntax; instead of declaring a function parameter of constrained generic type with just the name of a type concept, you do it with the concept followed by &amp;#8220;auto&amp;#8221;, for example: &lt;pre&gt;auto f(Copyable auto x) { return x; }&lt;/pre&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here are various other proposals we discussed at the meeting:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://wg21.link/p0881r3"&gt;P0881R3&lt;/a&gt;, a new proposal for a stack trace library: This seemed to Core like it was going too far toward reflection; the design needs more time to bake.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p1103r2"&gt;P1103R2&lt;/a&gt;, Merging Modules: The unified module design continues to progress and is expected to make it into the working paper at the next meeting.&lt;/li&gt; &lt;li&gt;Two papers about operator &amp;#60;=&amp;#62; (&amp;#8220;spaceship&amp;#8221;), P1185 and P1186: &lt;ul&gt; &lt;li&gt;&lt;a href="http://wg21.link/p1185"&gt;1185&lt;/a&gt; points out that an == operator that just calls the &amp;#60;=&amp;#62; operator can be significantly slower than one written to call == for the subobjects. The design is still somewhat in flux, but there seems to be a strong consensus that we want to change this and change non-type template arguments of class type to depend on == rather than &amp;#60;=&amp;#62;.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p1186"&gt;1186&lt;/a&gt; proposes allowing defaulted &amp;#60;=&amp;#62; to use existing &amp;#60; and == operators, since most existing classes don&amp;#8217;t themselves have &amp;#60;=&amp;#62;.  But this ran into trouble; for more details, see the &lt;a href="https://brevzin.github.io/c++/2018/11/12/improve-spaceship/"&gt;author&amp;#8217;s post&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;With these issues arising, people have become uncertain whether &amp;#60;=&amp;#62; is actually ready to be part of C++20, but it seems to me that there&amp;#8217;s enough time left to resolve things.&lt;/li&gt; &lt;li&gt;&lt;a href="http://wg21.link/p1328r0"&gt;P1328R0&lt;/a&gt;, making type_info::operator== constexpr: This seemed like an obvious fix to me.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;br /&gt; We even found the time to talk about submitted issues between the papers. Many were of limited interest to folks outside the committee, but &lt;a href="http://wg21.link/cwg2362"&gt;issue 2362&lt;/a&gt; argues that __func__ should be constexpr. Core is inclined to move in the opposite direction, by changing its type from array to pointer, in order to avoid making the size of the name usable in a constant-expression. On reflection now, I&amp;#8217;m not sure this is such a good idea; there are plenty of ways to get an ODR violation, and I&amp;#8217;m not sure this one would be bad enough to prevent uses that people want for it. We referred this issue to Evolution for input.&lt;/p&gt; &lt;p&gt;The next meeting will be in Kailua-Kona, Hawaii, in February.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#38;linkname=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F15%2Fnovember-2018-iso-c-meeting-trip-report-core-language%2F&amp;#038;title=November%202018%20ISO%20C%2B%2B%20meeting%20trip%20report%20%28Core%20Language%29" data-a2a-url="https://developers.redhat.com/blog/2019/02/15/november-2018-iso-c-meeting-trip-report-core-language/" data-a2a-title="November 2018 ISO C++ meeting trip report (Core Language)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/02/15/november-2018-iso-c-meeting-trip-report-core-language/"&gt;November 2018 ISO C++ meeting trip report (Core Language)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/opNrdnaWKik" height="1" width="1" alt=""/&gt;</content><summary>The ISO C++ standards meeting in November 2018 was held in San Diego, CA. As usual, Red Hat sent three of us to the meeting: me (for the Core Language Working Group), Jonathan Wakely (for the Library Working Group [LEWG]), and Thomas Rodgers (for the Concurrency and Parallelism Study Group [SG1]). I felt the meeting was productive, though some features that had been expected to make it into C++20 ...</summary><dc:creator>Jason Merrill</dc:creator><dc:date>2019-02-15T13:00:38Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/02/15/november-2018-iso-c-meeting-trip-report-core-language/</feedburner:origLink></entry><entry><title>Blog moved</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3Yo2BcaXmGI/blog-moved.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><author><name>Stian Thorgersen</name></author><id>searchisko:content:id:jbossorg_blog-blog_moved</id><updated>2019-02-15T10:57:17Z</updated><published>2019-02-15T10:57:00Z</published><content type="html">&lt;p&gt;We have moved the blog to our website. The new URL is &lt;a href="https://www.keycloak.org/blog.html"&gt;https://www.keycloak.org/blog.html&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This means we have a single tool to create online content and no longer need to deal with Blogger. It also means we have a proper review process in place (through GitHub).&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3Yo2BcaXmGI" height="1" width="1" alt=""/&gt;</content><summary>We have moved the blog to our website. The new URL is https://www.keycloak.org/blog.html. This means we have a single tool to create online content and no longer need to deal with Blogger. It also means we have a proper review process in place (through GitHub).</summary><dc:creator>Stian Thorgersen</dc:creator><dc:date>2019-02-15T10:57:00Z</dc:date><feedburner:origLink>http://blog.keycloak.org/2019/02/blog-moved.html</feedburner:origLink></entry><entry><title>Transitioning Red Hat SSO to a highly-available hybrid cloud deployment</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/NRnlStK3ux8/" /><category term="dogfooding" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Galera" scheme="searchisko:content:tags" /><category term="jdg" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="MariaDB" scheme="searchisko:content:tags" /><category term="Red Hat Data Grid" scheme="searchisko:content:tags" /><category term="Red Hat JBoss Data Grid" scheme="searchisko:content:tags" /><category term="Red Hat JBoss Enterprise Application Platform" scheme="searchisko:content:tags" /><category term="Red Hat on Red Hat" scheme="searchisko:content:tags" /><category term="red hat single sign-on" scheme="searchisko:content:tags" /><category term="Red Hat SSO" scheme="searchisko:content:tags" /><category term="security" scheme="searchisko:content:tags" /><author><name>Jared Blashka</name></author><id>searchisko:content:id:jbossorg_blog-transitioning_red_hat_sso_to_a_highly_available_hybrid_cloud_deployment</id><updated>2019-02-14T13:00:29Z</updated><published>2019-02-14T13:00:29Z</published><content type="html">&lt;p&gt;About two years ago, Red Hat IT finished &lt;a href="https://developers.redhat.com/blog/2016/10/04/how-red-hat-re-designed-its-single-sign-on-sso-architecture-and-why/"&gt;migrating our customer-facing authentication system&lt;/a&gt; to &lt;a href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat Single Sign-On&lt;/a&gt; (Red Hat SSO). As a result, we were quite pleased with the performance and flexibility of the new platform. Due to some architectural decisions that were made in order to optimize for uptime using the technologies at our disposal, we were unable to take full advantage of Red Hat SSO’s robust feature set until now. This article describes how we&amp;#8217;re now addressing database and session replication between global sites.&lt;/p&gt; &lt;p&gt;&lt;span id="more-561107"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Lessons from our first deployment&lt;/h2&gt; &lt;p&gt;Red Hat IT’s initial launch of multi-site SSO had each site completely independent of the other. While this facilitated the platform’s high uptime, it also resulted in a number of limitations hampering some new technologies.&lt;/p&gt; &lt;p&gt;The most problematic limitation was that active login sessions were stored only at a single site—the one where a user happened to authenticate. This meant that if that particular site had an outage, the user would have to reauthenticate upon redirection to another site. Reauthentication lead to a confusing and poor customer experience, especially during rolling site maintenance.&lt;/p&gt; &lt;p&gt;Furthermore, this architecture prevented the adoption of the OpenID Connect (OIDC) authorization code flow, regardless of it being fully supported in the Red Hat SSO product. The authorization code flow partially relies on server-to-server communication rather than on a user’s browser, as in the case of SAML or other OIDC flows. It was probable that the backend server request would not be routed to the same site that contained the active user session. This would result in the backend authorization code flow failing, leading to intermittent UI errors, at best.&lt;/p&gt; &lt;p&gt;Finally, other features of Red Hat SSO, such as offline OpenID Connect tokens and two-factor authentication (2FA) were simply unusable in this multi-site environment. By default, when a user associates an offline token or a new 2FA device with their account, Red Hat SSO persists this in the database. Without database replication between sites, this new association persists only in a single site, preventing the technology from correctly functioning in this environment.&lt;/p&gt; &lt;p&gt;Because of these and other issues, we knew that the next step forward would have to address database and session replication between sites.&lt;/p&gt; &lt;h3&gt;Working toward our future multi-site solution&lt;/h3&gt; &lt;p&gt;Working with the Red Hat SSO development team, the multi-site use cases and objectives were detailed. The team explored a number of potential solutions and ended up with the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html/server_installation_and_configuration_guide/operating-mode#crossdc-mode"&gt;Cross-Datacenter Replication Mode&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Deploying Cross-Datacenter Replication Mode requires two major modifications to the existing architecture of a Red Hat SSO deployment. The first is migrating our database to Galera Cluster and the second is deploying &lt;a href="https://developers.redhat.com/products/datagrid/overview/"&gt;Red Hat Data Grid&lt;/a&gt; (formerly known as Red Hat JBoss Data Grid).&lt;/p&gt; &lt;h4&gt;Migrating to Galera Cluster&lt;/h4&gt; &lt;p&gt;Red Hat SSO already supports a &lt;a href="https://access.redhat.com/articles/2342861"&gt;number of databases&lt;/a&gt;, but the cross-datacenter replication mode requires synchronous replication between sites, ensuring data integrity and consistency across the entire deployment. For example, new user registrations at site A need to be immediately available at sites B and C to prevent additional duplicate user registrations and conflicting database records.&lt;/p&gt; &lt;p&gt;As of Red Hat SSO 7.2, the two solutions that have been tested in conjunction with the cross-datacenter mode are Oracle Database 12c Release 1 (12.1) RAC and MariaDB server version 10.1.19 with Galera; Red Hat IT’s deployment is using MariaDB with Galera Cluster. Each of the three sites has a pair of MariaDB Galera servers, so even in the event of a single site outage, we can still maintain a quorum majority.&lt;/p&gt; &lt;p&gt;The SSO clusters were already leveraging MariaDB as the RDBMS, but multi-site active/active required switching the entire cluster to Galera for cross-datacenter mode. Initially, each of the three sites had a pair of multi-master database hosts. Upgrading SSO clusters to Galera without an outage involved rolling through sites. The standard MariaDB multi-master replication would be disabled on each site’s DB cluster, and then the remaining DB servers were added to the Galera cluster. Following this, the local Red Hat SSO nodes were updated to use the DB servers now part of the Galera cluster. Finally, the last DB server was reinitialized and added to the Galera cluster.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/galera-1.gif"&gt;&lt;img class=" aligncenter wp-image-561457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/galera-1.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/galera-1.gif" alt="Migrating to Galera Cluster" width="765" height="468" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This process was done so that we could perform the upgrade with zero downtime in any of our sites. This was made possible because the user data is handled by a distinct service and not mastered within Red Hat SSO. Had this not been true, the upgrade would have been more complicated. The Galera DB upgrade was done prior to implementing Red Hat Data Grid, so system performance could be closely monitored and backed out, if necessary.&lt;/p&gt; &lt;h4&gt;Deploying Red Hat Data Grid&lt;/h4&gt; &lt;p&gt;Red Hat SSO utilizes Infinispan for session storage, which comes bundled with &lt;a href="https://developers.redhat.com/products/eap/overview/"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt;. Red Hat Data Grid is the Red Hat supported version of Infinispan and has a standalone server distribution that is used in conjunction with JBoss EAP’s Infinispan to replicate cache data across all sites. Red hat Data Grid has explicit support for &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_data_grid/7.1/html/administration_and_configuration_guide/set_up_cross_datacenter_replication"&gt;Cross Datacenter Replication&lt;/a&gt; and offloading the replication concerns to a separate server helps minimize performance impact. Each Red Hat SSO instance is configured to use a local Red hat Data Grid cluster as a remote store for Infinispan. In turn, each Red Hat Data Grid cluster is aware of all the other Red Hat Data Grid clusters at the other sites. The Red Hat Data Grid clusters in each site form a grid, as the name implies, and replicate the SSO session cache among all sites. The Red Hat Data Grid data replication can be asynchronous, if you have an active/passive multi-site Red Hat SSO deployment, or synchronous for active/active deployments. Each of the Red Hat SSO sites has a three-node Red Hat Data Grid cluster, which ensures cross-site replication survives any single node failing.&lt;/p&gt; &lt;p&gt;Deploying Red Hat Data Grid required building net-new clusters of &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;Red Hat Enterprise Linux&lt;/a&gt; servers. Red Hat SSO does not support concurrently running Red Hat Data Grid and SSO on the same servers, nor would you want to do this. Creating and configuring these hosts was straightforward following the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.2/html/server_installation_and_configuration_guide/operating-mode#setup"&gt;basic setup steps&lt;/a&gt;, with a few minor modifications for our own purposes. One of the modifications was using a separate TCP stack—running on different ports for the local channel rather than using UDP, because some cloud providers don’t support multicast. Another modification was the use of asymmetric encryption and authentication, ensuring that user session data was encrypted and never exposed on the wire.&lt;/p&gt; &lt;p&gt;The configuration changes to the existing Red Hat SSO hosts followed the basic setup steps with little-to-no modifications. The cleanest way to deploy these changes in this environment was to bring down a single site entirely, stopping the Red Hat SSO service across all SSO servers within a site. Configurations were then updated and the Red Hat SSO service was brought back up one host at a time. This procedure ensured that all entries in the local cluster cache would be present in the Red Hat Data Grid cache. Otherwise, errors were occasionally encountered when starting hosts, because they could not reconcile local cache contents with the remote-store Red Hat Data Grid contents. Following this procedure, active sessions were lost on a rolling basis, but no customer-facing outage was incurred.&lt;/p&gt; &lt;h4&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/jdg-1.gif"&gt;&lt;img class=" aligncenter wp-image-561467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/jdg-1.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/jdg-1.gif" alt="Deploying Red Hat Data Grid" width="1005" height="647" /&gt;&lt;/a&gt;&lt;/h4&gt; &lt;h4&gt;&lt;/h4&gt; &lt;h4&gt;Measuring and monitoring performance&lt;/h4&gt; &lt;p&gt;There were some initial concerns about the performance and stability of cross-site synchronous replication—both on the database level, as well as on the application cache level. Sufficient monitoring had to be in place to create an alert if performance degrades.&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/jmxtrans/jmxtrans-agent"&gt;JMXtrans Agent&lt;/a&gt; is very useful for taking metrics typically exposed only via JMX Infinispan cache performance, garbage collection, and memory/thread utilization and aggregating them in a tool like &lt;a href="https://graphiteapp.org/"&gt;Graphite&lt;/a&gt;. In combination with &lt;a href="https://collectd.org/"&gt;collectd&lt;/a&gt; and the Graphite plugin, it was easy to snapshot all relevant host statistics. Moreover, combining this with&lt;a href="https://metrics.dropwizard.io/4.0.0/"&gt; Dropwizard Metrics&lt;/a&gt; for instrumentation of all Red Hat SSO customizations gives a comprehensive view into the complete stack.&lt;/p&gt; &lt;p&gt;Groovy scripts are also a great way to quickly leverage any attributes or operations exposed via a JMX MBean. For example, internally we utilize a number of Groovy scripts. These are tied into monitoring and reporting the status of the CacheContainerHealth component, monitoring the memory levels, and alerting if garbage collection isn’t able to reclaim sufficient space, as well as checking the cross-site replication status for all the configured caches. These result in quick action if servers are suddenly unavailable. Groovy scripts also make it simple to automate more-complex procedures, such as initiating &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_data_grid/7.1/html/administration_and_configuration_guide/set_up_cross_datacenter_replication#state_transfer_between_sites"&gt;state transfer&lt;/a&gt; between sites after recovery has completed.&lt;/p&gt; &lt;p&gt;In conclusion, Cross-Datacenter Replication Mode for Red Hat SSO allows Red Hat IT to scale its authentication systems globally while providing an extremely high level of resiliency and availability. By leveraging supported, open source technologies, Red Hat has built a true multi-site single sign-on authentication platform capable of handling next-generation applications.&lt;/p&gt; &lt;h2&gt;Additional resources&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/19/sso-made-easy-keycloak-rhsso/"&gt;Single Sign-On Made Easy with Keycloak/Red Hat SSO&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/videos/youtube/mdZauKsMDiI/"&gt;Securing apps and services with Keycloak/Red Hat SSO (DevNation Live Video)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/videos/youtube/ZxpY_zZ52kU/"&gt;A deep dive into Keycloak/Red Hat SSO (DevNation Live Video)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/07/red-hat-single-sign-on-give-it-a-try-for-no-cost/"&gt;Red Hat Single Sign-On: Give it a try for no cost!&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2016/10/04/how-red-hat-re-designed-its-single-sign-on-sso-architecture-and-why/"&gt;How Red Hat re-designed its Single Sign On (SSO) architecture, and why&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.3/html/server_administration_guide/"&gt;Red Hat Single Sign-On Server Administration Guide&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.3/html/securing_applications_and_services_guide/"&gt;Red Hat Single Sign-On Securing Applications and Services Guide&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/02/06/using-a-public-certificate-with-red-hat-single-sign-on-keycloak/"&gt;Using a public certificate with Red Hat Single Sign-On/Keycloak&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;b&gt;About the Author&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;a href="https://www.linkedin.com/in/jblashka/"&gt;Jared Blashka&lt;/a&gt; is a Senior Software Applications Engineer on the Red Hat IT Identity and Access Management team.  He is a &lt;a href="https://www.redhat.com/rhtapps/services/verify/?certId=140-181-223"&gt;Red Hat Certified Engineer&lt;/a&gt; and has 8 years of experience, focusing on identity management, application lifecycle management, and automation.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#38;linkname=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F02%2F14%2Fred-hat-sso-high-availability-hybrid-cloud%2F&amp;#038;title=Transitioning%20Red%20Hat%20SSO%20to%20a%20highly-available%20hybrid%20cloud%20deployment" data-a2a-url="https://developers.redhat.com/blog/2019/02/14/red-hat-sso-high-availability-hybrid-cloud/" data-a2a-title="Transitioning Red Hat SSO to a highly-available hybrid cloud deployment"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/02/14/red-hat-sso-high-availability-hybrid-cloud/"&gt;Transitioning Red Hat SSO to a highly-available hybrid cloud deployment&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/NRnlStK3ux8" height="1" width="1" alt=""/&gt;</content><summary>About two years ago, Red Hat IT finished migrating our customer-facing authentication system to Red Hat Single Sign-On (Red Hat SSO). As a result, we were quite pleased with the performance and flexibility of the new platform. Due to some architectural decisions that were made in order to optimize for uptime using the technologies at our disposal, we were unable to take full advantage of Red Hat S...</summary><dc:creator>Jared Blashka</dc:creator><dc:date>2019-02-14T13:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/02/14/red-hat-sso-high-availability-hybrid-cloud/</feedburner:origLink></entry></feed>
