<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Red Hat Summit 2019: Integration and API Labs Roadmap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hpoXTJu5bto/red-hat-summit-2019-labs-integration-api-labs-roadmap.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2019_integration_and_api_labs_roadmap</id><updated>2019-04-01T05:00:07Z</updated><published>2019-04-01T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://reg.summit.redhat.com/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img border="0" data-original-height="389" data-original-width="769" height="161" src="https://1.bp.blogspot.com/-yX0WaXZmaTI/XJj8CSvWUlI/AAAAAAAAth4/4Z1aZQ7VOp061sKNZ-_kMauutZPP46AMgCLcBGAs/s320/Screenshot%2B2019-03-25%2Bat%2B17.04.08.png" width="320" /&gt;&lt;/a&gt;&lt;br /&gt;&lt;a href="https://www.redhat.com/en/summit/2019" target="_blank"&gt;Red Hat Summit 2019&lt;/a&gt; is rocking Boston, MA from May 7-9th in the &lt;a href="https://www.signatureboston.com/BCEC" target="_blank"&gt;Boston Convention and Exhibition Center&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Everything you need to know about the current state of open source enterprise ready software can be found at this event. From customers talking about their experiences leveraging open source in their solutions, to the creators of open source technologies you're using, and all the way down to hands-on lab experiences on these technologies.&lt;br /&gt;&lt;br /&gt;This hands-on appeal is what this series of articles is about. It's&amp;nbsp;interesting to take a tour, so starting with this article let's examine a series of instructor-led labs based on a specific theme.&lt;br /&gt;&lt;br /&gt;This week it's a roadmap to&amp;nbsp;&lt;i&gt;integration and API &lt;/i&gt;lab content.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;The following labs can be found in the &lt;a href="https://summit.redhat.com/conference/sessions" target="_blank"&gt;session catalog online&lt;/a&gt;, by searching on title or filtering on &lt;i&gt;instructor-led labs &lt;/i&gt;and &lt;i&gt;integration &amp;amp; APIs.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt; &lt;br /&gt;&lt;h3&gt;Agile integration with APIs and containers workshop&lt;/h3&gt;&lt;i&gt;The agile integration with APIs and containers session is a hands-on workshop for developing, testing, and deploying integrated cloud-native solutions.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;This 2-hour lab will start with an overview of agile integration and a discussion of the necessary architecture. We’ll also present examples of how customers are using Red Hat’s agile integration methodology to stay competitive. This hands-on workshop is designed for integrators who will be leading the activities of API development and security. These activities are UI-driven and allow the integrator to successfully deploy, integrate, (Red Hat Fuse), secure, and manage API services. We'll also cover accelerating the development of cloud-native applications, developing API-centric services, providing API security, and establishing operational management.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;Speakers:&amp;nbsp;Simon Green, Yossi Koren, Christina WeiMei Lin, Vinay Bhalerao&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Agile integration for the enterprise&lt;/h3&gt;&lt;i&gt;Organizations invest in a deep portfolio of technologies to meet diverse business requirements.The interconnectivity of these systems is fundamental to the success of the business. To keep pace with the competition, solutions must achieve scalability to meet market demand, as well as to meet business stakeholder requirements. Agile integration is the key to the success of organizations seeking to scale and support demanding stakeholder expectations.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;In this lab, you'll learn to use Red Hat’s integration portfolio for various use cases, including:&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;Integrating applications without coding.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Implementing advanced integration scenarios that use multiple backend services.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Becoming fluent with a variety of deployment methodologies.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Building fault-tolerant microservices applications.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Facilitating integration to legacy systems, by exposing these systems as microservices.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Designing, exposing, and managing REST APIs.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Applying service-level agreements to microservices monitoring.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Using cloud-native infrastructure to host a highly available integration solution.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;i&gt;You'll get hands-on experience with Red Hat Fuse Online, Red Hat Fuse for OpenShift Container Platform, Red Hat Fuse for Red Hat JBoss Enterprise Application Platform (EAP), ISTIO, Red Hat 3scale API Management, and Red Hat OpenShift Application Runtimes.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;Speakers:&amp;nbsp;Andrew Block, Chad Darby, Hong Hua Chin&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Bridging microservice boundaries with Apache Kafka and Debezium&lt;/h3&gt;&lt;i&gt;Domain-driven design suggests to split large systems into bounded contexts. Implemented by independent teams as loosely coupled microservices, this pattern lets organizations adapt to new business requirements quickly. While they shouldn’t share resources such as a common database, services don’t exist in isolation either: often one service needs data from another for providing its functionality.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;In this lab. we'll cover:&lt;/i&gt;&lt;br /&gt;&lt;i&gt;•&amp;nbsp; How microservices can share data using Apache Kafka while maintaining proper isolation and independence.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;•&amp;nbsp; How to use change data capture (CDC) to stream data changes directly out of a database, without any application changes needed.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;•&amp;nbsp; How to propagate the data owned by a microservice data to sync systems such as caches and full-text search indexes.&amp;nbsp;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;&lt;/i&gt;&lt;br /&gt;&lt;i&gt;Based on Red Hat OpenShift, Red Hat AMQ streams, Kafka, and Debezium, an open-source CDC solution, this hands-on lab will guide you through the steps to successfully implement asynchronous data exchange patterns between your microservices.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;Speakers:&amp;nbsp;Emmanuel Bernard, Gunnar Morling, Marius Bogoevici, Paolo Patierno&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Learning to use the Camel Rest DSL with 3scale and OpenShift&lt;/h3&gt;&lt;i&gt;This lab will give an introduction to the open source integration framework Apache Camel, the upstream project for Red Hat Fuse, as well as Red Hat 3scale API Automation and Red Hat OpenShift Container Platform. You'll learn Camel basics and be walked through developing and deploying a route with Spring Boot. We'll also cover how to use Camel with OpenShift Container Platform and 3Scale API Automation to have web scale applications and with fully managed APIs. Due to the common need for REST APIs in enterprise applications, we'll cover how to start writing a REST Camel route using examples of the Camel REST DSL. Come learn how to deploy camel routes onto OpenShift Container Platform and set up API management using 3scale API Management to manage your API usage, URLs, and more.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;Speakers:&amp;nbsp;Claus Ibsen, Mary Cochran, Dusty Humphries&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Navigating hybrid cloud integration—a hackathon&lt;/h3&gt;&lt;i&gt;Be innovative and create your own hybrid integration solution with Red Hat integration technology to solve day-to-day integration challenges. You'll be handed a set of integration problems to choose from and have access to Red Hat Fuse, Red Hat's integration platform. You can work as an individual or in groups to build you integration solution on top of it. Common challenges include connecting to brown field system, SaaS applications, handling streaming of events, and providing APIs.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;Speaker:&amp;nbsp;Gary Gaughan, Nicola Ferraro, Christina WeiMei Lin, Evan Shortiss, Hugo Guerrero Olivares&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;h3&gt;Running Apache Kafka on OpenShift with AMQ streams&lt;/h3&gt;&lt;i&gt;In this lab, you’ll learn the practical aspects of deploying, operating, and interacting with an Apache Kafka cluster on Red Hat OpenShift Container Platform thanks to Red Hat AMQ streams. We'll cover how to:&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;&lt;i&gt;Manage Apache Kafka clusters, topics, and users on OpenShift Container Platform using the AMQ streams operators and Kubernetes custom resources (CRDs).&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Self-service your Kafka clusters, topics, and users by monitoring specific projects.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Create persistent Kafka clusters using persistent volume.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Interact with your Kafka cluster from both within and outside the OpenShift Container Platform instance, using a set of sample applications.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Manage and monitor your Kafka clusters, using Grafana and Prometheus.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Implement a cross-datacenter solution using MirrorMaker deployed by the AMQ streams cluster operator.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;Handle cluster and clients TLS certificates for encryption and authentication.&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;i&gt;Speaker:&amp;nbsp;Marius Bogoevici, Paolo Patierno, Emmanuel Bernard, Gunnar Morling&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Stay tuned for more articles with insights into other themes that might interest you enough to register for one of these instructor-led labs at Red Hat Summit 2019.&lt;br /&gt;&lt;br /&gt;Looking forward to seeing you there!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hZn5i_8bVX8:16X1RbSS-DU:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hZn5i_8bVX8:16X1RbSS-DU:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hZn5i_8bVX8:16X1RbSS-DU:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hZn5i_8bVX8:16X1RbSS-DU:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hZn5i_8bVX8:16X1RbSS-DU:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hZn5i_8bVX8:16X1RbSS-DU:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hZn5i_8bVX8:16X1RbSS-DU:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hZn5i_8bVX8:16X1RbSS-DU:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hZn5i_8bVX8:16X1RbSS-DU:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=hZn5i_8bVX8:16X1RbSS-DU:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=hZn5i_8bVX8:16X1RbSS-DU:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/hZn5i_8bVX8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hpoXTJu5bto" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Summit 2019 is rocking Boston, MA from May 7-9th in the Boston Convention and Exhibition Center. Everything you need to know about the current state of open source enterprise ready software can be found at this event. From customers talking about their experiences leveraging open source in their solutions, to the creators of open source technologies you're using, and all the way down to ha...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-04-01T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/hZn5i_8bVX8/red-hat-summit-2019-labs-integration-api-labs-roadmap.html</feedburner:origLink></entry><entry><title>Red Hat Summit 2019 Labs: Cloud-native app dev roadmap</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HP0aBf9tZaY/" /><category term="Architecture" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="cloud-native apps" scheme="searchisko:content:tags" /><category term="developers" scheme="searchisko:content:tags" /><category term="events" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="red hat summit" scheme="searchisko:content:tags" /><category term="summit labs" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2019_labs_cloud_native_app_dev_roadmap</id><updated>2019-03-31T12:20:44Z</updated><published>2019-03-31T12:20:44Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;"&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/summit/2019" target="_blank" rel="noopener noreferrer"&gt;Red Hat Summit 2019&lt;/a&gt; is rocking Boston, MA, May 7-9 in the &lt;a href="https://www.signatureboston.com/BCEC" target="_blank" rel="noopener noreferrer"&gt;Boston Convention and Exhibition Center&lt;/a&gt;. This event offers everything you need to know about the current state of open source, enterprise-ready software. You&amp;#8217;ll find customers talking about leveraging open source in their solutions, and you&amp;#8217;ll meet the creators of open source technologies and get to experience their hands-on labs.&lt;/p&gt; &lt;p&gt;The following labs can be found in the &lt;a href="https://summit.redhat.com/conference/sessions" target="_blank" rel="noopener noreferrer"&gt;session catalog online&lt;/a&gt;, by searching on the session title or filtering on &amp;#8220;instructor-led lab&amp;#8221; and &amp;#8220;cloud-native app dev&amp;#8221; content. You can also learn more about the Cloud-Native App Dev track sessions &lt;a href="https://developers.redhat.com/blog/2019/03/25/dive-into-developer-focused-sessions-at-red-hat-summit/"&gt;in this article&lt;/a&gt;.&lt;br /&gt; &lt;span id="more-578667"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Red Hat OpenShift service mesh in action&lt;/h3&gt; &lt;p&gt;You&amp;#8217;ve seen the high-level overview of service mesh and attended the deep dives, now it&amp;#8217;s time to get your hands dirty and learn by doing. This lab will introduce the capabilities of Red Hat OpenShift service mesh through the incremental development of a microsystems application relying on traffic shaping, security, policy enforcement, and observability features.&lt;/p&gt; &lt;p&gt;In this lab, you&amp;#8217;ll learn how to:&lt;/p&gt; &lt;ul&gt; &lt;li style="list-style-type: none;"&gt; &lt;ul&gt; &lt;li&gt;Control access using role-based access control, ensuring only those who are permitted can interact with your service.&lt;/li&gt; &lt;li&gt;Manage traffic to your services, redirecting traffic transparently to support canary deployment, A/B testing, etc.&lt;/li&gt; &lt;li&gt;Enforce policies on service interactions, such as the ability to limit the number of requests to a service.&lt;/li&gt; &lt;li&gt;Visualize the behavior of the service mesh to obtain a deeper understanding of the application interactions and identify issues before they significantly impact your users.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Knowledge of &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt;, Kiali, &lt;a href="https://developers.redhat.com/blog/2018/05/08/getting-started-with-istio-and-jaeger-on-your-laptop/"&gt;Jaeger&lt;/a&gt;, and Grafana will be advantageous for this session.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Speakers: Erik Jacobs, Kevin Conner, Brian Avery, Jonh Wendell, William DeCoste&lt;/em&gt;&lt;/p&gt; &lt;h3&gt;Transitioning existing applications to containers—it&amp;#8217;s easier than you think&lt;/h3&gt; &lt;p&gt;In this lab, we&amp;#8217;ll walk through seamlessly containerizing a traditional Tomcat application and deploying it on Red Hat OpenShift Container Platform. You&amp;#8217;ll take an existing Tomcat application, containerize it, and deploy it onto Red Hat OpenShift &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;Container&lt;/a&gt; Platform. At the end of the lab, you&amp;#8217;ll integrate the application into a continuous integration and continuous delivery (CI/CD) pipeline.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Speakers: Christopher Ricci, Eric Getchell, Amritpal Jhajj, Eric Deandrea&lt;/em&gt;&lt;/p&gt; &lt;h3&gt;Next-gen process management: A microservices approach to business automation&lt;/h3&gt; &lt;p&gt;Business processes are at the heart of every organization, implementing the organization’s value chain. Within the new modern application development landscape, which is built on top of &lt;a href="https://developers.redhat.com/topics/microservices/"&gt;microservices&lt;/a&gt; and containers, management of these business processes is becoming increasingly important. At the same time, we need to move away from traditional business process management (BPM) to benefit from the agility, reliability, and scalability that modern containerized application architectures have to offer.&lt;/p&gt; &lt;p&gt;In this lab, we&amp;#8217;ll introduce a new approach to process management based on a containerized, lightweight, distributed architecture. We&amp;#8217;ll use Red Hat Process Automation Manager to orchestrate, choreograph, manage, and monitor microservices implemented with Red Hat OpenShift Application Runtimes.&lt;/p&gt; &lt;p&gt;In this lab, you&amp;#8217;ll learn how to:&lt;/p&gt; &lt;ul&gt; &lt;li style="list-style-type: none;"&gt; &lt;ul&gt; &lt;li&gt;Embed Red Hat Process Automation Manager in a Spring Boot application.&lt;/li&gt; &lt;li&gt;Use Red Hat Process Automation Manager to orchestrate microservices.&lt;/li&gt; &lt;li&gt;Implement asynchronous, message-driven communication between microservices implemented with &lt;a href="https://developers.redhat.com/products/rhoar/hello-world#fndtn-macos"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Add observability with distributed tracing.&lt;/li&gt; &lt;li&gt;Add monitoring with Prometheus &amp;#38; Grafana.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;i&gt;Speakers: Bernard Tison, Maciej Swiderski, Duncan Doyle&lt;/i&gt;&lt;/p&gt; &lt;h3&gt;Developing applications on Red Hat OpenShift as mere mortals&lt;/h3&gt; &lt;p&gt;Many developers face challenges and frustration when learning to develop applications on a platform that&amp;#8217;s new to them. We&amp;#8217;ve heard from developers that they want to be able to focus on what matters to them—writing code—rather than on learning the ins and outs of platforms like &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; and Red Hat OpenShift. If this sounds like you, then join us for this workshop, where you&amp;#8217;ll learn to use OpenShift Do (odo), a new CLI tool for developers who are writing, building, and deploying applications on OpenShift. Get hands-on experience with the way odo abstracts away Kubernetes and OpenShift concepts while supporting fast, iterative development.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Speakers: Jan Kleinert, Jorge Morales, Graham Dumpleton&lt;/em&gt;&lt;/p&gt; &lt;h3&gt;Build your own Kubernetes Operator&lt;/h3&gt; &lt;p&gt;Codify your operational tactics and container-management best-practices using the Kubernetes Operator pattern. Operators feel like native features to Kubernetes end-users, because they extend the basic platform APIs by taking advantage of the included third-party resource and custom controller abstractions. This session provides architectural overviews, implementation patterns, and a look at a few popular solutions on this topic. Learn how to establish higher-order interfaces that represent the logical domain expertise (and perhaps the ideal product output) of a Kubernetes SRE. Bring a laptop to follow along as we build and distribute container-management tactics and strategies using the Operator Framework and Operator Lifecycle Manager.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Speakers: Jorge Morales, Marek Jelen, Jan Kleinert, Josh Wood, Ryan Jarvinen&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Register now for one of these instructor-led labs at &lt;a href="https://www.redhat.com/en/summit/2019"&gt;Red Hat Summit 2019&lt;/a&gt;. We look forward to seeing you there!&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#38;linkname=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F31%2Fred-hat-summit-2019-labs-cloud-native-app-dev-roadmap%2F&amp;#038;title=Red%20Hat%20Summit%202019%20Labs%3A%20Cloud-native%20app%20dev%20roadmap" data-a2a-url="https://developers.redhat.com/blog/2019/03/31/red-hat-summit-2019-labs-cloud-native-app-dev-roadmap/" data-a2a-title="Red Hat Summit 2019 Labs: Cloud-native app dev roadmap"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/31/red-hat-summit-2019-labs-cloud-native-app-dev-roadmap/"&gt;Red Hat Summit 2019 Labs: Cloud-native app dev roadmap&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HP0aBf9tZaY" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Summit 2019 is rocking Boston, MA, May 7-9 in the Boston Convention and Exhibition Center. This event offers everything you need to know about the current state of open source, enterprise-ready software. You’ll find customers talking about leveraging open source in their solutions, and you’ll meet the creators of open source technologies and get to experience their hands-on labs. The follo...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-03-31T12:20:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/31/red-hat-summit-2019-labs-cloud-native-app-dev-roadmap/</feedburner:origLink></entry><entry><title>What Red Hat OpenShift Connector for JetBrains products offers developers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/2u2jzYLJjs0/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="developer" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><author><name>Jeff Maury</name></author><id>searchisko:content:id:jbossorg_blog-what_red_hat_openshift_connector_for_jetbrains_products_offers_developers</id><updated>2019-03-29T07:05:25Z</updated><published>2019-03-29T07:05:25Z</published><content type="html">&lt;p&gt;We are extremely pleased to announce that the preview release of the &lt;a href="https://plugins.jetbrains.com/plugin/12030-openshift-connector-by-red-hat"&gt;Red Hat OpenShift Connector&lt;/a&gt; for JetBrains products (IntelliJ IDEA, WebStorm, etc.) is now available in Preview Mode and supports Java and Node.js components. You can download the OpenShift Connector plugin from the &lt;a href="https://plugins.jetbrains.com"&gt;JetBrains marketplace&lt;/a&gt; or install it directly from the plugins gallery in JetBrains products.&lt;/p&gt; &lt;p&gt;In this article, we&amp;#8217;ll look at features and benefits of the plugin and installation details, and show a demo of how using the plugin improves the end-to-end experience of developing and deploying Spring Boot applications to your OpenShift cluster.&lt;br /&gt; &lt;span id="more-573947"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://www.openshift.com"&gt;Red Hat OpenShift&lt;/a&gt; is a container application platform that brings the power of Kubernetes and containers to the enterprise. Regardless of the applications architecture, OpenShift lets you easily and quickly build, develop, and deploy in nearly any infrastructure, public or private.&lt;/p&gt; &lt;p&gt;Therefore, whether it’s on-premise, in a public cloud, or hosted, you have an award-winning platform to get your next big idea to market ahead of your competition.&lt;/p&gt; &lt;p&gt;Using OpenShift Connector, you can interact with any Red Hat OpenShift, including a local instance of OpenShift clusters such as &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;minishift/Red Hat Container Development Kit&lt;/a&gt;. Leveraging the OpenShift Application Explorer view, you can improve the end-to-end experience of developing applications.&lt;/p&gt; &lt;p&gt;The plugin enables you to perform all this directly using JetBrains products (IntelliJ IDEA, WebStorm, etc.) on Windows, &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt;, and macOS platforms and removes the complexity of memorizing some fairly complicated CLI commands.&lt;/p&gt; &lt;p&gt;Once the OpenShift Connector is installed, a new panel, the OpenShift view, is enabled in the Explorer panel. Then, you can access the view and connect to a running OpenShift cluster to perform the required operations.&lt;/p&gt; &lt;h2 id="demo"&gt;Demo&lt;/h2&gt; &lt;p&gt;You can see a live demo of the OpenShift Connector plugin &lt;a href="https://www.youtube.com/watch?v=kCESA7a5i3M?rel=0&amp;#38;enablejsapi=1"&gt;on YouTube.&lt;/a&gt; Below are the steps to run the demonstration yourself.&lt;/p&gt; &lt;p&gt;First, you will need to install any JetBrains products (IntelliJ IDEA, WebStorm, etc.) 2018.1 or later.&lt;/p&gt; &lt;p&gt;To install the plugin, bring up the plugins configuration dialog: &lt;em&gt;File → Settings → Plugins&lt;/em&gt;:&lt;/p&gt; &lt;p id="DMlJVMb"&gt;&lt;img class=" alignnone size-full wp-image-573987 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89053f3e0fd-1024x723.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89053f3e0fd.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89053f3e0fd.png 1248w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89053f3e0fd-300x212.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89053f3e0fd-768x542.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89053f3e0fd-1024x723.png 1024w" sizes="(max-width: 1248px) 100vw, 1248px" /&gt;&lt;/p&gt; &lt;p&gt;In the search bar, enter &lt;code&gt;OpenShift&lt;/code&gt; and click on the &lt;em&gt;OpenShift Connector by Red Hat&lt;/em&gt; item:&lt;/p&gt; &lt;p id="pSSNpjj"&gt;&lt;img class=" alignnone size-full wp-image-573997 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89058fdfaae-1024x723.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89058fdfaae.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89058fdfaae.png 1248w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89058fdfaae-300x212.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89058fdfaae-768x542.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89058fdfaae-1024x723.png 1024w" sizes="(max-width: 1248px) 100vw, 1248px" /&gt;&lt;/p&gt; &lt;p&gt;Click the &lt;em&gt;Install&lt;/em&gt; button:&lt;/p&gt; &lt;p&gt;&lt;img src="http://tools.jboss.org/blog/images/ij-openshift-connector2.png" alt="ij openshift connector2" /&gt;&lt;/p&gt; &lt;p&gt;Once the plugin has been downloaded, click the &lt;em&gt;Restart IDE&lt;/em&gt; button.&lt;/p&gt; &lt;p&gt;Once the IDE has been restarted, mouse over the Views icon in the bottom left area:&lt;/p&gt; &lt;p id="AAxfgQS"&gt;&lt;img class=" alignnone size-full wp-image-574017 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89064152409-1024x552.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89064152409.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89064152409.png 1911w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89064152409-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89064152409-768x414.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89064152409-1024x552.png 1024w" sizes="(max-width: 1911px) 100vw, 1911px" /&gt;&lt;/p&gt; &lt;p&gt;Select the &lt;em&gt;OpenShift&lt;/em&gt; item:&lt;/p&gt; &lt;p id="rShXXwk"&gt;&lt;img class=" alignnone size-full wp-image-574027 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890672c476b-1024x552.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890672c476b.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890672c476b.png 1911w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890672c476b-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890672c476b-768x414.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890672c476b-1024x552.png 1024w" sizes="(max-width: 1911px) 100vw, 1911px" /&gt;&lt;/p&gt; &lt;h2 id="the-plugin-in-action"&gt;The plugin in action&lt;/h2&gt; &lt;h3 id="connecting-to-your-openshift-instance"&gt;Connecting to your OpenShift instance&lt;/h3&gt; &lt;div class="olist arabic"&gt; &lt;ol class="arabic"&gt; &lt;li&gt;If you’re working locally, start the local OpenShift instance using &lt;a href="https://developers.redhat.com/products/cdk/overview/"&gt;minishift/Red Hat Container Development Kit&lt;/a&gt;&lt;/li&gt; &lt;li&gt;You then need to log in to the running OpenShift cluster: right-click on the cluster URL tree node and select &lt;em&gt;Log in to cluster&lt;/em&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p id="wAOhgLQ"&gt;&lt;img class=" alignnone size-full wp-image-574037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8906fda8359-1024x545.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8906fda8359.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8906fda8359.png 1902w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8906fda8359-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8906fda8359-768x409.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8906fda8359-1024x545.png 1024w" sizes="(max-width: 1902px) 100vw, 1902px" /&gt;&lt;/p&gt; &lt;p&gt;Enter &lt;code&gt;developer&lt;/code&gt; in the &lt;code&gt;Username&lt;/code&gt; field and any value in the &lt;code&gt;Password&lt;/code&gt; field and press the &lt;em&gt;OK&lt;/em&gt; button:&lt;/p&gt; &lt;p id="kyozcZk"&gt;&lt;img class=" alignnone size-full wp-image-574057 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89072126142-1024x552.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89072126142.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89072126142.png 1911w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89072126142-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89072126142-768x414.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89072126142-1024x552.png 1024w" sizes="(max-width: 1911px) 100vw, 1911px" /&gt;&lt;/p&gt; &lt;h3 id="import-the-project-to-be-deployed"&gt;Import the project to be deployed&lt;/h3&gt; &lt;p&gt;Before we work with our local cluster, first import our application source code. We will use a simple Spring Boot application whose source code is located at &lt;code&gt;&lt;a class="bare" href="https://github.com/openshift-evangelists/Wild-West-Backend"&gt;https://github.com/openshift-evangelists/Wild-West-Backend&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To import the application, use the &lt;code&gt;File → New → Project from Version Control → Git&lt;/code&gt;:&lt;/p&gt; &lt;p id="QoFdVQp"&gt;&lt;img class=" alignnone size-full wp-image-574067 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890753dbe9b-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890753dbe9b.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890753dbe9b.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890753dbe9b-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890753dbe9b-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890753dbe9b-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Enter &lt;code&gt;&lt;a class="bare" href="https://github.com/openshift-evangelists/Wild-West-Backend"&gt;https://github.com/openshift-evangelists/Wild-West-Backend&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;URL&lt;/code&gt; field and press the &lt;em&gt;Clone&lt;/em&gt; button.&lt;/p&gt; &lt;h3 id="create-a-project-for-the-application"&gt;Create a project for the application&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The application will be hosted in an OpenShift project (similar to Kubernetes namespaces). For more information about OpenShift projects, see the &lt;a href="https://docs.openshift.com/container-platform/3.11/admin_guide/managing_projects.html"&gt;official documentation&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In the &lt;code&gt;OpenShift&lt;/code&gt; view, right-click on the cluster node (the one with the URL) and select &lt;em&gt;New Project&lt;/em&gt;:&lt;/p&gt; &lt;p id="qwvwTCH"&gt;&lt;img class=" alignnone size-full wp-image-574077 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89078d41589-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89078d41589.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89078d41589.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89078d41589-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89078d41589-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89078d41589-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Enter &lt;code&gt;spring-boot&lt;/code&gt; in the &lt;code&gt;Project name&lt;/code&gt; and press the &lt;em&gt;OK&lt;/em&gt; button:&lt;/p&gt; &lt;p id="JlQNJdA"&gt;&lt;img class=" alignnone size-full wp-image-574087 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907b1ac37f-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907b1ac37f.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907b1ac37f.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907b1ac37f-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907b1ac37f-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907b1ac37f-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;h3 id="create-the-application"&gt;Create the application&lt;/h3&gt; &lt;p&gt;In the &lt;code&gt;spring-boot&lt;/code&gt; node, right-click and select &lt;em&gt;New Application&lt;/em&gt;:&lt;/p&gt; &lt;p id="xWrmBKe"&gt;&lt;img class=" alignnone size-full wp-image-574097 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907d667978-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907d667978.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907d667978.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907d667978-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907d667978-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907d667978-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Enter &lt;code&gt;springbootapp&lt;/code&gt; in the &lt;code&gt;Application name&lt;/code&gt; field and press the &lt;em&gt;OK&lt;/em&gt; button:&lt;/p&gt; &lt;p id="dlZWhyq"&gt;&lt;img class=" alignnone size-full wp-image-574107 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907f18fec3-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907f18fec3.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907f18fec3.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907f18fec3-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907f18fec3-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8907f18fec3-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;h3 id="deploy-the-component"&gt;Deploy the component&lt;/h3&gt; &lt;p&gt;In the &lt;code&gt;springbootapp&lt;/code&gt; node, right-click and select &lt;em&gt;New Component&lt;/em&gt;:&lt;/p&gt; &lt;p id="aAODhxV"&gt;&lt;img class=" alignnone size-full wp-image-574117 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89082503cc0-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89082503cc0.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89082503cc0.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89082503cc0-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89082503cc0-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89082503cc0-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Enter &lt;code&gt;backend&lt;/code&gt; in the &lt;code&gt;Name&lt;/code&gt; field:&lt;/p&gt; &lt;p id="BqAvpht"&gt;&lt;img class=" alignnone size-full wp-image-574127 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89084254b62-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89084254b62.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89084254b62.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89084254b62-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89084254b62-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89084254b62-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Press the &lt;em&gt;Browse&lt;/em&gt; button:&lt;/p&gt; &lt;p id="ePxrOAQ"&gt;&lt;img class=" alignnone size-full wp-image-574137 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890863ae819-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890863ae819.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890863ae819.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890863ae819-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890863ae819-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890863ae819-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Select the &lt;em&gt;Wild-West-Backend&lt;/em&gt; project and press the &lt;em&gt;OK&lt;/em&gt; button:&lt;/p&gt; &lt;p id="cSLKktI"&gt;&lt;img class=" alignnone size-full wp-image-574147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89088a08736-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89088a08736.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89088a08736.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89088a08736-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89088a08736-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89088a08736-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;In the &lt;code&gt;Component type&lt;/code&gt; field, select the &lt;em&gt;java&lt;/em&gt; item:&lt;/p&gt; &lt;p id="DWMRihD"&gt;&lt;img class=" alignnone size-full wp-image-574167 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908c62aa60-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908c62aa60.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908c62aa60.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908c62aa60-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908c62aa60-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908c62aa60-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Press the &lt;em&gt;OK&lt;/em&gt; button. A new terminal window will be displayed and the component will be deployed to your local cluster.&lt;/p&gt; &lt;p id="FJpoBWC"&gt;&lt;img class=" alignnone size-full wp-image-574177 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908edd60a6-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908edd60a6.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908edd60a6.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908edd60a6-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908edd60a6-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8908edd60a6-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="icon"&gt;&lt;/td&gt; &lt;td class="content"&gt;On IntelliJ IDEA 2018.3 or 2018.3 based JetBrains products, the terminal window will automatically be closed when the underlying command process is terminated. We are working on a workaround but we recommend using previous versions until the plugin will be updated. See the &lt;a href="https://github.com/redhat-developer/intellij-openshift-connector/issues/33"&gt;issue&lt;/a&gt; for more information.&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Once deployed, the component will appear in the &lt;code&gt;OpenShift&lt;/code&gt; view:&lt;/p&gt; &lt;p id="oEOyOBa"&gt;&lt;img class=" alignnone size-full wp-image-574187 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89091db19fa-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89091db19fa.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89091db19fa.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89091db19fa-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89091db19fa-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89091db19fa-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;h3 id="testing-the-component"&gt;Testing the component&lt;/h3&gt; &lt;p&gt;Let’s try to test the deployed application in a browser. In the &lt;code&gt;OpenShift&lt;/code&gt; view, right-click the &lt;em&gt;backend&lt;/em&gt; node and select &lt;em&gt;Open in Browser&lt;/em&gt;:&lt;/p&gt; &lt;p id="KQFjFUw"&gt;&lt;img class=" alignnone size-full wp-image-574197 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909417de9a-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909417de9a.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909417de9a.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909417de9a-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909417de9a-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909417de9a-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;As no URL has been set up for our component (to allow external access to our application), press the &lt;em&gt;OK&lt;/em&gt; button:&lt;/p&gt; &lt;p id="RrQUWrO"&gt;&lt;img class=" alignnone size-full wp-image-574207 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89095dbc6a6-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89095dbc6a6.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89095dbc6a6.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89095dbc6a6-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89095dbc6a6-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c89095dbc6a6-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;As our application is exposing several ports, we need to select one: choose &lt;em&gt;8080&lt;/em&gt; and press the &lt;em&gt;OK&lt;/em&gt; button. The following browser window should be displayed:&lt;/p&gt; &lt;p id="kxdzitR"&gt;&lt;img class=" alignnone size-full wp-image-574217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890996b57ff-1024x552.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890996b57ff.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890996b57ff.png 1911w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890996b57ff-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890996b57ff-768x414.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890996b57ff-1024x552.png 1024w" sizes="(max-width: 1911px) 100vw, 1911px" /&gt;&lt;/p&gt; &lt;p&gt;Don’t worry, the error message is displayed because our application has no mapping for the root. Append &lt;code&gt;/egg&lt;/code&gt; in the URL bar in the browser window and press &lt;em&gt;ENTER&lt;/em&gt;:&lt;/p&gt; &lt;p id="ZZlQosR"&gt;&lt;img class=" alignnone size-full wp-image-574227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909baa3726-1024x552.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909baa3726.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909baa3726.png 1911w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909baa3726-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909baa3726-768x414.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909baa3726-1024x552.png 1024w" sizes="(max-width: 1911px) 100vw, 1911px" /&gt;&lt;/p&gt; &lt;h3 id="inner-loop"&gt;Inner loop&lt;/h3&gt; &lt;p&gt;In the following scenario, we will modify locally the application source code and verify that the modification is broadcasted immediately to the cluster. Let’s switch our application in &lt;code&gt;watch&lt;/code&gt; mode so that every local modification is sent to the cluster:&lt;/p&gt; &lt;p&gt;In the &lt;code&gt;OpenShift&lt;/code&gt; view, right-click the &lt;em&gt;backend&lt;/em&gt; node and select &lt;em&gt;Watch&lt;/em&gt;:&lt;/p&gt; &lt;p id="PDAOpYO"&gt;&lt;img class=" alignnone size-full wp-image-574237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909ea63534-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909ea63534.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909ea63534.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909ea63534-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909ea63534-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c8909ea63534-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Now, in the &lt;code&gt;Project&lt;/code&gt; view, open the &lt;code&gt;src/main/java/com/openshift/wildwest/APIController.java&lt;/code&gt; file:&lt;/p&gt; &lt;p id="UJgkNPR"&gt;&lt;img class=" alignnone size-full wp-image-574247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890a0a9a040-1024x568.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890a0a9a040.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890a0a9a040.png 1734w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890a0a9a040-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890a0a9a040-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890a0a9a040-1024x568.png 1024w" sizes="(max-width: 1734px) 100vw, 1734px" /&gt;&lt;/p&gt; &lt;p&gt;Modify the &lt;code&gt;egg&lt;/code&gt; method:&lt;/p&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight prettyprinted"&gt;&lt;code class="language-java" data-lang="java"&gt; &lt;span class="lit"&gt;@RequestMapping&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="str"&gt;"/egg"&lt;/span&gt;&lt;span class="pun"&gt;)&lt;/span&gt; &lt;span class="kwd"&gt;public&lt;/span&gt; &lt;span class="typ"&gt;String&lt;/span&gt;&lt;span class="pln"&gt; easterEgg&lt;/span&gt;&lt;span class="pun"&gt;()&lt;/span&gt; &lt;span class="pun"&gt;{&lt;/span&gt; &lt;span class="kwd"&gt;return&lt;/span&gt; &lt;span class="str"&gt;"Every game needs an easter egg!!"&lt;/span&gt;&lt;span class="pun"&gt;;&lt;/span&gt; &lt;span class="pun"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;with the following content:&lt;/p&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="prettyprint highlight prettyprinted"&gt;&lt;code class="language-java" data-lang="java"&gt; &lt;span class="lit"&gt;@RequestMapping&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="str"&gt;"/egg"&lt;/span&gt;&lt;span class="pun"&gt;)&lt;/span&gt; &lt;span class="kwd"&gt;public&lt;/span&gt; &lt;span class="typ"&gt;String&lt;/span&gt;&lt;span class="pln"&gt; easterEgg&lt;/span&gt;&lt;span class="pun"&gt;()&lt;/span&gt; &lt;span class="pun"&gt;{&lt;/span&gt; &lt;span class="kwd"&gt;return&lt;/span&gt; &lt;span class="str"&gt;"A change from inside my ide"&lt;/span&gt;&lt;span class="pun"&gt;;&lt;/span&gt; &lt;span class="pun"&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Refresh the browser window and you should see the following output:&lt;/p&gt; &lt;p id="PQsAeie"&gt;&lt;img class=" alignnone size-full wp-image-574267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890caaf0a19-1024x552.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890caaf0a19.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890caaf0a19.png 1911w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890caaf0a19-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890caaf0a19-768x414.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/img_5c890caaf0a19-1024x552.png 1024w" sizes="(max-width: 1911px) 100vw, 1911px" /&gt;&lt;/p&gt; &lt;p&gt;Keep an eye on the &lt;a href="https://plugins.jetbrains.com/plugin/12030-openshift-connector-by-red-hat"&gt;plugin site&lt;/a&gt; for updates.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#38;linkname=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fwhat-red-hat-openshift-connector-for-jetbrains-products-offers-developers%2F&amp;#038;title=What%20Red%20Hat%20OpenShift%20Connector%20for%20JetBrains%20products%20offers%20developers" data-a2a-url="https://developers.redhat.com/blog/2019/03/29/what-red-hat-openshift-connector-for-jetbrains-products-offers-developers/" data-a2a-title="What Red Hat OpenShift Connector for JetBrains products offers developers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/29/what-red-hat-openshift-connector-for-jetbrains-products-offers-developers/"&gt;What Red Hat OpenShift Connector for JetBrains products offers developers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/2u2jzYLJjs0" height="1" width="1" alt=""/&gt;</content><summary>We are extremely pleased to announce that the preview release of the Red Hat OpenShift Connector for JetBrains products (IntelliJ IDEA, WebStorm, etc.) is now available in Preview Mode and supports Java and Node.js components. You can download the OpenShift Connector plugin from the JetBrains marketplace or install it directly from the plugins gallery in JetBrains products. In this article, we’ll ...</summary><dc:creator>Jeff Maury</dc:creator><dc:date>2019-03-29T07:05:25Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/29/what-red-hat-openshift-connector-for-jetbrains-products-offers-developers/</feedburner:origLink></entry><entry><title>Red Hat Enterprise Linux compiler toolset updates: Clang/LLVM 7.0, Go 1.11, Rust 1.31</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7gmQCg-uD40/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="Clang/LLVM" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Go" scheme="searchisko:content:tags" /><category term="Rust" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_enterprise_linux_compiler_toolset_updates_clang_llvm_7_0_go_1_11_rust_1_31</id><updated>2019-03-29T07:03:33Z</updated><published>2019-03-29T07:03:33Z</published><content type="html">&lt;p&gt;We are pleased to announce the general availability of these three compiler toolsets for &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux 7:&lt;/a&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Clang/LLVM 7.0&lt;/li&gt; &lt;li&gt;Go 1.11&lt;/li&gt; &lt;li&gt;Rust 1.31&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These toolsets can be installed from the &lt;a href="https://developers.redhat.com/products/rhel/download/"&gt;Red Hat Enterprise Linux 7 Devtools&lt;/a&gt; channel. See the &amp;#8220;Compiler toolset details&amp;#8221; section of this article to learn about the new features.&lt;/p&gt; &lt;p&gt;These toolsets became officially supported Red Hat offerings as of the previous release.&lt;/p&gt; &lt;p&gt;&lt;span id="more-578967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;About compiler toolsets for Red Hat Enterprise Linux&lt;/h2&gt; &lt;p&gt;Twice a year, Red Hat distributes new versions of compiler toolsets, scripting languages, open source databases, and web tools providing application developers with access to the latest, stable versions. These Red Hat-supported offerings are packaged as&lt;a href="https://developers.redhat.com/products/softwarecollections/overview/"&gt; Red Hat Software Collections&lt;/a&gt; (scripting languages, open source databases, web tools, etc.), &lt;a href="https://developers.redhat.com/products/developertoolset/overview/"&gt;Red Hat Developer Toolset&lt;/a&gt; (GCC), and the recently added compiler toolsets &lt;a href="https://developers.redhat.com/products/gcc-clang-llvm-go-rust/overview"&gt;Clang/LLVM, Go, and Rust&lt;/a&gt;. All of these offerings are &lt;code&gt;yum&lt;/code&gt; installable and included in all Red Hat Enterprise Linux Developer Subscriptions and most Red Hat Enterprise Linux subscriptions. Most components are also available as Linux container images for hybrid cloud development across Red Hat platforms, including Red Hat Enterprise Linux, &lt;a href="https://developers.redhat.com/products/openshift/overview/"&gt;Red Hat OpenShift&lt;/a&gt;, &lt;a href="https://www.redhat.com/en/technologies/linux-platforms/openstack-platform"&gt;Red Hat OpenStack&lt;/a&gt;, etc.&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Compiler toolset details&lt;/b&gt;&lt;/h2&gt; &lt;h3&gt;&lt;b&gt;Clang/LLVM 7.0&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignleft wp-image-579017 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/clang-image.jpg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/clang-image-150x150.jpg" alt="" width="150" height="150" /&gt;&lt;/p&gt; &lt;p&gt;This release is based on LLVM version 7.0 and is fully supported by Red Hat.&lt;/p&gt; &lt;p&gt;The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. The LLVM Core libraries provide a modern source- and target-independent optimizer, along with code generation support for the Red Hat Enterprise Linux CPU architectures.&lt;/p&gt; &lt;p&gt;Clang is an &amp;#8220;LLVM native&amp;#8221; C/C++/Objective-C compiler, which aims to deliver amazingly fast compiles and extremely useful error and warning messages and to provide a platform for building great source level tools. The Clang Static Analyzer is a tool that automatically finds bugs in your code and is a great example of the sort of tool that can be built using the Clang front end as a library to parse C/C++ code.&lt;/p&gt; &lt;p&gt;The following components are included in this release:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;llvm-toolset-7.0 (automatically installs Clang)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Clang/LLVM 7.0 runs on Red Hat Enterprise Linux 7 (x86_64, Power LE, aarch64, S390x)&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Since the November 2018 release, Red Hat&amp;#8217;s Clang/LLVM package naming convention has changed so that the Red Hat version number now reflects the upstream version. The &lt;code class="m_-3546176358608089286code-style"&gt;llvm-toolset-7&lt;/code&gt;packages (without the dot zero), are based on Clang/LLVM 5.0. The new package name for Clang/LLVM 7.0 is &lt;code class="m_-3546176358608089286code-style"&gt;llvm-toolset-7.0&lt;/code&gt; (seven dot zero). Although this might seem confusing now, hopefully it will make things easier for everyone going forward.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a list of the version numbers and corresponding package names:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;LLVM version 7.x, package name &lt;tt&gt;llvm-toolset-7.0&lt;br /&gt; &lt;/tt&gt;&lt;/li&gt; &lt;li&gt;LLVM version 6.x, package name &lt;tt&gt;llvm-toolset-6.0&lt;/tt&gt;&lt;/li&gt; &lt;li&gt;LLVM Version 5.x, package name &lt;tt&gt;llvm-toolset-7&lt;/tt&gt;&lt;/li&gt; &lt;/ul&gt; &lt;section id="sect-Changes-LLVM" class="section"&gt;For more information, see the &lt;a class="link" href="https://releases.llvm.org/7.0.0/docs/ReleaseNotes.html"&gt;LLVM 7.0.0 Release Notes&lt;/a&gt; and &lt;a class="link" href="http://releases.llvm.org/7.0.0/tools/clang/docs/ReleaseNotes.html"&gt;Clang 7.0.0 Release Notes&lt;/a&gt;.&lt;/section&gt; &lt;h3&gt;&lt;b&gt;Golang 1.11&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignleft wp-image-579027 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/golang.sh_-490x490.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/golang.sh_-490x490-150x150.png" alt="" width="150" height="150" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/golang.sh_-490x490-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/golang.sh_-490x490-300x300.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/golang.sh_-490x490.png 490w" sizes="(max-width: 150px) 100vw, 150px" /&gt;&lt;/p&gt; &lt;p&gt;This Go toolset is based on Golang 1.11 and is fully supported by Red Hat.&lt;/p&gt; &lt;p&gt;Go is expressive, concise, clean, and efficient. Its concurrency mechanisms make it easy to write programs that get the most out of multicore and networked machines, while its novel type system enables flexible and modular program construction. Go compiles quickly to machine code yet has the convenience of garbage collection and the power of run-time reflection. It&amp;#8217;s a fast, statically typed, compiled language that feels like a dynamically typed, interpreted language.&lt;/p&gt; &lt;p&gt;The following components are included in this release:&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;go-toolset-1.10&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;go-toolset-1.10-golang-1.10&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Golang 1.10 runs on Red Hat Enterprise Linux 7 (x86_64, Power LE, aarch64, S390x)&lt;/p&gt; &lt;p&gt;For more details, see the &lt;a href="https://golang.org/doc/go1.11"&gt;Go 1.11 release notes&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Rust 1.31.1&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;&lt;img class=" alignleft wp-image-579037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/1200px-Rust_programming_language_black_logo.svg_-1024x1024.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/1200px-Rust_programming_language_black_logo.svg_-150x150.png" alt="" width="150" height="150" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/1200px-Rust_programming_language_black_logo.svg_-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/1200px-Rust_programming_language_black_logo.svg_-300x300.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/1200px-Rust_programming_language_black_logo.svg_-768x768.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/1200px-Rust_programming_language_black_logo.svg_-1024x1024.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/1200px-Rust_programming_language_black_logo.svg_.png 1200w" sizes="(max-width: 150px) 100vw, 150px" /&gt;&lt;/p&gt; &lt;p&gt;This Rust toolset is based on Rust 1.31 and is fully supported by Red Hat.&lt;/p&gt; &lt;p&gt;Rust is an open source systems programming language created by Mozilla and a community of volunteers. It is designed to help developers create fast, secure applications that take full advantage of the powerful features of modern multi-core processors. It prevents segmentation faults and guarantees thread safety, all with an easy-to-learn syntax.&lt;/p&gt; &lt;p&gt;Additionally, Rust offers zero-cost abstractions, move semantics, guaranteed memory safety, threads with no data races, trait-based generics, pattern matching, type inference, and efficient C bindings, with a minimum runtime size.&lt;/p&gt; &lt;p&gt;Cargo is Rust’s package manager and build tool. It allows Rust projects to declare dependencies with specific version requirement. Cargo will resolve the full dependency graph, download packages as needed, and build and test the entire project.&lt;/p&gt; &lt;p&gt;The following components are included in this release:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;rust-toolset-1.31 (automatically installs Cargo)&lt;/li&gt; &lt;li&gt;rust-toolset-1.31-cargo&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Rust 1.31 runs on Red Hat Enterprise Linux 7 (x86_64, Power LE, aarch64, S390x)&lt;/p&gt; &lt;ul&gt; &lt;li&gt;New capabilities with defining procedural macros &lt;ul&gt; &lt;li&gt;Attribute macros let you define custom &lt;code&gt;#[name]&lt;/code&gt; annotations.&lt;/li&gt; &lt;li&gt;Function macros work like those defined by &lt;code&gt;macro_rules!&lt;/code&gt; but have more flexibility being implemented in Rust.&lt;/li&gt; &lt;li&gt;Macros can now be imported in use statements, removing the need for the &lt;code&gt;#[macro_use]&lt;/code&gt; crate attribute.&lt;/li&gt; &lt;li&gt;The &lt;code&gt;proc_macro&lt;/code&gt; crate is now stable, to help write these new macros.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Module improvements &lt;ul&gt; &lt;li&gt;External crates are now in the prelude, which allows a crate name to serve as the root of a path from anywhere.&lt;/li&gt; &lt;li&gt;The crate keyword now serves as the root of your own crate in paths and use statements.&lt;/li&gt; &lt;li&gt;2018 edition &lt;ul&gt; &lt;li&gt;The new 2018 edition marks a collective milestone of the past three years of Rust development, while also making a few opt-in breaking changes. Existing code will default to 2015 edition, with no breaking changes, and crates from different editions are fully interoperable. &lt;code&gt;cargo new&lt;/code&gt; will specify edition = &amp;#8220;2018&amp;#8221; in &lt;code&gt;Cargo.toml&lt;/code&gt; for new projects.&lt;/li&gt; &lt;li&gt;async, await, and try are reserved keywords in 2018, and dyn is now a strict keyword.&lt;/li&gt; &lt;li&gt;Non-lexical lifetimes are a refinement of the previous block-based lifetime system, allowing borrowed values to be released sooner in many cases to be reused elsewhere. This is initially exclusive to the 2018 edition but planned for 2015 as well.&lt;/li&gt; &lt;li&gt;Module changes: Explicit &lt;code&gt;extern crate&lt;/code&gt; declarations are unnecessary in most cases in 2018. use paths can now be relative from the current scope, rather than always starting from the root scope as in 2015.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Lifetimes can now be left implicit in more cases, especially using the new &amp;#8216;_ placeholder.&lt;/li&gt; &lt;li&gt;const fn — Functions can be declared constant, which allows them to be used in restricted contexts, like the initialization of a const or static value.&lt;/li&gt; &lt;li&gt;Stable tools: clippy, rls, and rustfmt. We have been shipping these tools as preview already, but now they are officially supported. &lt;ul&gt; &lt;li&gt;clippy adds extra lints for code/style issues.&lt;/li&gt; &lt;li&gt;rls implements the Language Server protocol for IDE integration.&lt;/li&gt; &lt;li&gt;rustfmt formats your code and is also integrated with the cargo fmt subcommand.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Tool lints let you add warning annotations for custom lints, especially for those added by clippy. For example, &lt;code&gt;#[allow(clippy::bool_comparison)]&lt;/code&gt; will silence that warning on an item for which you deem it acceptable.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; Notable changes to Cargo include: &lt;ul&gt; &lt;li&gt;Cargo now shows a progress bar as it builds your crates and dependencies.&lt;/li&gt; &lt;li class="listitem"&gt;Cargo now allows renaming dependencies in &lt;code class="literal"&gt;Cargo.toml&lt;/code&gt;, which affects how they are referenced in your sources. Previously, you could only rename in source, like &lt;code class="literal"&gt;extern crate published_name as new_name;&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The Rust compiler naming convention has changed so that the version number reflects the community version. The previous version was &lt;code&gt;Rust-toolset-7&lt;/code&gt;, which was based on Rust 1.29.&lt;/p&gt; &lt;h3&gt;For more information&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/gcc-clang-llvm-go-rust/overview"&gt;Get started with these compilers&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Red Hat Developer Tools &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_developer_tools/2019.1/"&gt;documentation&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fred-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31%2F&amp;#038;title=Red%20Hat%20Enterprise%20Linux%20compiler%20toolset%20updates%3A%20Clang%2FLLVM%207.0%2C%20Go%201.11%2C%20Rust%201.31" data-a2a-url="https://developers.redhat.com/blog/2019/03/29/red-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31/" data-a2a-title="Red Hat Enterprise Linux compiler toolset updates: Clang/LLVM 7.0, Go 1.11, Rust 1.31"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/29/red-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31/"&gt;Red Hat Enterprise Linux compiler toolset updates: Clang/LLVM 7.0, Go 1.11, Rust 1.31&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7gmQCg-uD40" height="1" width="1" alt=""/&gt;</content><summary>We are pleased to announce the general availability of these three compiler toolsets for Red Hat Enterprise Linux 7: Clang/LLVM 7.0 Go 1.11 Rust 1.31 These toolsets can be installed from the Red Hat Enterprise Linux 7 Devtools channel. See the “Compiler toolset details” section of this article to learn about the new features. These toolsets became officially supported Red Hat offerings as of the p...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2019-03-29T07:03:33Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/29/red-hat-enterprise-linux-compiler-toolset-updates-clang-llvm-7-0-go-1-11-rust-1-31/</feedburner:origLink></entry><entry><title>Quarkus: Why compile to native?</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/180iLG0FgGo/" /><category term="community" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Mark Little</name></author><id>searchisko:content:id:jbossorg_blog-quarkus_why_compile_to_native</id><updated>2019-03-29T07:00:00Z</updated><published>2019-03-29T07:00:00Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/20/quarkus-0-12-0-released/"&gt;Quarkus&lt;/a&gt; is &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; native, and to accomplish that we’ve spent a lot of time working across a number of different areas, such as the Java Virtual Machine (JVM) and various framework optimizations. And, there’s much more work still to be done. One area that has piqued the interest of the developer community is Quarkus’s comprehensive and seamless approach to generating an operating system specific (aka native) executable from your &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; code, as you do with languages like C and C++, which we believe will typically be used at the end of the build-test-deploy cycle.&lt;/p&gt; &lt;p&gt;Although the native compilation is important, as we’ll discuss later, Quarkus works really well with vanilla OpenJDK Hotspot, thanks to the significant performance improvements we’ve made to the entire stack. The native executable aspect Quarkus offers is optional and, if you don’t want it or your applications don’t need it, then you can ignore it. In fact, even when you are using native images, Quarkus still relies heavily on &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;OpenJDK&lt;/a&gt;. The well-received dev mode is able to deliver near-instantaneous change-test cycles all due to Hotspot’s rich dynamic code execution capabilities. Additionally, &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; internally uses OpenJDK’s class library and HotSpot to produce a native image.&lt;/p&gt; &lt;p&gt;Still, there&amp;#8217;s the question: Why have native compilation at all if the other optimizations are so good? That&amp;#8217;s the question we&amp;#8217;ll look at more closely here.&lt;br /&gt; &lt;span id="more-579087"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Let’s start with the obvious: &lt;a href="http://www.jboss.org/"&gt;JBoss&lt;/a&gt; and Red Hat have a long track record of knowing how to optimize the JVM, stacks, and frameworks including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The first app server to run in the cloud on &lt;a href="https://www.redhat.com/en/blog/openshift-is-the-first-paas-to-support-java-ee-6-full-profile-in-the-cloud"&gt;Red Hat OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;The first app server to run on a &lt;a href="https://developers.redhat.com/index.php/videos/youtube/9c-g7UxT0nk//"&gt;plug computer&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;The first app server to run on a &lt;a href="http://blog.arungupta.me/wildfly-on-raspberry-pi-techtip-24/"&gt;Raspberry Pi&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Running many of our &lt;a href="http://www.jboss.org/iot/android/"&gt;projects on Android&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As this shows, we have been working on running Java in the cloud and on constrained devices (aka Internet of Things) for many years, always looking at how we could squeeze the next performance or memory optimization out of the JVM. We and others have long looked at the potential for compiled Java, whether through &lt;a href="https://gcc.gnu.org/wiki/GCJ"&gt;GCJ&lt;/a&gt;, &lt;a href="https://readytalk.github.io/avian/"&gt;Avian&lt;/a&gt;, &lt;a href="https://www.excelsiorjet.com/"&gt;Excelsior JET&lt;/a&gt;, or even &lt;a href="https://source.android.com/devices/tech/dalvik"&gt;Dalvik&lt;/a&gt; because we understood the trade-offs (e.g., lack of build-once-run-anywhere versus lower on-disk footprint or quicker startup time).&lt;/p&gt; &lt;p&gt;Why are these trade-offs important? The answer is that, for some important scenarios, it makes complete sense:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Consider serverless/event-driven environments where we need to &lt;a href="https://mikhail.io/2018/08/serverless-cold-start-war/"&gt;spin up a service&lt;/a&gt; in real time (soft or hard) to react to an event. Unlike a persistent service, cold start cost lengthens the response time to a request. Today the JVM still takes “a while” to start and although throwing hardware at the problem can help, in some situations, the difference between 1 second and 5 ms could be life or death. Yes, we can play tricks such as hot standby JVMs (we’ve been there with our &lt;a href="https://github.com/projectodd/kwsk"&gt;Knative port of OpenWhisk&lt;/a&gt;, for example), but that doesn’t guarantee you’ll have enough JVMs waiting to field requests as they scale up, nor does it sound like a good way to save money when you’d be paying for processes that aren’t being used all the time.&lt;/li&gt; &lt;li&gt;Then there’s the multi-tenancy aspect we often hear about. Although the JVM has grown to duplicate many operating system capabilities, it still doesn’t have the kind of process isolation we take for granted in operating systems such as Linux, and the failure of a thread can take down the entire JVM. Many people get around this by only running a single user’s applications in a single JVM. That’s a legitimate thing to do: the unit of failure is, therefore, the JVM and failures for one user don’t necessarily impact any other users. However, running a JVM per user often presents problems at scale.&lt;/li&gt; &lt;li&gt;Density also matters to cloud-native applications. Embracing &lt;a href="https://12factor.net/"&gt;12-factor&lt;/a&gt; app, microservices, and Kubernetes leads to many JVMs per app. While you gain elasticity and robustness, the cost of base memory footprint per service starts to add up, even though a portion of that cost isn’t strictly necessary. Statically compiled executables have the ability to benefit from closed-world optimizations, such as fine-grained dead-code elimination, where only the portions of frameworks (including the JDK itself) actually in use by the service are included in the resulting image. By tailoring the application to be native-friendly, Quarkus can be used to densely pack many service instances on a host, without compromising security.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For these reasons alone, a native executable option presents a valid solution for us and others in our communities. There’s another less technical reason, which is no less important: Over the past few years, many Java developers and companies have abandoned it in favor of newer languages, often because they believe that the JVM, the stacks, and the frameworks are bloated, slow, etc.&lt;/p&gt; &lt;p&gt;&lt;a href="https://www.reddit.com/r/java/comments/8xv3ha/does_anybody_use_spring_boot_with_aws_lambda_do/"&gt;Trying to force-fit&lt;/a&gt; an existing hammer to a new nail isn’t always the best approach, and sometimes it’s best to take a step back and consider a new tool. If Quarkus makes people pause and rethink, then it&amp;#8217;s a good thing for the entire Java ecosystem. Quarkus takes an innovative view of how to deliver more efficient applications, making Java relevant to application architectures previously thought taboo (like serverless). Additionally, through its extension capability, we hope to see a Quarkus Java extension ecosystem that offers a large set of frameworks that can be natively compiled along with your application out of the box.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#38;linkname=Quarkus%3A%20Why%20compile%20to%20native%3F" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F29%2Fquarkus-why-compile-to-native%2F&amp;#038;title=Quarkus%3A%20Why%20compile%20to%20native%3F" data-a2a-url="https://developers.redhat.com/blog/2019/03/29/quarkus-why-compile-to-native/" data-a2a-title="Quarkus: Why compile to native?"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/29/quarkus-why-compile-to-native/"&gt;Quarkus: Why compile to native?&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/180iLG0FgGo" height="1" width="1" alt=""/&gt;</content><summary>Quarkus is Kubernetes native, and to accomplish that we’ve spent a lot of time working across a number of different areas, such as the Java Virtual Machine (JVM) and various framework optimizations. And, there’s much more work still to be done. One area that has piqued the interest of the developer community is Quarkus’s comprehensive and seamless approach to generating an operating system specifi...</summary><dc:creator>Mark Little</dc:creator><dc:date>2019-03-29T07:00:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/29/quarkus-why-compile-to-native/</feedburner:origLink></entry><entry><title>Red Hat Enterprise Linux 8 Image Builder: Building custom system images</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Tn8ybqyIYyA/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="cloud computing" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Ricardo Gerardi</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_enterprise_linux_8_image_builder_building_custom_system_images</id><updated>2019-03-28T14:30:52Z</updated><published>2019-03-28T14:30:52Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux 8 Beta&lt;/a&gt; ships a new tool, called Image Builder, that allows you to create custom Red Hat Enterprise Linux system images in a variety of formats. These include compatibility with major cloud providers and virtualization technologies available in the market. As a result, it enables you to quickly spin up new Red Hat Enterprise Linux (RHEL) systems in different platforms, according to your requirements. At this time, Image Builder is available as a &lt;a href="https://access.redhat.com/support/offerings/techpreview"&gt;Technology Preview Feature.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In this article, we&amp;#8217;ll show how to set up Image Builder in &lt;a href="https://developers.redhat.com/blog/2019/03/04/red-hat-enterprise-linux-8-beta-cheat-sheet-for-developers/"&gt;Red Hat Enterprise Linux 8 Beta&lt;/a&gt; and create a couple of images to test its capabilities. To follow this tutorial, you will need two virtual machines running Red Hat Enterprise Linux 8 Beta. We&amp;#8217;ll not cover Red Hat Enterprise Linux 8 Beta installation in this post. For more information, take a look at &lt;a href="https://developers.redhat.com/rhel8/getrhel8" target="_blank" rel="noopener noreferrer"&gt;Get RHEL8 Beta&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-575647"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;One of the virtual machines works as a repository mirror, while the other is where we&amp;#8217;ll run the Composer tools, which power Image Builder. Both machines need to be subscribed and have access to the Red Hat Enterprise Linux 8 packages repositories.&lt;/p&gt; &lt;h2&gt;Creating a repository mirror&lt;/h2&gt; &lt;p&gt;In the current version, Image Builder is unable to download the packages required to create images directly from the Red Hat CDN. Let&amp;#8217;s use the first virtual machine to create a local repository of packages that Image Builder can download via HTTP. We&amp;#8217;ll call this virtual machine &lt;em&gt;rh8mirror2&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;First, as the &lt;em&gt;root&lt;/em&gt; user, install the required packages:&lt;/p&gt; &lt;pre&gt;$ sudo -i # yum install -y yum-utils createrepo httpd &lt;/pre&gt; &lt;p&gt;Then, mount the Red Hat Enterprise Linux 8 installation media to copy the packages to the local repository:&lt;/p&gt; &lt;pre&gt;# mount -o ro /dev/cdrom /mnt &lt;/pre&gt; &lt;p&gt;Next, copy both repositories available in the installation media—BaseOS and AppStream&lt;strong&gt;—&lt;/strong&gt;to the default Apache HTTP content directory:&lt;/p&gt; &lt;pre&gt;# mkdir -p /var/www/html # cp -r /mnt/BaseOS/ /var/www/html/ # cp -r /mnt/AppStream/ /var/www/html/ &lt;/pre&gt; &lt;p&gt;Unmount the installation media, because it&amp;#8217;s no longer necessary:&lt;/p&gt; &lt;pre&gt;# umount /mnt &lt;/pre&gt; &lt;p&gt;Ensure the files you copied have the correct SELinux context:&lt;/p&gt; &lt;pre&gt;# restorecon -RvF /var/www/html &lt;/pre&gt; &lt;p&gt;Next, ensure that the firewall allows access to the HTTP service:&lt;/p&gt; &lt;pre&gt;# firewall-cmd --add-service=http --permanent success # firewall-cmd --reload success # firewall-cmd --list-services cockpit dhcpv6-client http ssh &lt;/pre&gt; &lt;p&gt;Finally, enable the HTTP service and start it:&lt;/p&gt; &lt;pre&gt;# systemctl enable httpd Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service. # systemctl start httpd &lt;/pre&gt; &lt;p&gt;You can test that the repository is working by downloading a package:&lt;/p&gt; &lt;pre&gt;# curl -O http://localhost/BaseOS/Packages/zsh-5.5.1-4.el8.x86_64.rpm # ls -l zsh* -rw-r--r--. 1 root root 3036476 Mar 15 11:05 zsh-5.5.1-4.el8.x86_64.rpm # rm zsh-5.5.1-4.el8.x86_64.rpm &lt;/pre&gt; &lt;p&gt;Once the repository mirror is working, you can install and enable Composer on the second virtual system.&lt;/p&gt; &lt;h2&gt;Installing Composer&lt;/h2&gt; &lt;p&gt;The Composer tools enable the Image Builder functionality. We recommend that you install Composer in a dedicated virtual machine as it has specific security requirements. Because Composer installs a full operating system in a local filesystem, SELinux must be set to permissive mode. We&amp;#8217;ll use the second virtual machine—&lt;em&gt;rh8comp2—&lt;/em&gt;to install Composer.&lt;/p&gt; &lt;p&gt;You can use Image Builder via GUI, through the web console interface or CLI by installing the &lt;em&gt;composer-cli&lt;/em&gt; package. For this tutorial, we&amp;#8217;ll use a combination of both.&lt;/p&gt; &lt;p&gt;Before installing Image Builder, ensure that the system&amp;#8217;s SELinux is set to permissive:&lt;/p&gt; &lt;pre&gt;# sestatus SELinux status: enabled SELinuxfs mount: /sys/fs/selinux SELinux root directory: /etc/selinux Loaded policy name: targeted &lt;strong&gt;Current mode: permissive&lt;/strong&gt; Mode from config file: permissive Policy MLS status: enabled Policy deny_unknown status: allowed Memory protection checking: actual (secure) Max kernel policy version: 31 &lt;/pre&gt; &lt;p&gt;If the system is set to Enforcing, change it to permissive:&lt;/p&gt; &lt;pre&gt;# setenforce permissive # vi /etc/selinux/config SELINUX=permissive &lt;/pre&gt; &lt;p&gt;In addition, let&amp;#8217;s use &lt;em&gt;curl&lt;/em&gt; to ensure that this virtual machine can download packages from the mirror repository:&lt;/p&gt; &lt;pre&gt;# curl -O http://rh8mirror2/BaseOS/Packages/zsh-5.5.1-4.el8.x86_64.rpm # ls -l zsh* -rw-r--r--. 1 root root 3036476 Mar 15 11:08 zsh-5.5.1-4.el8.x86_64.rpm # rm zsh-5.5.1-4.el8.x86_64.rpm &lt;/pre&gt; &lt;p&gt;Now that you verified the prerequisites, install the Composer packages:&lt;/p&gt; &lt;pre&gt;# yum install -y lorax-composer composer-cli cockpit-composer &lt;/pre&gt; &lt;p&gt;This command will also download the dependencies, including Cockpit (to enable the web console) if it&amp;#8217;s not installed.&lt;/p&gt; &lt;p&gt;Next, create the repository file to configure &lt;em&gt;yum&lt;/em&gt; to obtain packages from the mirror repository:&lt;/p&gt; &lt;pre&gt;# sudo cat &amp;#62; /etc/yum.repos.d/mirror.repo &amp;#60;&amp;#60;EOF [mirror-rhel-8-for-x86_64-baseos-beta-rpms] name=Red Hat Enterprise Linux 8 for x86_64 - BaseOS Beta (RPMs) MIRROR baseurl=http://rh8mirror2/BaseOS/ enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release&lt;/pre&gt; &lt;pre&gt;[mirror-rhel-8-for-x86_64-appstream-beta-rpms] name=Red Hat Enterprise Linux 8 for x86_64 - AppStream Beta (RPMs) MIRROR baseurl=http://rh8mirror2/AppStream/ enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release EOF &lt;/pre&gt; &lt;p&gt;Disable the default Red Hat Enterprise Linux 8 repositories and verify that &lt;em&gt;yum&lt;/em&gt; can only see the mirror repositories:&lt;/p&gt; &lt;pre&gt;# subscription-manager repos --disable='*' # yum clean all Updating Subscription Management repositories. Updating Subscription Management repositories. 28 files removed # yum repolist Updating Subscription Management repositories. Updating Subscription Management repositories. Red Hat Enterprise Linux 8 for x86_64 - AppStream Beta (RPMs) MIRROR 81 MB/s | 5.1 MB 00:00 Red Hat Enterprise Linux 8 for x86_64 - BaseOS Beta (RPMs) MIRROR 76 MB/s | 2.2 MB 00:00 repo id repo name status mirror-rhel-8-for-x86_64-appstream-beta-rpms Red Hat Enterprise Linux 8 for x86_64 - AppStream Beta (RPMs) MIRROR 4,594 mirror-rhel-8-for-x86_64-baseos-beta-rpms Red Hat Enterprise Linux 8 for x86_64 - BaseOS Beta (RPMs) MIRROR 1,686 &lt;/pre&gt; &lt;p&gt;Ensure that the firewall allows access to the Cockpit service:&lt;/p&gt; &lt;pre&gt;# firewall-cmd --add-service=cockpit &amp;#38;&amp;#38; firewall-cmd --add-service=cockpit --permanent Warning: ALREADY_ENABLED: 'cockpit' already in 'public' success Warning: ALREADY_ENABLED: cockpit success # firewall-cmd --list-services cockpit dhcpv6-client ssh &lt;/pre&gt; &lt;p&gt;Finally, enable and start the Composer and Cockpit services:&lt;/p&gt; &lt;pre&gt;# systemctl enable lorax-composer.socket Created symlink /etc/systemd/system/sockets.target.wants/lorax-composer.socket → /usr/lib/systemd/system/lorax-composer.socket. # systemctl enable cockpit.socket Created symlink /etc/systemd/system/sockets.target.wants/cockpit.socket → /usr/lib/systemd/system/cockpit.socket. # systemctl start lorax-composer # systemctl start cockpit &lt;/pre&gt; &lt;p&gt;Now you have Composer up and running. Next, let&amp;#8217;s use the web console GUI to create an image using Image Builder.&lt;/p&gt; &lt;h2&gt;Creating a custom image using the web console&lt;/h2&gt; &lt;p&gt;Once you have Composer and Cockpit installed, you can access the system administration GUI by pointing your browser to the Composer virtual machine hostname or IP address on port 9090. Log in using your administrator user credentials:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/cockpit-login-2019-03-15_14-01.png" target="_blank" rel="noopener noreferrer"&gt;&lt;img class=" alignnone wp-image-575677 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/cockpit-login-2019-03-15_14-01-1024x602.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/cockpit-login-2019-03-15_14-01-1024x602.png" alt="Cockpit Login Screen" width="640" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/cockpit-login-2019-03-15_14-01-1024x602.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/cockpit-login-2019-03-15_14-01-300x176.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/cockpit-login-2019-03-15_14-01-768x452.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/cockpit-login-2019-03-15_14-01.png 1126w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Once logged in, click on the &lt;em&gt;Image Builder&lt;/em&gt; icon on the left side of the menu:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/composer-2019-03-15_14-03.png" target="_blank" rel="noopener noreferrer"&gt;&lt;img class=" alignnone wp-image-575717 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/composer-2019-03-15_14-03-1024x606.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/composer-2019-03-15_14-03-1024x606.png" alt="Composer" width="640" height="379" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/composer-2019-03-15_14-03-1024x606.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/composer-2019-03-15_14-03-300x178.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/composer-2019-03-15_14-03-768x455.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/composer-2019-03-15_14-03.png 1128w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;Creating an image Blueprint&lt;/h3&gt; &lt;p&gt;Next, create a Blueprint for your image. The Blueprint defines what should be included in your image. Through the web console GUI, you can only specify rpm packages to include. To specify users, we&amp;#8217;ll use the Composer CLI later in this tutorial.&lt;/p&gt; &lt;p&gt;Create a new Blueprint by clicking on the &lt;em&gt;Create Blueprint&lt;/em&gt; button. After that, specify a name and a description for the Blueprint. For this example, we&amp;#8217;re creating an image that contains tools to compile programs written in Go; therefore, we&amp;#8217;re calling it &lt;em&gt;dev-golang-1&lt;/em&gt;:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-blueprint-2019-03-15_14-04.png"&gt;&lt;img class=" alignnone wp-image-575747 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-blueprint-2019-03-15_14-04.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-blueprint-2019-03-15_14-04.png" alt="Create Blueprint" width="600" height="260" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-blueprint-2019-03-15_14-04.png 600w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-blueprint-2019-03-15_14-04-300x130.png 300w" sizes="(max-width: 600px) 100vw, 600px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;On the next screen, select which packages you want to include in the image. You can use the filter bar on the left to make it easier to find packages. For example, type &lt;code&gt;tmux&lt;/code&gt; and press &lt;em&gt;Enter&lt;/em&gt; to see the &lt;em&gt;tmux&lt;/em&gt; package. Add the package to the Blueprint by clicking on the plus (+) sign beside its name. Notice that the GUI automatically adds the dependencies for the packages. For this example, we&amp;#8217;re adding the following packages to the Blueprint:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;cockpit&lt;/li&gt; &lt;li&gt;openssh&lt;/li&gt; &lt;li&gt;golang&lt;/li&gt; &lt;li&gt;tmux&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/blueprint-edit-final-2019-03-15_14-07.png"&gt;&lt;img class=" alignnone wp-image-575757 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/blueprint-edit-final-2019-03-15_14-07-1024x605.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/blueprint-edit-final-2019-03-15_14-07-1024x605.png" alt="Blueprint Edit" width="640" height="378" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/blueprint-edit-final-2019-03-15_14-07-1024x605.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/blueprint-edit-final-2019-03-15_14-07-300x177.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/blueprint-edit-final-2019-03-15_14-07-768x454.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/blueprint-edit-final-2019-03-15_14-07.png 1125w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;After you include all required packages, commit your changes by clicking on the &lt;em&gt;Commit&lt;/em&gt; button at the top of the screen. On the pop-up screen, confirm your changes and click on the &lt;em&gt;Commit&lt;/em&gt; button to commit:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/commit-2019-03-15_14-07.png"&gt;&lt;img class=" alignnone wp-image-575767 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/commit-2019-03-15_14-07.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/commit-2019-03-15_14-07.png" alt="Commit Blueprint Changes" width="601" height="440" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/commit-2019-03-15_14-07.png 601w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/commit-2019-03-15_14-07-300x220.png 300w" sizes="(max-width: 601px) 100vw, 601px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;Start the image creation&lt;/h3&gt; &lt;p&gt;Now that the Blueprint has been defined, you can start the image creation process by clicking on the &lt;em&gt;Create Image&lt;/em&gt; button at the top right. On the pop-up screen, select the type of image. Composer can create a variety of images, including AWS, Azure, OpenStack, VMware, and more. For this example, to deploy a local KVM virtual machine, select the &lt;em&gt;QEMU QCOW2&lt;/em&gt; format and click on &lt;em&gt;Create&lt;/em&gt;:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-2019-03-15_14-08.png"&gt;&lt;img class=" alignnone wp-image-575777 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-2019-03-15_14-08.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-2019-03-15_14-08.png" alt="Create Image" width="598" height="273" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-2019-03-15_14-08.png 598w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-2019-03-15_14-08-300x137.png 300w" sizes="(max-width: 598px) 100vw, 598px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;With this step, the image creation process has been started. It may take a few minutes to create the image. You can follow the progress on web console by navigating to the Blueprint and clicking on the &lt;em&gt;Images&lt;/em&gt; tab:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-pending-2019-03-15_14-09.png"&gt;&lt;img class=" alignnone wp-image-575787 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-pending-2019-03-15_14-09-1024x298.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-pending-2019-03-15_14-09-1024x298.png" alt="Create Image Pending" width="640" height="186" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-pending-2019-03-15_14-09-1024x298.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-pending-2019-03-15_14-09-300x87.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-pending-2019-03-15_14-09-768x224.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-pending-2019-03-15_14-09.png 1129w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;You can also follow detailed logs on the Composer Virtual Machine by checking the &lt;em&gt;journalctl&lt;/em&gt; logs for the &lt;em&gt;lorax-composer&lt;/em&gt; unit:&lt;/p&gt; &lt;pre&gt;# journalctl -fu lorax-composer &lt;/pre&gt; &lt;p&gt;Once the image is created, download it by clicking on the &lt;em&gt;Download&lt;/em&gt; button beside the image name:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-complete-2019-03-15_14-16.png"&gt;&lt;img class=" alignnone wp-image-575797 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-complete-2019-03-15_14-16-1024x295.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-complete-2019-03-15_14-16-1024x295.png" alt="Image complete" width="640" height="184" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-complete-2019-03-15_14-16-1024x295.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-complete-2019-03-15_14-16-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-complete-2019-03-15_14-16-768x221.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-complete-2019-03-15_14-16.png 1123w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;Use an image to create a virtual machine&lt;/h3&gt; &lt;p&gt;Now you can use this image to create a virtual machine on &lt;em&gt;KVM/Libvirt&lt;/em&gt;. Because we did not specify an user for this image, you can use &lt;em&gt;libvirt&lt;/em&gt; tools, such as &lt;em&gt;virt-customize&lt;/em&gt;, to further customize the image before using it:&lt;/p&gt; &lt;pre&gt;$ sudo virt-customize -a f492077c-6d4b-458a-8ac6-bfbc49fae499-disk.qcow2 --root-password password:test123 --hostname dev01 [ 0.0] Examining the guest ... [ 5.8] Setting a random seed [ 5.8] Setting the hostname: dev01 [ 5.8] Setting passwords [ 6.9] Finishing off &lt;/pre&gt; &lt;p&gt;Finally, create a virtual machine using your brand new image:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/vm-dev01-2019-03-15_14-27.png"&gt;&lt;img class=" alignnone wp-image-575807 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/vm-dev01-2019-03-15_14-27.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/vm-dev01-2019-03-15_14-27.png" alt="Virtual Machine using image" width="808" height="620" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/vm-dev01-2019-03-15_14-27.png 808w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/vm-dev01-2019-03-15_14-27-300x230.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/vm-dev01-2019-03-15_14-27-768x589.png 768w" sizes="(max-width: 808px) 100vw, 808px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In the next step, we&amp;#8217;ll use the Composer CLI to add users to the image directly.&lt;/p&gt; &lt;h2&gt;Creating a custom image using the CLI&lt;/h2&gt; &lt;p&gt;In addition to using the web console, you can also use the Composer CLI to create images. When using the CLI, you have access to a few more customization options, such as adding users and groups to the image. We already installed the &lt;em&gt;composer-cli&lt;/em&gt; package in the Composer virtual machine, so let&amp;#8217;s use it.&lt;/p&gt; &lt;p&gt;Log in to the Composer virtual machine &lt;em&gt;rh8comp2&lt;/em&gt; as &lt;em&gt;root&lt;/em&gt;. First, list all available Blueprints:&lt;/p&gt; &lt;pre&gt;# composer-cli blueprints list dev-golang-1 example-atlas example-development example-http-server &lt;/pre&gt; &lt;p&gt;As you can see, the &lt;em&gt;dev-golang-1&lt;/em&gt; Blueprint that we created using the GUI is available. We&amp;#8217;ll edit this Blueprint to include an administrator user. To edit the Blueprint, save it to a file:&lt;/p&gt; &lt;pre&gt;# composer-cli blueprints save dev-golang-1 # ls -l dev-golang-1.toml -rw-r--r--. 1 root root 295 Mar 15 14:38 dev-golang-1.toml &lt;/pre&gt; &lt;p&gt;This command saves the Blueprint in the &lt;a href="https://github.com/toml-lang/toml" target="_blank" rel="noopener noreferrer"&gt;TOML&lt;/a&gt; format.&lt;/p&gt; &lt;p&gt;Next, edit the &lt;em&gt;dev-golang-1.toml&lt;/em&gt; file to add the new user:&lt;/p&gt; &lt;pre&gt;# vi dev-golang-1.toml name = "dev-golang-1" description = "Golang Development Image" version = "0.0.2" modules = [] groups = []&lt;/pre&gt; &lt;pre&gt;[[packages]] name = "cockpit" version = "180"&lt;/pre&gt; &lt;pre&gt;[[packages]] name = "golang" version = "1.10.3"&lt;/pre&gt; &lt;pre&gt;[[packages]] name = "openssh" version = "7.8p1"&lt;/pre&gt; &lt;pre&gt;[[packages]] name = "tmux" version = "2.7"&lt;/pre&gt; &lt;p&gt;As you can see, the file contains all the packages we included when creating the Blueprint using the GUI. To add a new user, we include a new section with the required customization. Before that, bump the version up by &lt;em&gt;0.0.1&lt;/em&gt; to indicate a new minor version of the Blueprint:&lt;/p&gt; &lt;pre&gt;version = "0.0.3" &lt;/pre&gt; &lt;p&gt;Now, add the section &lt;strong&gt;customizations.users&lt;/strong&gt; with the details about the user you want to create, including user name, password, SSH keys, and groups.&lt;/p&gt; &lt;pre&gt;[[customizations.user]] name = "ricardo" description = "Ricardo user account" password = "$6$nt7IeYW0hFj3ShZC$FdBCgZpfIi92q0sdcTozX1z8KnDAxtxy2b4A76fP4.QKy9kyLS82Vci76BjJFIMp3RHJNCBqUq.aihV0icdHf1" key = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHmjYFDBCrB1mgacb47t+y8UXSscnJl2WWlJluzqtInpT6At0nwqtdV3niYTHxju7e/As4MX3iwC8ubVp2DH8qXgvorDliV9SsIQTqvNKlwGkxZ5cqfYFlV4SUuS7tVTOg0yIqVSddZ2t0Sjmdp3PF7zrp6ayH7a9BBA0/8HQXU/lpdk76SGYL9L8PHOtMYnxtmr+WduoJ+X9zO9d3SUypX36NleFqhlpr1UfnSSkFO/PfRYUhry6HEmUk3Da7aS9hNS0lX/j6uf9RnSrNSzquVezyVMgsRnJ+5xr7KyhwtEig//Wr/j8TWmqvj645IWXTmj6Jw4uvi26bEORZVM5x ricardo@localhost" home = "/home/ricardo/" shell = "/usr/bin/bash" groups = ["users", "wheel"] &lt;/pre&gt; &lt;p&gt;You can use this command to generate a hashed version of the password using the &lt;em&gt;SHA512&lt;/em&gt; algorithm:&lt;/p&gt; &lt;pre&gt;# python3 -c "import crypt, getpass; print(crypt.crypt(getpass.getpass(), crypt.METHOD_SHA512))" Password: $6$nt7IeYW0hFj3ShZC$FdBCgZpfIi92q0sdcTozX1z8KnDAxtxy2b4A76fP4.QKy9kyLS82Vci76BjJFIMp3RHJNCBqUq.aihV0icdHf1 &lt;/pre&gt; &lt;p&gt;Once you&amp;#8217;re done editing the file, save the changes and push the new version of your Blueprint to Composer like this:&lt;/p&gt; &lt;pre&gt;# composer-cli blueprints push dev-golang-1.toml &lt;/pre&gt; &lt;p&gt;Next, start the image creation process, using the &lt;em&gt;QCOW2&lt;/em&gt; format:&lt;/p&gt; &lt;pre&gt;# composer-cli compose start dev-golang-1 qcow2 Compose e63c7b29-df96-4f8c-aeb4-c2b0a98bd05e added to the queue &lt;/pre&gt; &lt;p&gt;Then, check the creation status like this:&lt;/p&gt; &lt;pre&gt;# composer-cli compose status e63c7b29-df96-4f8c-aeb4-c2b0a98bd05e RUNNING Fri Mar 15 14:43:35 2019 dev-golang-1 0.0.3 qcow2 f492077c-6d4b-458a-8ac6-bfbc49fae499 FINISHED Fri Mar 15 14:14:13 2019 dev-golang-1 0.0.2 qcow2 1990852608 &lt;/pre&gt; &lt;h3&gt;Download the image and create a virtual machine&lt;/h3&gt; &lt;p&gt;You can keep checking the status until it&amp;#8217;s completed. Creating the image takes a few minutes:&lt;/p&gt; &lt;pre&gt;# composer-cli compose status f492077c-6d4b-458a-8ac6-bfbc49fae499 FINISHED Fri Mar 15 14:14:13 2019 dev-golang-1 0.0.2 qcow2 1990852608 e63c7b29-df96-4f8c-aeb4-c2b0a98bd05e FINISHED Fri Mar 15 14:49:17 2019 dev-golang-1 0.0.3 qcow2 1990983680 &lt;/pre&gt; &lt;p&gt;After completion, you can download the image using the CLI:&lt;/p&gt; &lt;pre&gt;# composer-cli compose image e63c7b29-df96-4f8c-aeb4-c2b0a98bd05e e63c7b29-df96-4f8c-aeb4-c2b0a98bd05e-disk.qcow2: 1898.75 MB &lt;/pre&gt; &lt;p&gt;Alternatively, you can check the image creation status or download the new image using the web console:&lt;br /&gt; &lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-v003-2019-03-15_14-46.png"&gt;&lt;img class=" alignnone wp-image-575847 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-v003-2019-03-15_14-46-1024x608.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-v003-2019-03-15_14-46-1024x608.png" alt="Create Image v0.0.3" width="640" height="380" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-v003-2019-03-15_14-46-1024x608.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-v003-2019-03-15_14-46-300x178.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-v003-2019-03-15_14-46-768x456.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/create-image-v003-2019-03-15_14-46.png 1127w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Once you have the image, you can use it to spin up a new virtual machine using KVM, as you&amp;#8217;ve done before. The difference now is that the image already has an administrator user so you don&amp;#8217;t need to create one. Because we provided an SSH key, use it to log in the new system without a password:&lt;/p&gt; &lt;pre&gt;$ ssh ricardo@192.168.122.227 The authenticity of host '192.168.122.227 (192.168.122.227)' can't be established. ECDSA key fingerprint is SHA256:2xZm9mk8qrCUcwVb9dyb9Pvj21T021/wiXrD96nFKgE. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '192.168.122.227' (ECDSA) to the list of known hosts. Activate the web console with: systemctl enable --now cockpit.socket &lt;/pre&gt; &lt;p&gt;After you log in the new system, verify that Go is installed as per the Blueprint:&lt;/p&gt; &lt;pre&gt;[ricardo@localhost ~]$ go version go version go1.10.3 linux/amd64 [ricardo@localhost ~]$ &lt;/pre&gt; &lt;p&gt;Using the Composer CLI lets you automate the image creation process and integrate it with your CI/CD pipelines.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;The Image Builder tool is a versatile solution to configure and create custom system images that lets you quickly spin up new Red Hat Enterprise Linux systems in a variety of cloud and virtualization platforms. It&amp;#8217;s still a &lt;a href="https://access.redhat.com/support/offerings/techpreview" target="_blank" rel="noopener noreferrer"&gt;Technology Preview Feature&lt;/a&gt;; therefore, we encourage you to try it out and provide feedback to Red Hat to help improving it.&lt;/p&gt; &lt;p&gt;You can find more information about Image Builder in the Red Hat Enterprise Linux 8 Beta &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/html/installing_and_deploying_rhel/building-custom-system-images-with-composer_graphical-installation" target="_blank" rel="noopener noreferrer"&gt;documentation&lt;/a&gt; or in the upstream &lt;a href="https://weldr.io/" target="_blank" rel="noopener noreferrer"&gt;project blog&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;If you’re familiar with previous versions of Red Hat Enterprise Linux, you’ll find RHEL 8 Beta more intuitive to pick up and use. We&amp;#8217;ve also created a &lt;a href="https://developers.redhat.com/cheat-sheets/red-hat-enterprise-linux-8-beta/"&gt;Red Hat Enterprise Linux 8 Beta cheat sheet&lt;/a&gt; to help you quickly explore and begin your RHEL 8 Beta application development.&lt;br /&gt; &lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#38;linkname=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-enterprise-linux-8-image-builder-building-custom-system-images%2F&amp;#038;title=Red%20Hat%20Enterprise%20Linux%208%20Image%20Builder%3A%20Building%20custom%20system%20images" data-a2a-url="https://developers.redhat.com/blog/2019/03/28/red-hat-enterprise-linux-8-image-builder-building-custom-system-images/" data-a2a-title="Red Hat Enterprise Linux 8 Image Builder: Building custom system images"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/28/red-hat-enterprise-linux-8-image-builder-building-custom-system-images/"&gt;Red Hat Enterprise Linux 8 Image Builder: Building custom system images&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Tn8ybqyIYyA" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Enterprise Linux 8 Beta ships a new tool, called Image Builder, that allows you to create custom Red Hat Enterprise Linux system images in a variety of formats. These include compatibility with major cloud providers and virtualization technologies available in the market. As a result, it enables you to quickly spin up new Red Hat Enterprise Linux (RHEL) systems in different platforms, acco...</summary><dc:creator>Ricardo Gerardi</dc:creator><dc:date>2019-03-28T14:30:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/28/red-hat-enterprise-linux-8-image-builder-building-custom-system-images/</feedburner:origLink></entry><entry><title>Red Hat AMQ 6.3 on OpenShift: Set up, connect SSL client, and configure logging</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/b-nt6x3ry7s/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="jboss a-mq" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat AMQ" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><author><name>Chandra Shekhar Pandey</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_amq_6_3_on_openshift_set_up_connect_ssl_client_and_configure_logging</id><updated>2019-03-28T07:05:13Z</updated><published>2019-03-28T07:05:13Z</published><content type="html">&lt;p&gt;In this article, we will discuss how to set up &lt;a href="https://developers.redhat.com/products/amq/overview"&gt;Red Hat AMQ&lt;/a&gt; 6.3 on &lt;a href="http://openshift.com/"&gt;OpenShift&lt;/a&gt;. We will also set up an external Camel-based SSL client to connect to AMQ Broker, a pure-&lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; multiprotocol message broker.&lt;/p&gt; &lt;p&gt;By using the procedures in this article, you can easily set up the broker in your OpenShift environment and also set up a Camel-based client to quickly produce and consume messages. Also, you can change the log level to get verbose logs, thus getting a better understanding of the complete setup.&lt;/p&gt; &lt;p&gt;I recommend using a source-to-image (s2i) approach for deploying Red Hat AMQ 6.x on OpenShift, but if you do not use an s2i  approach, this article will help you to configure logging to get verbose logs.  Note that the Red Hat AMQ image used here is ephemeral; it doesn&amp;#8217;t support persistence.&lt;/p&gt; &lt;p&gt;&lt;span id="more-558497"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;A. Generate the keystore and truststore&lt;/h2&gt; &lt;p&gt;1. First, we have to generate the keystore and truststore.&lt;/p&gt; &lt;pre&gt;[cpandey@cpandey certificate_amq_15Feb]$ keytool -genkey -alias mydomain -keyalg RSA -keystore keystore.jks -keysize 2048 [cpandey@cpandey certificate_amq_15Feb]$ keytool -export -alias mydomain -file mydomain.crt -keystore keystore.jks [cpandey@cpandey certificate_amq_15Feb]$ keytool -import -trustcacerts -alias mydomain -file mydomain.crt -keystore clientkeystore.jks &lt;/pre&gt; &lt;p&gt;2. Add &lt;code&gt;keystore.jks&lt;/code&gt; as a secret.&lt;/p&gt; &lt;pre&gt;[cpandey@cpandey certificate_amq_15Feb]$ oc login https://openshift.cpandey.lab.pnq2.cee.redhat.com:443 -u username -p password [cpandey@cpandey certificate_amq_15Feb]$ echo '{"kind": "ServiceAccount", "apiVersion": "v1", "metadata": {"name": "amq-service-account"}}' | oc create -f - [cpandey@cpandey certificate_amq_15Feb]$ oc policy add-role-to-user view system:serviceaccount:amq-demo:amq-service-account [cpandey@cpandey certificate_amq_15Feb]$ oc secrets new amq-app-secret keystore.jks [cpandey@cpandey certificate_amq_15Feb]$ oc secrets add sa/amq-service-account secret/amq-app-secret &lt;/pre&gt; &lt;h2&gt;B. Set up the broker&lt;/h2&gt; &lt;p&gt;1. The OpenShift GUI can be used for the broker setup. I used template  &lt;code&gt;JBoss A-MQ 6.3 (Ephemeral with SSL)&lt;/code&gt; from the catalog. The following four images show the information I had to fill in for the broker setup.&lt;/p&gt; &lt;div id="attachment_562577" style="width: 903px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_1.png"&gt;&lt;img aria-describedby="caption-attachment-562577" class="wp-image-562577 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_1.png" alt="Image 1" width="893" height="658" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_1.png 893w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_1-300x221.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_1-768x566.png 768w" sizes="(max-width: 893px) 100vw, 893px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-562577" class="wp-caption-text"&gt;Image 1&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_562587" style="width: 890px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_2.png"&gt;&lt;img aria-describedby="caption-attachment-562587" class="wp-image-562587 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_2.png" alt="Image 2" width="880" height="669" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_2.png 880w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_2-300x228.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_2-768x584.png 768w" sizes="(max-width: 880px) 100vw, 880px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-562587" class="wp-caption-text"&gt;Image 2&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_562607" style="width: 891px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMG_3.png"&gt;&lt;img aria-describedby="caption-attachment-562607" class="wp-image-562607 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMG_3.png" alt="Image 3" width="881" height="653" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMG_3.png 881w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMG_3-300x222.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMG_3-768x569.png 768w" sizes="(max-width: 881px) 100vw, 881px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-562607" class="wp-caption-text"&gt;Image 3&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_562597" style="width: 896px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_4.png"&gt;&lt;img aria-describedby="caption-attachment-562597" class="wp-image-562597 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_4.png" alt="Image 4" width="886" height="655" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_4.png 886w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_4-300x222.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/BROKER_IMAGE_4-768x568.png 768w" sizes="(max-width: 886px) 100vw, 886px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-562597" class="wp-caption-text"&gt;Image 4&lt;/p&gt;&lt;/div&gt; &lt;p&gt;2. If everything goes well, we will have a pod that was created and is in the running state and services will also be visible and accessible.&lt;/p&gt; &lt;pre&gt;[cpandey@cpandey certificate_amq_15Feb]$ oc get pod|grep broker123 broker123-amq-1-pl8lb 1/1 Running 0 2m [cpandey@cpandey certificate_amq_15Feb]$ oc get service |grep broker123 broker123-amq-amqp ClusterIP 172.30.187.55 none 5672/TCP 2m broker123-amq-amqp-ssl ClusterIP 172.30.84.222 none 5671/TCP 2m broker123-amq-mesh ClusterIP None none 61616/TCP 2m broker123-amq-mqtt ClusterIP 172.30.172.5 none 1883/TCP 2m broker123-amq-mqtt-ssl ClusterIP 172.30.245.237 none 8883/TCP 2m broker123-amq-stomp ClusterIP 172.30.172.21 none 61613/TCP 2m broker123-amq-stomp-ssl ClusterIP 172.30.177.0 none 61612/TCP 2m broker123-amq-tcp ClusterIP 172.30.222.183 none 61616/TCP 2m broker123-amq-tcp-ssl ClusterIP 172.30.215.39 none 61617/TCP 2m &lt;/pre&gt; &lt;h2&gt;C. Set up an SSL Camel-based client&lt;/h2&gt; &lt;p&gt;1. To access the broker externally, an OpenShift route is required. You can create a route using the following command:&lt;/p&gt; &lt;pre&gt;[cpandey@cpandey certificate_amq_15Feb]$ oc create route passthrough --service broker123-amq-tcp-ssl [cpandey@cpandey certificate_amq_15Feb]$ oc get route|grep broker123 broker123-amq-tcp-ssl broker123-amq-tcp-ssl-amq-demo.apps.cpandey.lab.pnq2.cee.redhat.com broker123-amq-tcp-ssl all passthrough None &lt;/pre&gt; &lt;p&gt;2. Once you have route, you can use my &lt;a href="https://github.com/1984shekhar/fuse-examples-6.3/blob/master/openshift_transacted_activemq_camel_ssl/src/main/resources/OSGI-INF/blueprint/blueprint.xml"&gt;GitHub code&lt;/a&gt; as a client to test broker.&lt;br /&gt; The first message would fail, because there is an exception thrown explicitly and that route will try to redeliver the message 6 times. This message will be in dead letter queue (DLQ), which will be automatically created.&lt;/p&gt; &lt;p&gt;3. The next step is to get more-verbose logs for better analysis of runtime issues. It is always recommended to use an s2i approach for configuration, so I created a &lt;code&gt;log4j.properties&lt;/code&gt; file with following content. The content here is copied from the &lt;code&gt;log4j.properties&lt;/code&gt; file from the &lt;code&gt;/opt/amq/conf/&lt;/code&gt; directory of the broker pod, and I changed only the first few lines of the configuration so that it won&amp;#8217;t impact other default logging. For more information, check the default &lt;code&gt;log4j.properties&lt;/code&gt; of the pod at &lt;code&gt;/opt/amq/conf&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;log4j.rootLogger=DEBUG, logfile, console # Or for more fine grained debug logging uncomment one of these log4j.logger.org.apache.activemq=DEBUG log4j.logger.org.apache.camel=DEBUG # Console appender log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d | %5p | %m%n log4j.appender.console.threshold=INFO # File appender log4j.appender.logfile=org.apache.log4j.RollingFileAppender log4j.appender.logfile.file=${activemq.base}/data/activemq.log log4j.appender.logfile.maxFileSize=1024KB log4j.appender.logfile.maxBackupIndex=5 log4j.appender.logfile.append=true log4j.appender.logfile.layout=org.apache.log4j.PatternLayout log4j.appender.logfile.layout.ConversionPattern=%d | %-5p | %m | %c | %t%n log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer ########### # Audit log ########### log4j.additivity.org.apache.activemq.audit=false log4j.logger.org.apache.activemq.audit=INFO, audit log4j.appender.audit=org.apache.log4j.RollingFileAppender log4j.appender.audit.file=${activemq.base}/data/audit.log log4j.appender.audit.maxFileSize=1024KB log4j.appender.audit.maxBackupIndex=5 log4j.appender.audit.append=true log4j.appender.audit.layout=org.apache.log4j.PatternLayout log4j.appender.audit.layout.ConversionPattern=%-5p | %m | %t%n &lt;/pre&gt; &lt;h2&gt;D. Change the log level to the debug mode of the broker&lt;/h2&gt; &lt;p&gt;1. Create &lt;strong&gt;&lt;code&gt;ConfigMap&lt;/code&gt;&lt;/strong&gt; to load the &lt;code&gt;log4j.properties&lt;/code&gt; file.&lt;/p&gt; &lt;pre&gt;[cpandey@cpandey certificate_amq_15Feb]$ oc create configmap logconfig --from-file=./log4j.properties &lt;/pre&gt; &lt;p&gt;2. Modify the deployment configuration with a subpath so that we only mount &lt;code&gt;log4j.properties&lt;/code&gt; at location &lt;code&gt;/opt/amq/conf&lt;/code&gt; and leave the other configuration file intact. Edit the deployment configuration using the command shown below and append &lt;code&gt;volumeMounts&lt;/code&gt; and &lt;code&gt;volume&lt;/code&gt; entries in the deployment configuration. We can edit the deployment config from the OpenShift GUI console too.&lt;/p&gt; &lt;div id="attachment_562617" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Broker_IMG5.png"&gt;&lt;img aria-describedby="caption-attachment-562617" class="wp-image-562617 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Broker_IMG5-300x184.png" alt="The mount configuration" width="300" height="184" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Broker_IMG5-300x184.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Broker_IMG5-768x470.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Broker_IMG5.png 836w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-562617" class="wp-caption-text"&gt;The mount configuration&lt;/p&gt;&lt;/div&gt; &lt;p&gt;That&amp;#8217;s it; happy integration! I hope this article helps you to have a basic understanding of a standalone AMQ 6.x setup on OpenShift, how to set up SSL clients to connect the broker, and how to configure a debug-level log configuration to have more verbose logging so you can analyze runtime issues. This configuration can also be used to modify other broker configuration files.&lt;/p&gt; &lt;p&gt;Here are other Red Hat AMQ articles that you might find helpful:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/21/setup-ldap-auth-amq-console/"&gt;How to set up LDAP authentication for the Red Hat AMQ 7 message broker console&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/06/setting-up-rbac-on-red-hat-amq-broker/"&gt;Setting up RBAC on Red Hat AMQ Broker&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/17/scaling-amq-7-brokers-with-amq-interconnect/"&gt;Scaling AMQ 7 Brokers with AMQ Interconnect&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/04/25/automating-amq-7-high-availability-deployment/"&gt;Automating AMQ 7 High Availability Deployment&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#38;linkname=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F28%2Fred-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging%2F&amp;#038;title=Red%20Hat%20AMQ%206.3%20on%20OpenShift%3A%20Set%20up%2C%20connect%20SSL%20client%2C%20and%20configure%20logging" data-a2a-url="https://developers.redhat.com/blog/2019/03/28/red-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging/" data-a2a-title="Red Hat AMQ 6.3 on OpenShift: Set up, connect SSL client, and configure logging"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/28/red-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging/"&gt;Red Hat AMQ 6.3 on OpenShift: Set up, connect SSL client, and configure logging&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/b-nt6x3ry7s" height="1" width="1" alt=""/&gt;</content><summary>In this article, we will discuss how to set up Red Hat AMQ 6.3 on OpenShift. We will also set up an external Camel-based SSL client to connect to AMQ Broker, a pure-Java multiprotocol message broker. By using the procedures in this article, you can easily set up the broker in your OpenShift environment and also set up a Camel-based client to quickly produce and consume messages. Also, you can chan...</summary><dc:creator>Chandra Shekhar Pandey</dc:creator><dc:date>2019-03-28T07:05:13Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/28/red-hat-amq-6-3-on-openshift-set-up-connect-ssl-client-and-configure-logging/</feedburner:origLink></entry><entry><title>Adventures in GraalVM: polyglot Camel (k) native routes with Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OWvaJlUdc0A/Adventures-in-GraalVM-polyglot-Camel-k-native-routes-with-Quarkus.html" /><category term="Camel" scheme="searchisko:content:tags" /><category term="feed_group_name_fusesource" scheme="searchisko:content:tags" /><category term="feed_name_lburgazzoli" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="jboss-fuse" scheme="searchisko:content:tags" /><category term="scripting" scheme="searchisko:content:tags" /><author><name>Luca Burgazzoli</name></author><id>searchisko:content:id:jbossorg_blog-adventures_in_graalvm_polyglot_camel_k_native_routes_with_quarkus</id><updated>2019-03-28T00:00:00Z</updated><published>2019-03-28T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The last blog i wrote&lt;sup class="footnote"&gt;[&lt;a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote."&gt;1&lt;/a&gt;]&lt;/sup&gt; was about running integration code written in JavaScript from a Camel application compiled as native executable using SubstrateVM (part of the GraalVM project).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_has_something_happen_since_then"&gt;Has something happen since then ?&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;I would say yes:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://github.com/apache/camel-k"&gt;Camel K&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://quarkus.io"&gt;Quarkus&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Camel 3 development has finally started&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As I&amp;#8217;m involved in all the projects above, let see how they can play togheter to deliver a truly amazing cloud native experience.&lt;/p&gt; &lt;/div&gt; &lt;div class="admonitionblock caution"&gt; &lt;table&gt; &lt;tr&gt; &lt;td class="icon"&gt; &lt;i class="fa icon-caution" title="Caution"&gt;&lt;/i&gt; &lt;/td&gt; &lt;td class="content"&gt; this post is based on code not yet merged in the upstream repository and subject to change &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_bring_some_quarkus_to_camel_k"&gt;Bring some Quarkus to Camel K&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Quarkus provides some initial support&lt;sup class="footnote"&gt;[&lt;a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote."&gt;2&lt;/a&gt;]&lt;/sup&gt; for Camel through dedicated extensions that:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;perform most of the steps needed to initialize a CamelContext instance at build time so as example, components, languages and data-formats are discovered and loaded into the registry when the build runs so Camel does not need to spend any time resolving and instantiating the related classes at run time&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;provided SubstrateVM "hacks" to let Camel based appication to compile against Graal/SubstrateVM.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Quarkus supports CDI which let us use CDI annotations to obtain a reference to a bean holding optimized Camel bits and to adapt quarked Camel lifecycle events to Camel K lifecycle:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@ApplicationScoped public class CamelKApplication { @Inject CamelRuntime runtime; List&amp;#60;Listener&amp;#62; listeners = new ArrayList&amp;#60;&amp;#62;(); public void initializing(@Observes InitializingEvent event) { listeners.forEach(l -&amp;#62; l.accept(Phase.ConfigureContext, this)); listeners.forEach(l -&amp;#62; l.accept(Phase.ConfigureRoutes, this)); } public void starting(@Observes StartingEvent event) { listeners.forEach(l -&amp;#62; l.accept(Phase.Starting, this)); } public void started(@Observes StartedEvent event) { listeners.forEach(l -&amp;#62; l.accept(Phase.Started, this)); } public void stopping(@Observes StoppingEvent event) { listeners.forEach(l -&amp;#62; l.accept(Phase.Stopping, this)); } public void stopped(@Observes StoppedEvent event) { listeners.forEach(l -&amp;#62; l.accept(Phase.Stopped, this)); } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As we want to be able to run our code as native binary we also need to create a Camel K extension for Quarkus&lt;sup class="footnote"&gt;[&lt;a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote."&gt;3&lt;/a&gt;]&lt;/sup&gt; that can instruct it about what it is needed for Camel K to properly build and run with SubstrateVM.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The minimum requirement is to make the services Camel K relies on available when running in native mode:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;public class CamelQuarkusProcessor { @BuildStep void processServices( BuildProducer&amp;#60;ServiceProviderBuildItem&amp;#62; serviceProvider, CombinedIndexBuildItem combinedIndexBuildItem) { IndexView view = combinedIndexBuildItem.getIndex(); &lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; String type = "org.apache.camel.k.Runtime$Listener"; view.getAllKnownImplementors(DotName.createSimple(type)).forEach(i-&amp;#62; { serviceProvider.produce( new ServiceProviderBuildItem( type, i.name().toString()) ); }); &lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; } }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="colist arabic"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt; &lt;td&gt;Leverage &lt;a href="https://github.com/wildfly/jandex"&gt;Jandex&lt;/a&gt; for efficient metadata indexing and lookup&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt; &lt;td&gt;Instruct Quarkus about concrete service provider needed ar runtime&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We also want to make our application polyglot so we can add support for JavaScript through Graal JS&lt;sup class="footnote"&gt;[&lt;a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote."&gt;4&lt;/a&gt;]&lt;/sup&gt; and to do that in a previous release of GrallVM&lt;sup class="footnote"&gt;[&lt;a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote."&gt;5&lt;/a&gt;]&lt;/sup&gt; I had to implment some proxy classes to support reflective access from JavaScript back to Java but as of GraalVM RC13&lt;sup class="footnote"&gt;[&lt;a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote."&gt;6&lt;/a&gt;]&lt;/sup&gt;, this is not more needed and instead we only need to list the impacted classed among those that need to be accessed reflectively.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In Quarkus this can be done through a dedicate BuildProducer:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;public class CamelQuarkusProcessor { @BuildStep void processReflectiveClasses( BuildProducer&amp;#60;ReflectiveClassBuildItem&amp;#62; reflectiveClass, CombinedIndexBuildItem combinedIndexBuildItem) { reflectiveClass.produce( new ReflectiveClassBuildItem( true, false, "org.apache.camel.builder.ExpressionClause", "org.apache.camel.model.FromDefinition", "org.apache.camel.model.ProcessDefinition", "org.apache.camel.model.ProcessorDefinition", "org.apache.camel.model.RouteDefinition", "org.apache.camel.model.ToDefinition", "org.apache.camel.model.language.ExpressionDefinition", "org.apache.camel.spi.ExchangeFormatter") ); }&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_run_it"&gt;Run it&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The first test we can do is ot run our application in JVM mode so let&amp;#8217;s write a simple JavaScript route:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code class="language-js" data-lang="js"&gt;from('timer:js?period=1s') .setBody() .simple('Hello Camel K from ${routeId}') .to('log:info?multiline=true')&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;An run it:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code&gt;07:10:04,587 INFO Adding listener: class org.apache.camel.k.listener.ContextConfigurer 07:10:04,598 INFO Adding listener: class org.apache.camel.k.listener.ContextLifecycleConfigurer 07:10:04,599 INFO Adding listener: class org.apache.camel.k.listener.RoutesConfigurer 07:10:04,600 INFO Adding listener: class org.apache.camel.k.listener.RoutesDumper 07:10:04,651 INFO Type converters loaded (core: 183, classpath: 14) 07:10:04,662 INFO Creating interface org.apache.camel.spi.Language for name simple 07:10:04,662 INFO Binding language simple with prefix camel.language.simple 07:10:04,683 INFO Loading routes from: file:simple.js with loader: class org.apache.camel.k.loader.js.graal.GraalJavaScriptLoader 07:10:05,257 INFO No xml routes configured 07:10:05,291 INFO Creating interface org.apache.camel.Component for name timer 07:10:05,291 INFO Binding component timer with prefix camel.component.timer 07:10:05,313 INFO Creating interface org.apache.camel.Component for name log 07:10:05,314 INFO Binding component log with prefix camel.component.log 07:10:05,322 INFO Apache Camel 3.0.0-M2 (CamelContext: quarkus-camel-k) is starting 07:10:05,323 INFO Apache Camel 3.0.0-M2 (CamelContext: quarkus-camel-k) is starting 07:10:05,324 INFO JMX is disabled 07:10:05,329 INFO StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html 07:10:05,337 INFO Route: js started and consuming from: timer://js?period=1s 07:10:05,338 INFO Total 1 routes, of which 1 are started 07:10:05,339 INFO Apache Camel 3.0.0-M2 (CamelContext: quarkus-camel-k) started in 0.015 seconds &lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; 07:10:05,345 INFO Quarkus 999-SNAPSHOT started in 1.102s. &lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; 07:10:05,347 INFO Installed features: [camel-core, cdi] 07:10:06,386 INFO Exchange[ , ExchangePattern: InOnly , BodyType: String , Body: Hello Camel K from js ] 07:10:07,340 INFO Exchange[ , ExchangePattern: InOnly , BodyType: String , Body: Hello Camel K from js ]&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="colist arabic"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt; &lt;td&gt;the camel context starts in 15ms&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt; &lt;td&gt;the whole process takes around 1s to start&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Let&amp;#8217;s now run the same application compiled as native binary through SubstrateVM&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="highlight"&gt;&lt;code&gt;07:24:33,704 INFO Adding listener: class org.apache.camel.k.listener.ContextConfigurer 07:24:33,705 INFO Adding listener: class org.apache.camel.k.listener.ContextLifecycleConfigurer 07:24:33,705 INFO Adding listener: class org.apache.camel.k.listener.RoutesConfigurer 07:24:33,705 INFO Adding listener: class org.apache.camel.k.listener.RoutesDumper 07:24:33,707 INFO Type converters loaded (core: 183, classpath: 0) 07:24:33,708 INFO Creating interface org.apache.camel.spi.Language for name simple 07:24:33,708 INFO Binding language simple with prefix camel.language.simple 07:24:33,709 INFO Loading routes from: file:simple.js with loader: class org.apache.camel.k.loader.js.graal.GraalJavaScriptLoader 07:24:33,715 INFO No xml routes configured 07:24:33,715 INFO Creating interface org.apache.camel.Component for name timer 07:24:33,715 INFO Binding component timer with prefix camel.component.timer 07:24:33,717 INFO Creating interface org.apache.camel.Component for name log 07:24:33,717 INFO Binding component log with prefix camel.component.log 07:24:33,718 INFO Apache Camel (CamelContext: camel-1) is starting 07:24:33,718 INFO Apache Camel (CamelContext: camel-1) is starting 07:24:33,718 INFO JMX is disabled 07:24:33,718 INFO StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html 07:24:33,719 INFO Route: js started and consuming from: timer://js?period=1s 07:24:33,719 INFO Total 1 routes, of which 1 are started 07:24:33,719 INFO Apache Camel (CamelContext: camel-1) started in 0.001 seconds &lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; 07:24:33,719 INFO Quarkus 999-SNAPSHOT started in 0.019s. &lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; 07:24:33,719 INFO Installed features: [camel-core, cdi] 07:24:34,720 INFO Exchange[ , ExchangePattern: InOnly , BodyType: String , Body: Hello Camel K from js ] 07:24:35,719 INFO Exchange[ , ExchangePattern: InOnly , BodyType: String , Body: Hello Camel K from js ]&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="colist arabic"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt; &lt;td&gt;the camel context starts in 1ms&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt; &lt;td&gt;the whole process takes around 20ms to start&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Finaly we can run it on kubernetes with Camel K&lt;/p&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="https://lburgazzoli.github.io/images/camel-k-M2-native-js.gif" alt="camel k M2 native js"&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_final_notes"&gt;Final Notes&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Camel extension provided by Quarkus are also able to optimize routes at build time but in Camel K we do not use such feature as we want to re-use pre built Integration Contexts (including native ones) as much as possible&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As stated at the beginning this blog is based on code not yet merged in the related upstream projects but the result are already quite promising so stay tuned for more updates to come.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id="footnotes"&gt; &lt;hr&gt; &lt;div class="footnote" id="_footnote_1"&gt; &lt;a href="#_footnoteref_1"&gt;1&lt;/a&gt;. &lt;a href="https://lburgazzoli.github.io/2018/09/04/Adventures-in-GraalVM-polyglot-Camel-routes-with-native-image.html" class="bare"&gt;https://lburgazzoli.github.io/2018/09/04/Adventures-in-GraalVM-polyglot-Camel-routes-with-native-image.html&lt;/a&gt; &lt;/div&gt; &lt;div class="footnote" id="_footnote_2"&gt; &lt;a href="#_footnoteref_2"&gt;2&lt;/a&gt;. &lt;a href="https://quarkus.io/extensions/#integration" class="bare"&gt;https://quarkus.io/extensions/#integration&lt;/a&gt; &lt;/div&gt; &lt;div class="footnote" id="_footnote_3"&gt; &lt;a href="#_footnoteref_3"&gt;3&lt;/a&gt;. &lt;a href="https://quarkus.io/guides/extension-authors-guide" class="bare"&gt;https://quarkus.io/guides/extension-authors-guide&lt;/a&gt; &lt;/div&gt; &lt;div class="footnote" id="_footnote_4"&gt; &lt;a href="#_footnoteref_4"&gt;4&lt;/a&gt;. &lt;a href="https://www.graalvm.org/docs/reference-manual/languages/jvm/" class="bare"&gt;https://www.graalvm.org/docs/reference-manual/languages/jvm/&lt;/a&gt; &lt;/div&gt; &lt;div class="footnote" id="_footnote_5"&gt; &lt;a href="#_footnoteref_5"&gt;5&lt;/a&gt;. &lt;a href="https://lburgazzoli.github.io/2018/09/04/Adventures-in-GraalVM-polyglot-Camel-routes-with-native-image.html" class="bare"&gt;https://lburgazzoli.github.io/2018/09/04/Adventures-in-GraalVM-polyglot-Camel-routes-with-native-image.html&lt;/a&gt; &lt;/div&gt; &lt;div class="footnote" id="_footnote_6"&gt; &lt;a href="#_footnoteref_6"&gt;6&lt;/a&gt;. &lt;a href="https://github.com/graalvm/graaljs/blob/master/CHANGELOG.md#version-100-rc13" class="bare"&gt;https://github.com/graalvm/graaljs/blob/master/CHANGELOG.md#version-100-rc13&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OWvaJlUdc0A" height="1" width="1" alt=""/&gt;</content><summary>The last blog i wrote[1] was about running integration code written in JavaScript from a Camel application compiled as native executable using SubstrateVM (part of the GraalVM project). Has something happen since then ? I would say yes: Camel K Quarkus Camel 3 development has finally started As I’m involved in all the projects above, let see how they can play togheter to deliver a truly amazing cl...</summary><dc:creator>Luca Burgazzoli</dc:creator><dc:date>2019-03-28T00:00:00Z</dc:date><feedburner:origLink>https://lburgazzoli.github.io/2019/03/28/Adventures-in-GraalVM-polyglot-Camel-k-native-routes-with-Quarkus.html</feedburner:origLink></entry><entry><title>A platform interface for the GNU C Library</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/_axe98u2pMw/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="compilers" scheme="searchisko:content:tags" /><category term="fedora" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="glibc" scheme="searchisko:content:tags" /><category term="kernel" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat Software Collections" scheme="searchisko:content:tags" /><category term="toolchain" scheme="searchisko:content:tags" /><author><name>Carlos O'Donell</name></author><id>searchisko:content:id:jbossorg_blog-a_platform_interface_for_the_gnu_c_library</id><updated>2019-03-27T15:03:37Z</updated><published>2019-03-27T15:03:37Z</published><content type="html">&lt;p&gt;Application developers continue to need newer versions of libraries, including core runtimes like GNU C Library (glibc), for their applications. In this article, I&amp;#8217;ll look at some issues related to upgrading glibc in an operating system (OS) distribution, and I also encourage you to read &lt;a href="https://developers.redhat.com/blog/2016/02/17/upgrading-the-gnu-c-library-within-red-hat-enterprise-linux/"&gt;Florian Weimer&amp;#8217;s excellent blog post on the topic&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;The problem&lt;/h2&gt; &lt;p&gt;Deciding between a library rebase or continued backporting of commits involves a complex set of risks and rewards. For some customers and users, it is important not to rebase the library (ensuring the lowest risk of impact by change); but for others, the rebase brings valuable bug fixes (lowest risk of impact from known issues). In other cases, the newer library may perform better, even if the interfaces haven&amp;#8217;t changed, because it can take advantage of newer hardware or a newer Linux kernel (performance advantage to first mover).&lt;/p&gt; &lt;p&gt;There is no way to simultaneously satisfy all the requirements of slow-moving versus fast-moving development. The recent work in &lt;a href="https://docs.fedoraproject.org/en-US/modularity/"&gt;Fedora Modularity&lt;/a&gt; is aimed at solving the root of this problem, but there is a limit to this work. The further down the stack you go, the harder the problem becomes. The potential for breakage further up the stack increases. You can&amp;#8217;t always arbitrarily change a component&amp;#8217;s installed version without consequences, either at build time or at runtime.&lt;/p&gt; &lt;p&gt;&lt;span id="more-477537"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The solution&lt;/h2&gt; &lt;p&gt;What if the reward for the customer or user outweighed the risk? How would we deploy a rebased glibc (which is Florian&amp;#8217;s identified conceptually simplest option)? How could we mitigate some of the worst problems?&lt;/p&gt; &lt;p&gt;We can break down a possible solution like this:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Delivering a new glibc.&lt;/li&gt; &lt;li&gt;Build time isolation.&lt;/li&gt; &lt;li&gt;Choosing to override the system glibc for the system or for an application.&lt;/li&gt; &lt;li&gt;Validation and verification of a system with a new glibc.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;For each step, I&amp;#8217;ll discuss how to reduce or mitigate the problems introduced by the rebase.&lt;/p&gt; &lt;h2&gt;Delivering a new glibc&lt;/h2&gt; &lt;p&gt;Fundamentally, the simplest solution is to rebase the entire library and accept the consequences. With modularity, we have the ability to deliver an alternate version of the library in a distinct rpm repository. Specific users can enable those repositories if they evaluate the risk vs. reward to be worthwhile. Without modularity, we can use software collections or an alternative package name (e.g., glibc-alt).&lt;/p&gt; &lt;p&gt;The straightforward answer is that a combination of modularity and alternative package names provides a robust solution. We have to install the entirely new glibc under a distinct path, for example, something like /opt/glibc/2.29, and symlinks to /opt/glibc/latest and a special /opt/glibc/release. That&amp;#8217;s it, we have a new glibc that doesn&amp;#8217;t impact the running system in any way.&lt;/p&gt; &lt;p&gt;Next, I&amp;#8217;ll talk about how to use it.&lt;/p&gt; &lt;h2&gt;Build time isolation&lt;/h2&gt; &lt;p&gt;What is installed in the /opt/glibc/release? The exact set of headers and libraries that are part of the distribution release all in the form of an alternative system root. This is called a &amp;#8220;sysroot&amp;#8221; in toolchain terminology, and you can point your compiler and linker at it with &lt;code&gt;--sysroot&lt;/code&gt; and that path can be used in preference to compile an application (including the use of &lt;code&gt;-Wl,-rpath&lt;/code&gt; and &lt;code&gt;-Wl,--dynamic-linker&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;A more straightforward name for the sysroot would be &amp;#8220;platform interface for glibc,&amp;#8221; which I discuss &lt;a href="https://fedoraproject.org/wiki/PlatformInterface"&gt;here in some detail&lt;/a&gt;. In this case, the /opt/glibc/release sysroot would be used as the default system sysroot, or we would create a symlink tree into it. The point is that you always compile against the &amp;#8220;released&amp;#8221; version of the libraries for the distribution.&lt;/p&gt; &lt;p&gt;No matter how many newer versions of the libraries you have installed in /opt/glibc, there is always a /opt/glibc/release that is the default sysroot for compiling applications. This approach mitigates one of the potential problems in a rebase, namely applications no longer compiling when an interface they depended upon is deprecated. The /opt/glibc/release sysroot will not deprecate any interfaces in the lifetime of the distribution release.&lt;/p&gt; &lt;p&gt;How then can we take advantage of the new glibc?&lt;/p&gt; &lt;h2&gt;Overriding the system glibc&lt;/h2&gt; &lt;p&gt;You can now have multiple versions of glibc installed in the distribution with the default being /opt/glibc/release. You also have two options, both of which are discussed in Florian&amp;#8217;s article, and we can realize them here.&lt;/p&gt; &lt;p&gt;You could compile your application specifically against /opt/glibc/2.29 and forever link against glibc 2.29. There are support implications for this approach, however, because glibc 2.29 may have limited support. Under the hood at this point, the system glibc runtimes are likely a symlink into /opt/glibc/release, which provides system glibc libraries.&lt;/p&gt; &lt;p&gt;What if it is valuable enough for you to change one system, or one container, to use the new glibc? If you have identified a benefit, then it is valuable to allow an alternatives-like selection scheme where one symlink can be changed to switch the system between /opt/glibc/release and /opt/glibc/latest (or some other specific version), but only for the runtime components, that is, shared library SONAMEs (not the glibc-devel symlinks which still point to /opt/glibc/release). With a quick switch of &lt;code&gt;alternatives --set&lt;/code&gt;, you would be running all new processes with the new runtime. The point is that the developer makes the choice.&lt;/p&gt; &lt;p&gt;The consequence is that rebasing glibc has validation implications for the rest of the software stack.&lt;/p&gt; &lt;h2&gt;Validation and verification of a new system glibc&lt;/h2&gt; &lt;p&gt;How do you quantify the risk of supporting a glibc rebase in a distribution? The only way is to actually do it and measure the failures. There is no other way short of modeling risk, but even a model without data is only estimation based on other measured failures. We have to embark on a rebase of glibc in the distribution to gain this experience, and hopefully get additional benefit. Interestingly, there is already a similar solution from the Fedora kernel.&lt;/p&gt; &lt;p&gt;The Fedora kernel team rebases the kernel used in all active Fedora releases following a staggered delivery approach. The same approach for specific glibc versions could allow us to gather significant experience doing a glibc rebase in the distribution. Keep in mind that we already do this in Fedora Rawhide, which keeps rolling in new glibc all the time. The point here would be to update active Fedora releases with a new stabilized version of glibc. For example, Fedora 29 with glibc 2.28 has been out for a while accumulating bug fixes and CVE fixes. Eventually, it will be beneficial to switch Fedora 28 and Fedora 27 to glibc 2.28 and provide all three active distributions with one updated and refreshed glibc, while Fedora 27 and 28 would continue to use their default /opt/glibc/release sysroot to isolate build-time changes from those packages and users.&lt;/p&gt; &lt;h2&gt;First steps&lt;/h2&gt; &lt;p&gt;In Fedora Rawhide, I have already added the required code to move glibc into a sysroot location. Similarly, Nick Clifton has also enabled full &lt;code&gt;--sysroot&lt;/code&gt; support in the Fedora binutils packages (something we didn&amp;#8217;t have enabled before). What really needs to follow is the validation and verification of a new glibc. We need to accumulate the experience of doing these rebases, including the experience of knowing what not to do. If we can&amp;#8217;t do the release rebases, then it will be difficult to support an alternative glibc. For example, we need to thoroughly test the deployment with symlinks and alternatives for switching glibc during an upgrade.&lt;/p&gt; &lt;p&gt;I look forward to following in the Fedora Linux kernel team&amp;#8217;s footsteps. Attempting a stabilized rebase of glibc will provide our users with faster access to bug fixes and CVE fixes. It will also give the Fedora glibc team the much-needed experience to tackle future rebases. The consequence of this experience will have long-reaching benefits.&lt;/p&gt; &lt;p&gt;One day, perhaps we can enable entirely new glibc on later Fedora as a developer option!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#38;linkname=A%20platform%20interface%20for%20the%20GNU%20C%20Library" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fa-platform-interface-for-the-gnu-c-library%2F&amp;#038;title=A%20platform%20interface%20for%20the%20GNU%20C%20Library" data-a2a-url="https://developers.redhat.com/blog/2019/03/27/a-platform-interface-for-the-gnu-c-library/" data-a2a-title="A platform interface for the GNU C Library"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/27/a-platform-interface-for-the-gnu-c-library/"&gt;A platform interface for the GNU C Library&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/_axe98u2pMw" height="1" width="1" alt=""/&gt;</content><summary>Application developers continue to need newer versions of libraries, including core runtimes like GNU C Library (glibc), for their applications. In this article, I’ll look at some issues related to upgrading glibc in an operating system (OS) distribution, and I also encourage you to read Florian Weimer’s excellent blog post on the topic. The problem Deciding between a library rebase or continued b...</summary><dc:creator>Carlos O'Donell</dc:creator><dc:date>2019-03-27T15:03:37Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/27/a-platform-interface-for-the-gnu-c-library/</feedburner:origLink></entry><entry><title>An introduction to Linux virtual interfaces: Tunnels</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YzijAYPeaUU/" /><category term="community" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><author><name>Hangbin Liu</name></author><id>searchisko:content:id:jbossorg_blog-an_introduction_to_linux_virtual_interfaces_tunnels</id><updated>2019-03-27T07:00:27Z</updated><published>2019-03-27T07:00:27Z</published><content type="html">&lt;p&gt;Linux has supported many kinds of tunnels, but new users may be confused by their differences and unsure which one is best suited for a given use case. In this article, I will give a brief introduction for commonly used tunnel interfaces in the Linux kernel. There is no code analysis, only a brief introduction to the interfaces and their usage on Linux. Anyone with a network background might be interested in this information. A list of tunnel interfaces, as well as help on specific tunnel configuration, can be obtained by issuing the iproute2 command &lt;code&gt;ip link help&lt;/code&gt;.&lt;br /&gt; &lt;span id="more-575967"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;This post covers the following frequently used interfaces:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#ipip"&gt;IPIP Tunnel&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#sit"&gt;SIT Tunnel&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#ip6tnl"&gt;ip6tnl Tunnel&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#vit"&gt;VTI and VTI6&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#gre"&gt;GRE and GRETAP&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#gre6"&gt;GRE6 and GRE6TAP&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#fou"&gt;FOU&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#gue"&gt;GUE&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#geneve"&gt;GENEVE&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#erspan"&gt;ERSPAN and IP6ERSPAN&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After reading this article, you will know what these interfaces are, the differences between them, when to use them, and how to create them.&lt;/p&gt; &lt;h2&gt;&lt;a name="ipip"&gt;&lt;/a&gt;IPIP Tunnel&lt;/h2&gt; &lt;p&gt;IPIP tunnel, just as the name suggests, is an IP over IP tunnel, defined in &lt;a href="https://tools.ietf.org/html/rfc2003" target="_blank" rel="noopener noreferrer"&gt;RFC 2003&lt;/a&gt;. The IPIP tunnel header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576067 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/ipip.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/ipip.png" alt="" width="957" height="94" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/ipip.png 957w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/ipip-300x29.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/ipip-768x75.png 768w" sizes="(max-width: 957px) 100vw, 957px" /&gt;&lt;/p&gt; &lt;p&gt;It&amp;#8217;s typically used to connect two internal IPv4 subnets through public IPv4 internet. It has the lowest overhead but can only transmit IPv4 unicast traffic. That means you &lt;b&gt;cannot&lt;/b&gt; send multicast via IPIP tunnel.&lt;/p&gt; &lt;p&gt;IPIP tunnel supports both IP over IP and MPLS over IP.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: When the &lt;code&gt;ipip&lt;/code&gt; module is loaded, or an IPIP device is created for the first time, the Linux kernel will create a &lt;code&gt;tunl0&lt;/code&gt; default device in each namespace, with attributes &lt;code&gt;local=any&lt;/code&gt; and &lt;code&gt;remote=any&lt;/code&gt;. When receiving IPIP protocol packets, the kernel will forward them to &lt;code&gt;tunl0&lt;/code&gt; as a fallback device if it can&amp;#8217;t find another device whose local/remote attributes match their source or destination address more closely.&lt;/p&gt; &lt;p&gt;Here is how to create an IPIP tunnel:&lt;/p&gt; &lt;pre&gt;On Server A: # ip link add name ipip0 type ipip local remote # ip link set ipip0 up # ip addr add /24 dev ipip0 Add a remote internal subnet route if the endpoints don't belong to the same subnet # ip route add /24 dev ipip0 On Server B: # ip link add name ipip0 type ipip local remote # ip link set ipip0 up # ip addr add /24 dev ipip0 # ip route add /24 dev ipip0 &lt;/pre&gt; &lt;h2&gt;&lt;a name="sit"&gt;&lt;/a&gt;SIT Tunnel&lt;/h2&gt; &lt;p&gt;SIT stands for Simple Internet Transition. The main purpose is to interconnect isolated IPv6 networks, located in global IPv4 internet.&lt;/p&gt; &lt;p&gt;Initially, it only had an IPv6 over IPv4 tunneling mode. After years of development, however, it acquired support for several different modes, such as &lt;code&gt;ipip&lt;/code&gt; (the same with IPIP tunnel), &lt;code&gt;ip6ip&lt;/code&gt;, &lt;code&gt;mplsip&lt;/code&gt;, and &lt;code&gt;any&lt;/code&gt;. Mode &lt;code&gt;any&lt;/code&gt; is used to accept both IP and IPv6 traffic, which may prove useful in some deployments. SIT tunnel also supports &lt;a href="https://www.ietf.org/rfc/rfc4214.txt" target="_blank" rel="noopener noreferrer"&gt;ISATA&lt;/a&gt;, and here is a &lt;a href="http://www.litech.org/isatap" target="_blank" rel="noopener noreferrer"&gt;usage example&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The SIT tunnel header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576077 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/sit.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/sit.png" alt="" width="961" height="96" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/sit.png 961w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/sit-300x30.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/sit-768x77.png 768w" sizes="(max-width: 961px) 100vw, 961px" /&gt;&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;sit&lt;/code&gt; module is loaded, the Linux kernel will create a default device, named &lt;code&gt;sit0&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here is how to create a SIT tunnel:&lt;/p&gt; &lt;pre&gt;On Server A: # ip link add name sit1 type sit local remote mode any # ip link set sit1 up # ip addr add /24 dev sit1 &lt;/pre&gt; &lt;p&gt;Then, perform the same steps on the remote side.&lt;/p&gt; &lt;h2&gt;&lt;a name="ip6tnl"&gt;&lt;/a&gt;ip6tnl Tunnel&lt;/h2&gt; &lt;p&gt;ip6tnl is an IPv4/IPv6 over IPv6 tunnel interface, which looks like an IPv6 version of the SIT tunnel. The tunnel header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576057 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/ip6tnl.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/ip6tnl.png" alt="" width="962" height="100" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/ip6tnl.png 962w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/ip6tnl-300x31.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/ip6tnl-768x80.png 768w" sizes="(max-width: 962px) 100vw, 962px" /&gt;&lt;/p&gt; &lt;p&gt;ip6tnl supports modes &lt;code&gt;ip6ip6&lt;/code&gt;, &lt;code&gt;ipip6&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;.  Mode &lt;code&gt;ipip6&lt;/code&gt; is IPv4 over IPv6, and mode &lt;code&gt;ip6ip6&lt;/code&gt; is IPv6 over IPv6, and mode &lt;code&gt;any&lt;/code&gt; supports both IPv4/IPv6 over IPv6.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;ip6tnl&lt;/code&gt; module is loaded, the Linux kernel will create a default device, named &lt;code&gt;ip6tnl0&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here is how to create an ip6tnl tunnel:&lt;/p&gt; &lt;pre&gt;# ip link add name ipip6 type ip6tnl local remote mode any &lt;/pre&gt; &lt;h2&gt;&lt;a name="vti"&gt;&lt;/a&gt;VTI and VTI6&lt;/h2&gt; &lt;p&gt;Virtual Tunnel Interface (VTI) on Linux is similar to Cisco&amp;#8217;s VTI and Juniper&amp;#8217;s implementation of secure tunnel (st.xx).&lt;/p&gt; &lt;p&gt;This particular tunneling driver implements IP encapsulations, which can be used with xfrm to give the notion of a secure tunnel and then use kernel routing on top.&lt;/p&gt; &lt;p&gt;In general, VTI tunnels operate in almost the same way as ipip or sit tunnels, except that they add a fwmark and IPsec encapsulation/decapsulation.&lt;/p&gt; &lt;p&gt;VTI6 is the IPv6 equivalent of VTI.&lt;/p&gt; &lt;p&gt;Here is how to create a VTI tunnel:&lt;/p&gt; &lt;pre&gt;# ip link add name vti1 type vti key local remote # ip link set vti1 up # ip addr add /24 dev vti1 # ip xfrm state add src dst spi mode tunnel # ip xfrm state add src dst spi mode tunnel # ip xfrm policy add dir in tmpl src dst mode tunnel mark # ip xfrm policy add dir out tmpl src dst mode tunnel mark &lt;/pre&gt; &lt;p&gt;You can also configure IPsec via &lt;a href="https://libreswan.org/wiki/Route-based_VPN_using_VTI" target="_blank" rel="noopener noreferrer"&gt;libreswan&lt;/a&gt; or &lt;a href="https://wiki.strongswan.org/projects/strongswan/wiki/RouteBasedVPN" target="_blank" rel="noopener noreferrer"&gt;strongSwan&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a name="gre"&gt;&lt;/a&gt;GRE and GRETAP&lt;/h2&gt; &lt;p&gt;Generic Routing Encapsulation, also known as GRE, is defined in &lt;a href="https://tools.ietf.org/html/rfc2784" target="_blank" rel="noopener noreferrer"&gt;RFC 2784&lt;/a&gt;&lt;/p&gt; &lt;p&gt;GRE tunneling adds an additional GRE header between the inside and outside IP headers. In theory, GRE could encapsulate any Layer 3 protocol with a valid Ethernet type, unlike IPIP, which can only encapsulate IP. The GRE header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576007 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre-1024x81.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre.png" alt="" width="1204" height="95" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre.png 1204w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre-300x24.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre-768x61.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre-1024x81.png 1024w" sizes="(max-width: 1204px) 100vw, 1204px" /&gt;&lt;/p&gt; &lt;p&gt;Note that you can transport multicast traffic and IPv6 through a GRE tunnel.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;gre&lt;/code&gt; module is loaded, the Linux kernel will create a default device, named &lt;code&gt;gre0&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Here is how to create a GRE tunnel:&lt;/p&gt; &lt;pre&gt;# ip link add name gre1 type gre local remote [seq] key &lt;/pre&gt; &lt;p&gt;While GRE tunnels operate at OSI Layer 3, GRETAP works at OSI Layer 2, which means there is an Ethernet header in the inner header.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gretap-1024x69.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gretap.png" alt="" width="1444" height="97" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gretap.png 1444w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gretap-300x20.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gretap-768x52.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gretap-1024x69.png 1024w" sizes="(max-width: 1444px) 100vw, 1444px" /&gt;&lt;/p&gt; &lt;p&gt;Here is how to create a GRETAP tunnel:&lt;/p&gt; &lt;pre&gt;# ip link add name gretap1 type gretap local remote &lt;/pre&gt; &lt;h2&gt;&lt;a name="gre6"&gt;&lt;/a&gt;GRE6 and GRE6TAP&lt;/h2&gt; &lt;p&gt;GRE6 is the IPv6 equivalent of GRE, which allows us to encapsulate any Layer 3 protocol over IPv6. The tunnel header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576017 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6-1024x77.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6.png" alt="" width="1203" height="91" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6.png 1203w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6-300x23.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6-768x58.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6-1024x77.png 1024w" sizes="(max-width: 1203px) 100vw, 1203px" /&gt;&lt;/p&gt; &lt;p&gt;GRE6TAP, just like GRETAP, has an Ethernet header in the inner header:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576027 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6tap-1024x67.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6tap.png" alt="" width="1447" height="95" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6tap.png 1447w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6tap-300x20.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6tap-768x50.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gre6tap-1024x67.png 1024w" sizes="(max-width: 1447px) 100vw, 1447px" /&gt;&lt;/p&gt; &lt;p&gt;Here is how to create a GRE tunnel:&lt;/p&gt; &lt;pre&gt;# ip link add name gre1 type gre6 local remote # ip link add name gretap1 type gretap6 local remote &lt;/pre&gt; &lt;h2&gt;&lt;a name="fou"&gt;&lt;/a&gt;FOU&lt;/h2&gt; &lt;p&gt;Tunneling can happen at multiple levels in the networking stack. IPIP, SIT, GRE tunnels are at the IP level, while FOU (foo over UDP) is UDP-level tunneling.&lt;/p&gt; &lt;p&gt;There are some advantages of using UDP tunneling as UDP works with existing HW infrastructure, like &lt;a href="https://en.wikipedia.org/wiki/Network_interface_controller#RSS" target="_blank" rel="noopener noreferrer"&gt;RSS&lt;/a&gt; in NICs, &lt;a href="https://en.wikipedia.org/wiki/Equal-cost_multi-path_routing" target="_blank" rel="noopener noreferrer"&gt;ECMP&lt;/a&gt; in switches, and checksum offload. The developer&amp;#8217;s &lt;a href="https://lwn.net/Articles/614433/" target="_blank" rel="noopener noreferrer"&gt;patch set&lt;/a&gt; shows significant performance increases for the SIT and IPIP protocols.&lt;/p&gt; &lt;p&gt;Currently, the FOU tunnel supports encapsulation protocol based on IPIP, SIT, GRE. An example FOU header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-575987 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/fou.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/fou.png" alt="" width="806" height="68" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/fou.png 806w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/fou-300x25.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/fou-768x65.png 768w" sizes="(max-width: 806px) 100vw, 806px" /&gt;&lt;/p&gt; &lt;p&gt;Here is how to create a FOU tunnel:&lt;/p&gt; &lt;pre&gt;# ip fou add port 5555 ipproto 4 # ip link add name tun1 type ipip remote 192.168.1.1 local 192.168.1.2 ttl 225 encap fou encap-sport auto encap-dport 5555 &lt;/pre&gt; &lt;p&gt;The first command configured a FOU receive port for IPIP bound to 5555; for GRE, you need to set &lt;code&gt;ipproto 47&lt;/code&gt;. The second command set up a new IPIP virtual interface (tun1) configured for FOU encapsulation, with dest port 5555.&lt;/p&gt; &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: FOU is not supported in Red Hat Enterprise Linux.&lt;/p&gt; &lt;h2&gt;&lt;a name="gue"&gt;&lt;/a&gt;GUE&lt;/h2&gt; &lt;p&gt;&lt;a href="https://tools.ietf.org/html/draft-ietf-intarea-gue" target="_blank" rel="noopener noreferrer"&gt;Generic UDP Encapsulation&lt;/a&gt; (GUE) is another kind of UDP tunneling. The difference between FOU and GUE is that GUE has its own encapsulation header, which contains the protocol info and other data.&lt;/p&gt; &lt;p&gt;Currently, GUE tunnel supports inner IPIP, SIT, GRE encapsulation. An example GUE header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-576047 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gue.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gue.png" alt="" width="964" height="66" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gue.png 964w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gue-300x21.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gue-768x53.png 768w" sizes="(max-width: 964px) 100vw, 964px" /&gt;&lt;/p&gt; &lt;p&gt;Here is how to create a GUE tunnel:&lt;/p&gt; &lt;pre&gt;# ip fou add port 5555 gue # ip link add name tun1 type ipip remote 192.168.1.1 local 192.168.1.2 ttl 225 encap gue encap-sport auto encap-dport 5555 &lt;/pre&gt; &lt;p&gt;This will set up a GUE receive port for IPIP bound to 5555, and an IPIP tunnel configured for GUE encapsulation.&lt;/p&gt; &lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt;: GUE is not supported in Red Hat Enterprise Linux.&lt;/p&gt; &lt;h2&gt;&lt;a name="geneve"&gt;&lt;/a&gt;GENEVE&lt;/h2&gt; &lt;p&gt;Generic Network Virtualization Encapsulation (GENEVE) supports all of the capabilities of VXLAN, NVGRE, and STT and was designed to overcome their perceived limitations. Many believe GENEVE could eventually replace these earlier formats entirely. The tunnel header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-575997 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/geneve-1024x69.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/geneve.png" alt="" width="1445" height="97" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/geneve.png 1445w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/geneve-300x20.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/geneve-768x52.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/geneve-1024x69.png 1024w" sizes="(max-width: 1445px) 100vw, 1445px" /&gt;&lt;/p&gt; &lt;p&gt;which looks very similar to &lt;a href="https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/#vxlan" target="_blank" rel="noopener noreferrer"&gt;VXLAN&lt;/a&gt;. The main difference is that the GENEVE header is flexible. It&amp;#8217;s very easy to add new features by extending the header with a new Type-Length-Value (TLV) field. For more details, you can see the latest &lt;a href="https://tools.ietf.org/html/draft-ietf-nvo3-geneve-08" target="_blank" rel="noopener noreferrer"&gt;geneve ietf draft&lt;/a&gt; or refer to this &lt;a href="https://www.redhat.com/en/blog/what-geneve" target="_blank" rel="noopener noreferrer"&gt;What is GENEVE?&lt;/a&gt; article.&lt;/p&gt; &lt;p&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openstack_platform/13/html/networking_with_open_virtual_network/open_virtual_network_ovn"&gt;Open Virtual Network (OVN)&lt;/a&gt; uses GENEVE as default encapsulation. Here is how to create a GENEVE tunnel:&lt;/p&gt; &lt;pre&gt;# ip link add name geneve0 type geneve id remote &lt;/pre&gt; &lt;h2&gt;&lt;a name="erspan"&gt;&lt;/a&gt;ERSPAN and IP6ERSPAN&lt;/h2&gt; &lt;p&gt;Encapsulated Remote Switched Port Analyzer (ERSPAN) uses GRE encapsulation to extend the basic port mirroring capability from Layer 2 to Layer 3, which allows the mirrored traffic to be sent through a routable IP network. The ERSPAN header looks like:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-575977 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/erspan-1024x58.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/erspan.png" alt="" width="1687" height="96" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/erspan.png 1687w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/erspan-300x17.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/erspan-768x44.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/erspan-1024x58.png 1024w" sizes="(max-width: 1687px) 100vw, 1687px" /&gt;&lt;/p&gt; &lt;p&gt;The ERSPAN tunnel allows a Linux host to act as an ERSPAN traffic source and send the ERSPAN mirrored traffic to either a remote host or to an ERSPAN destination, which receives and parses the ERSPAN packets generated from Cisco or other ERSPAN-capable switches. This setup could be used to analyze, diagnose, and detect malicious traffic.&lt;/p&gt; &lt;p&gt;Linux currently supports most features of two ERSPAN versions: v1 (type II) and v2 (type III).&lt;/p&gt; &lt;p&gt;Here is how to create an ERSPAN tunnel:&lt;/p&gt; &lt;pre&gt;# ip link add dev erspan1 type erspan local remote seq key erspan_ver 1 erspan or # ip link add dev erspan1 type erspan local remote seq key erspan_ver 2 erspan_dir erspan_hwid Add tc filter to monitor traffic # tc qdisc add dev handle ffff: ingress # tc filter add dev parent ffff: matchall skip_hw action mirred egress mirror dev erspan1 &lt;/pre&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;Here is a summary of all the tunnels we introduced.&lt;/p&gt; &lt;table border="1"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;Tunnel/Link Type&lt;/th&gt; &lt;th&gt;Outer Header&lt;/th&gt; &lt;th&gt;Encapsulate Header&lt;/th&gt; &lt;th&gt;Inner Header&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;ipip&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;th&gt;None&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;sit&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;th&gt;None&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;ip6tnl&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;th&gt;None&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;vit&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;th&gt;IPsec&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;vit6&lt;/th&gt; &lt;th&gt;IPv6&lt;/th&gt; &lt;th&gt;IPsec&lt;/th&gt; &lt;th&gt;IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;gre&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;th&gt;GRE&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;gretap&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;th&gt;GRE&lt;/th&gt; &lt;th&gt;Ether + IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;gre6&lt;/th&gt; &lt;th&gt;IPv6&lt;/th&gt; &lt;th&gt;GRE&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;gre6tap&lt;/th&gt; &lt;th&gt;IPv6&lt;/th&gt; &lt;th&gt;GRE&lt;/th&gt; &lt;th&gt;Ether + IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;fou&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;th&gt;UDP&lt;/th&gt; &lt;th&gt;IPv4/IPv6/GRE&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;gue&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;th&gt;UDP + GUE&lt;/th&gt; &lt;th&gt;IPv4/IPv6/GRE&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;geneve&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;th&gt;UDP + Geneve&lt;/th&gt; &lt;th&gt;Ether + IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;erspan&lt;/th&gt; &lt;th&gt;IPv4&lt;/th&gt; &lt;th&gt;GRE + ERSPAN&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;ip6erspan&lt;/th&gt; &lt;th&gt;IPv6&lt;/th&gt; &lt;th&gt;GRE + ERSPAN&lt;/th&gt; &lt;th&gt;IPv4/IPv6&lt;/th&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;b&gt;Note&lt;/b&gt;: All configurations in this tutorial are volatile and won’t survive to a server reboot. If you want to make the configuration persistent across reboots, please consider using a networking configuration daemon, such as &lt;a href="https://developer.gnome.org/NetworkManager/stable/" target="_blank" rel="noopener noreferrer"&gt;NetworkManager&lt;/a&gt;, or distribution-specific mechanisms.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Also read: &lt;a href="https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking/"&gt;Introduction to Linux interfaces for virtual networking&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#38;linkname=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F27%2Fan-introduction-to-linux-virtual-interfaces-tunnels%2F&amp;#038;title=An%20introduction%20to%20Linux%20virtual%20interfaces%3A%20Tunnels" data-a2a-url="https://developers.redhat.com/blog/2019/03/27/an-introduction-to-linux-virtual-interfaces-tunnels/" data-a2a-title="An introduction to Linux virtual interfaces: Tunnels"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/27/an-introduction-to-linux-virtual-interfaces-tunnels/"&gt;An introduction to Linux virtual interfaces: Tunnels&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YzijAYPeaUU" height="1" width="1" alt=""/&gt;</content><summary>Linux has supported many kinds of tunnels, but new users may be confused by their differences and unsure which one is best suited for a given use case. In this article, I will give a brief introduction for commonly used tunnel interfaces in the Linux kernel. There is no code analysis, only a brief introduction to the interfaces and their usage on Linux. Anyone with a network background might be in...</summary><dc:creator>Hangbin Liu</dc:creator><dc:date>2019-03-27T07:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/27/an-introduction-to-linux-virtual-interfaces-tunnels/</feedburner:origLink></entry></feed>
