<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>JBoss Weekly Editioral March 8th, 2019</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JVIEIkvE1C8/jboss-weekly-editioral-march-8th-2019" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="hibernate-orm" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><category term="wildfly 16" scheme="searchisko:content:tags" /><category term="wildfly elytron" scheme="searchisko:content:tags" /><author><name>Jason Porter</name></author><id>searchisko:content:id:jbossorg_blog-jboss_weekly_editioral_march_8th_2019</id><updated>2019-03-08T21:10:35Z</updated><published>2019-03-08T21:10:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:190877ac-492c-4431-978a-0059723d84d2] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;div&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Thank you for joining us for another edition of the JBoss Weekly Editorial! We have some great news, blogs, and releases this week! Read further down for more information.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;Quarkus&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Quarkus: Supersonic Subatomic Java. As the website describes it: A Kubernetes Native Java stack tailored for GraalVM &amp;amp; OpenJDK HotSpot, crafted from the best of breed Java libraries and standards.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Quarkus was released earlier this week with great fanfare! It&amp;#8217;s been a nine month journey to get here, but we&amp;#8217;re all very excited about what this will enable developers to do. Gone now are the days of tests taking long enough for you to check your Facebook page, hot re-deploys, expensive memory usage, long deploy times.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Would you be interested in a REST &amp;amp; JPA application fully starting up in under a second and using less than 40MB of memory? Would you like to save and refresh your web browser to see changes like the dynamic language devs do?&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;You want integration? Quarkus integrates with Apache Camel, Hibernate, Apache Kafka, Jaeger, Vertx, and others! Be sure to buckle in because we&amp;#8217;re just getting started.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Read about Quarkus from &lt;a class="jive-link-external-small" href="http://in.relation.to/2019/03/08/why-quarkus/" rel="nofollow"&gt;Emmanuel Bernard&lt;/a&gt;, &lt;a class="jive-link-blog-small" data-containerId="1427" data-containerType="37" data-objectId="6267" data-objectType="38" href="https://developer.jboss.org/blogs/mark.little/2019/03/07/quarkus-is-here"&gt;Mark Little&lt;/a&gt;, or simply head over to the &lt;a class="jive-link-external-small" href="https://quarkus.io/" rel="nofollow"&gt;Quarkus website&lt;/a&gt; to learn more! Your productivity will thank you.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;New Releases&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;In addition to Quarkus, there have been a number of new releases over the past couple of weeks:&lt;/p&gt;&lt;/div&gt;&lt;div class="ulist"&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2019/02/25/hibernate-orm-539-final-out/" rel="nofollow"&gt;Hibernate ORM 5.3.9.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2019/02/18/hibernate-validator-6015-final-out/" rel="nofollow"&gt;Hibernate Validator 6.0.15.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.keycloak.org/2019/03/keycloak-500-released.html" rel="nofollow"&gt;Keycloak 5.0.0&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="https://www.keycloak.org/2019/03/keycloak-500-released.html" rel="nofollow"&gt;Infinispan OpenShift Operator&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-external-small" href="http://wildfly.org/news/2019/02/27/WildFly16-Final-Released/" rel="nofollow"&gt;WildFly 16&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a class="jive-link-blog-small" data-containerId="5158" data-containerType="37" data-objectId="6266" data-objectType="38" href="https://developer.jboss.org/people/fjuma/blog/2019/02/28/whats-new-in-elytron-in-wildfly-16"&gt;Elytron 1.8.0.Final&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="sect1"&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Blogs&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;div class="sectionbody"&gt;&lt;div class="paragraph"&gt;&lt;p&gt;Security features continue to improve in Wildfly with both the release of Wildfly 16 and Elytron 1.8.0. You can read more about some of the new features and improvements at &lt;a class="jive-link-external-small" href="http://darranl.blogspot.com/2019/03/security-features-for-wildfly-17.html" rel="nofollow"&gt;Darran Lofthouse&amp;#8217;s blog&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Stain Thorgersen has blogged about &lt;a class="jive-link-external-small" href="https://www.keycloak.org/2019/03/w3c-web-authentication-(webauthn).html" rel="nofollow"&gt;WebAuthn&lt;/a&gt; and support coming soon to Keycloak.&lt;/p&gt;&lt;/div&gt;&lt;div class="paragraph"&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The Infinispan team blogged about releases around the trifecta of cache store releases &lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2019/03/triple-cachestore-release-cloud-mongodb.html" rel="nofollow"&gt;Cassandra, Cloud, and MongoDB Cache Stores&lt;/a&gt;. There&amp;#8217;s also a blog by the Inifinspan team talking about the &lt;a class="jive-link-external-small" href="https://blog.infinispan.org/2019/03/subatomic-infinspan-client.html" rel="nofollow"&gt;Subatomic Infinispan Client&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:190877ac-492c-4431-978a-0059723d84d2] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JVIEIkvE1C8" height="1" width="1" alt=""/&gt;</content><summary>Thank you for joining us for another edition of the JBoss Weekly Editorial! We have some great news, blogs, and releases this week! Read further down for more information.   Quarkus   Quarkus: Supersonic Subatomic Java. As the website describes it: A Kubernetes Native Java stack tailored for GraalVM &amp; OpenJDK HotSpot, crafted from the best of breed Java libraries and standards.   Quarkus was relea...</summary><dc:creator>Jason Porter</dc:creator><dc:date>2019-03-08T21:10:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/03/08/jboss-weekly-editioral-march-8th-2019</feedburner:origLink></entry><entry><title>Usability improvements in GCC 9</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hDVcx9YfRmc/" /><category term="C" /><category term="C++" /><category term="Community" /><category term="Developer Tools" /><category term="c++" /><category term="compiler" /><category term="Fedora" /><category term="gcc" /><category term="GCC 9" /><category term="GCC compiler collection" /><category term="gnu" /><category term="GNU Compiler Collection" /><category term="Linux" /><category term="Usability" /><author><name>David Malcolm</name></author><id>https://developers.redhat.com/blog/?p=564197</id><updated>2019-03-08T08:05:49Z</updated><published>2019-03-08T08:05:49Z</published><content type="html">&lt;p&gt;I work at Red Hat on &lt;a href="https://gcc.gnu.org/"&gt;GCC, the GNU Compiler Collection&lt;/a&gt;, and I spent most of the past year making GCC easier to use. Let&amp;#8217;s look at &lt;a href="https://developers.redhat.com/blog/category/c/"&gt;C&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/category/c-plus-plus/"&gt;C++&lt;/a&gt; improvements that will be in the next major release of GCC, &lt;a href="https://gcc.gnu.org/gcc-9/changes.html"&gt;GCC 9&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-564197"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;A new look for diagnostics&lt;/h2&gt; &lt;p&gt;By way of example, let&amp;#8217;s look at how GCC 8 reports an attempt to use a missing binary &amp;#8220;+&amp;#8221; in C++:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc-8 t.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;t.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int test(const shape&amp;#38;, const shape&amp;#38;)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;t.cc:15:4:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;no match for ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;operator+&lt;/span&gt;’ (operand types are ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;boxed_value&amp;#60;double&amp;#62;&lt;/span&gt;’ and ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;boxed_value&amp;#60;double&amp;#62;&lt;/span&gt;’) return (&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;width(s1) * height(s1)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt; + width(s2) * height(s2)&lt;/span&gt;&lt;/span&gt;); &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Here&amp;#8217;s what it looks like in GCC 9:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc-9 t.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;t.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int test(const shape&amp;#38;, const shape&amp;#38;)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;t.cc:15:4:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;no match for ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;operator+&lt;/span&gt;’ (operand types are ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;boxed_value&amp;#60;double&amp;#62;&lt;/span&gt;’ and ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;boxed_value&amp;#60;double&amp;#62;&lt;/span&gt;’) 14 | return (&lt;span style="font-family: monospace; color: #5f8700;"&gt;width(s1) * height(s1)&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;|&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;boxed_value&amp;#60;[...]&amp;#62;&lt;/span&gt; 15 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;+&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #0087ff;"&gt;width(s2) * height(s2)&lt;/span&gt;); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #0087ff;"&gt;~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt; | &lt;span style="font-family: monospace; color: #0087ff;"&gt;|&lt;/span&gt; | &lt;span style="font-family: monospace; color: #0087ff;"&gt;boxed_value&amp;#60;[...]&amp;#62;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;There are a few changes here. I&amp;#8217;ve added a left-hand margin, showing line numbers. The &amp;#8220;error&amp;#8221; line mentions line 15, but the expression in question spans multiple lines, and we&amp;#8217;re actually starting with line 14. I think it&amp;#8217;s worth a little extra horizontal space to make it clear which line is which. It also helps distinguish your source code from the annotations that GCC emits. I believe they also make it a little easier to see where each diagnostic starts, by visually breaking things up at the leftmost column.&lt;/p&gt; &lt;p&gt;Speaking of annotations, this example shows another new GCC 9 feature: diagnostics can label regions of the source code to show pertinent information. Here, what&amp;#8217;s most important are the types of the left-hand and right-hand sides of the &amp;#8220;+&amp;#8221; operator, so GCC highlights them inline. Notice how the diagnostic also uses color to distinguish the two operands from each other and the operator.&lt;/p&gt; &lt;p&gt;The left margin affects how we print things like fix-it hints for missing header files:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc-9 -xc++ -c incomplete.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;incomplete.c:1:6:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;string&lt;/span&gt;’ in namespace ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;std&lt;/span&gt;’ does not name a type 1 | std::&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;string&lt;/span&gt;&lt;/span&gt; test(void) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;incomplete.c:1:1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;std::string&lt;/span&gt;’ is defined in header ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&amp;#60;string&amp;#62;&lt;/span&gt;’; did you forget to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;#include &amp;#60;string&amp;#62;&lt;/span&gt;’? +++ |+&lt;span style="font-family: monospace; color: #5f8700;"&gt;#include &amp;#60;string&amp;#62;&lt;/span&gt; 1 | std::string test(void) &lt;/pre&gt; &lt;p&gt;I&amp;#8217;ve turned on these changes by default; they can be disabled via &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Message-Formatting-Options.html#index-fno-diagnostics-show-line-numbers"&gt;-fno-diagnostics-show-line-numbers&lt;/a&gt; and &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Message-Formatting-Options.html#index-fno-diagnostics-show-labels"&gt;-fno-diagnostics-show-labels&lt;/a&gt;, respectively.&lt;/p&gt; &lt;p&gt;Another example can be seen in the type-mismatch error from the article I wrote last year,  &lt;a href="https://developers.redhat.com/blog/2018/03/15/gcc-8-usability-improvements/"&gt;Usability improvements in GCC 8&lt;/a&gt;:&lt;/p&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #008000; font-weight: bold; font-family: monospace;"&gt;extern&lt;/span&gt; &lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; &lt;span style="color: #0000ff; font-family: monospace;"&gt;callee&lt;/span&gt;(&lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; one, &lt;span style="color: #008000; font-weight: bold; font-family: monospace;"&gt;const&lt;/span&gt; &lt;span style="color: #b00040; font-family: monospace;"&gt;char&lt;/span&gt; &lt;span style="color: #666666; font-family: monospace;"&gt;*&lt;/span&gt;two, &lt;span style="color: #b00040; font-family: monospace;"&gt;float&lt;/span&gt; three); &lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; &lt;span style="color: #0000ff; font-family: monospace;"&gt;caller&lt;/span&gt;(&lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; first, &lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; second, &lt;span style="color: #b00040; font-family: monospace;"&gt;float&lt;/span&gt; third) { &lt;span style="color: #008000; font-weight: bold; font-family: monospace;"&gt;return&lt;/span&gt; callee(first, second, third); } &lt;/pre&gt; &lt;p&gt;where the bogus type of the expression is now highlighted inline:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc-9 -c param-type-mismatch.c &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;caller&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.c:5:24:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;passing argument 2 of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;callee&lt;/span&gt;’ makes pointer from integer without a cast [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wint-conversion&lt;/span&gt;&lt;/span&gt;] 5 | return callee(first, &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;second&lt;/span&gt;&lt;/span&gt;, third); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.c:1:40:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;expected ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;const char *&lt;/span&gt;’ but argument is of type ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int&lt;/span&gt;’ 1 | extern int callee(int one, &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;const char *two&lt;/span&gt;&lt;/span&gt;, float three); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~^~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Yet another example can be seen in this bad &lt;code&gt;printf&lt;/code&gt; call:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 -c bad-printf.cc -Wall &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-printf.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;void print_field(const char*, float, long int, long int)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-printf.cc:6:17:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;field width specifier ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;*&lt;/span&gt;’ expects argument of type ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int&lt;/span&gt;’, but argument 3 has type ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;long int&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wformat=&lt;/span&gt;&lt;/span&gt;] 6 | printf ("%s: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;%*ld&lt;/span&gt;&lt;/span&gt; ", fieldname, &lt;span style="font-family: monospace; color: #5f8700;"&gt;column - width&lt;/span&gt;, value); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;~^~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #5f8700;"&gt;~~~~~~~~~~~~~~&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #5f8700;"&gt;|&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #5f8700;"&gt;long int&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-printf.cc:6:19:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;format ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;%ld&lt;/span&gt;’ expects argument of type ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;long int&lt;/span&gt;’, but argument 4 has type ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;double&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wformat=&lt;/span&gt;&lt;/span&gt;] 6 | printf ("%s: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;%*ld&lt;/span&gt;&lt;/span&gt; ", fieldname, column - width, &lt;span style="font-family: monospace; color: #5f8700;"&gt;value&lt;/span&gt;); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;~~~^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #5f8700;"&gt;~~~~~&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #5f8700;"&gt;|&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;long int&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #5f8700;"&gt;double&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;%*f&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;which contrasts &amp;#8220;inline&amp;#8221; the type expected by the format string versus what was passed in. (Embarrassingly, we didn&amp;#8217;t properly highlight format string locations in older versions of the C++ front end; for GCC 9, I&amp;#8217;ve implemented this so it has parity with that of the C front end, as shown here).&lt;/p&gt; &lt;h2&gt;Not just for humans&lt;/h2&gt; &lt;p&gt;One concern I&amp;#8217;ve heard when changing how GCC prints diagnostics is that it might break someone&amp;#8217;s script for parsing GCC output. I don&amp;#8217;t think these changes will do that: most such scripts are set up to parse the&lt;/p&gt; &lt;pre&gt; "FILENAME:LINE:COL: error: MESSAGE" &lt;/pre&gt; &lt;p&gt;lines and ignore the rest, and I&amp;#8217;m not touching that part of the output.&lt;/p&gt; &lt;p&gt;But it made me think it was about time we had a machine-readable output format for diagnostics, so for GCC 9, I&amp;#8217;ve added a JSON output format: &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Message-Formatting-Options.html#index-fdiagnostics-format"&gt;-fdiagnostics-format=json&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Consider this warning:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc-9 -c cve-2014-1266.c -Wall &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;cve-2014-1266.c:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;SSLVerifySignedServerKeyExchange&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;cve-2014-1266.c:629:2:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;this ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;if&lt;/span&gt;’ clause does not guard... [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wmisleading-indentation&lt;/span&gt;&lt;/span&gt;] 629 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;if&lt;/span&gt;&lt;/span&gt; ((err = SSLHashSHA1.update(&amp;#38;hashCtx, &amp;#38;signedParams)) != 0) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;cve-2014-1266.c:631:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;...this statement, but the latter is misleadingly indented as if it were guarded by the ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;if&lt;/span&gt;’ 631 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;goto&lt;/span&gt;&lt;/span&gt; fail; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;With &lt;code&gt;-fdiagnostics-format=json&lt;/code&gt;, the diagnostics are emitted as a big blob of JSON to stderr. Running them through the handy &lt;code&gt;python -m json.tool&lt;/code&gt; to format them gives an idea of the structure:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ (gcc-9 -c cve-2014-1266.c -Wall -fdiagnostics-format=json 2&amp;#62;&amp;#38;1) | python -m json.tool | pygmentize -l json [ { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"children"&lt;/span&gt;&lt;/span&gt;: [ { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"kind"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"note"&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"locations"&lt;/span&gt;&lt;/span&gt;: [ { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"caret"&lt;/span&gt;&lt;/span&gt;: { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"column"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;3&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"file"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"cve-2014-1266.c"&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"line"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;631&lt;/span&gt; }, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"finish"&lt;/span&gt;&lt;/span&gt;: { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"column"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;6&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"file"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"cve-2014-1266.c"&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"line"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;631&lt;/span&gt; } } ], &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"message"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"...this statement, but the latter is misleadingly indented as if it were guarded by the \u2018if\u2019" &lt;/span&gt; } ], &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"kind"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"warning"&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"locations"&lt;/span&gt;&lt;/span&gt;: [ { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"caret"&lt;/span&gt;&lt;/span&gt;: { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"column"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;2&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"file"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"cve-2014-1266.c"&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"line"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;629&lt;/span&gt; }, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"finish"&lt;/span&gt;&lt;/span&gt;: { &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"column"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;3&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"file"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"cve-2014-1266.c"&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"line"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #0087ff;"&gt;629&lt;/span&gt; } } ], &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"message"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"this \u2018if\u2019 clause does not guard..."&lt;/span&gt;, &lt;span style="font-family: monospace; color: #0087ff;"&gt;&lt;span style="font-family: monospace; color: #808080; font-weight: normal;"&gt;"option"&lt;/span&gt;&lt;/span&gt;: &lt;span style="font-family: monospace; color: #af8700;"&gt;"-Wmisleading-indentation"&lt;/span&gt; } ] &lt;/pre&gt; &lt;p&gt;In particular, the supplementary &amp;#8220;note&amp;#8221; is nested within the &amp;#8220;warning&amp;#8221; at the JSON level, allowing, for example, IDEs to group them. Some of our C++ diagnostics can have numerous child diagnostics giving additional detail, so being able to group them, for example, via a disclosure widget, could be helpful.&lt;/p&gt; &lt;h2&gt;Simpler C++ errors&lt;/h2&gt; &lt;p&gt;C++ is a complicated language. For example, the rules for figuring out which C++ function is to be invoked at a call site are &lt;a href="https://en.cppreference.com/w/cpp/language/overload_resolution"&gt;non-trivial&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The compiler could need to consider several functions at a given call site, reject all of them for different reasons, and &lt;code&gt;g++&lt;/code&gt;&amp;#8216;s error messages have to cope with this generality, explaining why each was rejected.&lt;/p&gt; &lt;p&gt;This generality can make simple cases harder to read than they could be, so for GCC 9, I&amp;#8217;ve added special-casing to simplify some &lt;code&gt;g++&lt;/code&gt; errors for common cases where there&amp;#8217;s just one candidate function.&lt;/p&gt; &lt;p&gt;For example, GCC 8 could emit this:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-8 param-type-mismatch.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int test(int, const char*, float)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.cc:8:45:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;no matching function for call to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;foo::member_1(int&amp;#38;, const char*&amp;#38;, float&amp;#38;)&lt;/span&gt;’ return foo::member_1 (first, second, third&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.cc:3:14:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;candidate: ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;static int foo::member_1(int, const char**, float)&lt;/span&gt;’ static int &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;member_1&lt;/span&gt;&lt;/span&gt; (int one, const char **two, float three); &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.cc:3:14:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt; no known conversion for argument 2 from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;const char*&lt;/span&gt;’ to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;const char**&lt;/span&gt;’ &lt;/pre&gt; &lt;p&gt;For GCC 9, I&amp;#8217;ve special-cased this, giving a more direct error message, which highlights both the problematic argument and the parameter that it can&amp;#8217;t be converted to:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 param-type-mismatch.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int test(int, const char*, float)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.cc:8:32:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;cannot convert ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;const char*&lt;/span&gt;’ to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;const char**&lt;/span&gt;’ 8 | return foo::member_1 (first, &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;second&lt;/span&gt;&lt;/span&gt;, third); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;const char*&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;param-type-mismatch.cc:3:46:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt; initializing argument 2 of ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;static int foo::member_1(int, const char**, float)&lt;/span&gt;’ 3 | static int member_1 (int one, &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;const char **two&lt;/span&gt;&lt;/span&gt;, float three); | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;~~~~~~~~~~~~~^~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;Similarly, GCC 8 took two messages to offer suggestions for various kinds of misspelled names:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-8 typo.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo.cc:5:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;BUFSIZE&lt;/span&gt;’ was not declared in this scope uint8_t buf[&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;BUFSIZE&lt;/span&gt;&lt;/span&gt;]; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo.cc:5:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;suggested alternative: ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;BUF_SIZE&lt;/span&gt;’ uint8_t buf[&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;BUFSIZE&lt;/span&gt;&lt;/span&gt;]; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #5f8700;"&gt;BUF_SIZE&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;so for GCC 9, I&amp;#8217;ve consolidated the messages:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 typo.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo.cc:5:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;BUFSIZE&lt;/span&gt;’ was not declared in this scope; did you mean ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;BUF_SIZE&lt;/span&gt;’? 5 | uint8_t buf[&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;BUFSIZE&lt;/span&gt;&lt;/span&gt;]; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;BUF_SIZE&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;In some cases, where GCC 8 knew to offer suggestions within namespaces:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-8 typo-2.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo-2.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;void mesh_to_strip()&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo-2.cc:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;tri_strip&lt;/span&gt;’ was not declared in this scope &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;tri_strip&lt;/span&gt;&lt;/span&gt; result; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo-2.cc:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;suggested alternative: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo-2.cc:2:9:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt; ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;engine::tri_strip&lt;/span&gt;’ class &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;tri_strip&lt;/span&gt;&lt;/span&gt; { &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;GCC 9 can now offer fix-it hints:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 typo-2.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo-2.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;void mesh_to_strip()&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo-2.cc:8:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;tri_strip&lt;/span&gt;’ was not declared in this scope; did you mean ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;engine::tri_strip&lt;/span&gt;’? 8 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;tri_strip&lt;/span&gt;&lt;/span&gt; result; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;engine::tri_strip&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typo-2.cc:2:9:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;engine::tri_strip&lt;/span&gt;’ declared here 2 | class &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;tri_strip&lt;/span&gt;&lt;/span&gt; { | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;h2&gt;Location, location, location&lt;/h2&gt; &lt;p&gt;A long-standing issue within GCC&amp;#8217;s internal representation is that not every node within the syntax tree has a source location.&lt;/p&gt; &lt;p&gt;For GCC 8, I &lt;a href="https://github.com/gcc-mirror/gcc/commit/d76863c8a62920c5a156125e68ad315b47bfcd24"&gt;added a way&lt;/a&gt; to ensure that every argument at a C++ call site has a source location.&lt;/p&gt; &lt;p&gt;For GCC 9, I&amp;#8217;ve &lt;a href="https://github.com/gcc-mirror/gcc/commit/d582d14011fec247f203a49e79bdab05f56197b0"&gt;extended this work&lt;/a&gt; so that many more places in the C++ syntax tree now retain location information for longer.&lt;/p&gt; &lt;p&gt;This really helps when tracking down bad initializations. GCC 8 and earlier might unhelpfully emit errors on the final closing parenthesis or brace, for example:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-8 bad-inits.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:12:1:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;cannot convert ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;json&lt;/span&gt;’ to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int&lt;/span&gt;’ in initialization &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:14:47:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;initializer-string for array of chars is too long [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;-fpermissive&lt;/span&gt;&lt;/span&gt;] char buffers[3][5] = { "red", "green", "blue" &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt;; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:&lt;/span&gt; In constructor ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;X::X()&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:17:35:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;invalid conversion from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int&lt;/span&gt;’ to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;void*&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;-fpermissive&lt;/span&gt;&lt;/span&gt;] X() : one(42), two(42), three(42&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;whereas now, GCC 9 can highlight exactly where the various problems are:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 bad-inits.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:10:14:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;cannot convert ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;json&lt;/span&gt;’ to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int&lt;/span&gt;’ in initialization 10 | { 3, &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;json::object&lt;/span&gt;&lt;/span&gt; }, | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;~~~~~~^~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;json&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:14:31:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;initializer-string for array of chars is too long [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;-fpermissive&lt;/span&gt;&lt;/span&gt;] 14 | char buffers[3][5] = { "red", &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;"green"&lt;/span&gt;&lt;/span&gt;, "blue" }; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~~&lt;/span&gt;&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:&lt;/span&gt; In constructor ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;X::X()&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;bad-inits.cc:17:13:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;invalid conversion from ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int&lt;/span&gt;’ to ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;void*&lt;/span&gt;’ [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;-fpermissive&lt;/span&gt;&lt;/span&gt;] 17 | X() : one(&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;42&lt;/span&gt;&lt;/span&gt;), two(42), three(42) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;|&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;int&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;h2&gt;What is the optimizer doing?&lt;/h2&gt; &lt;p&gt;GCC can automatically &amp;#8220;vectorize&amp;#8221; loops, reorganizing them to work on multiple iterations at once, to take advantage of the vector units on your CPU. However, it can do this only for some loops; if you stray from the path, GCC will have to use scalar code instead.&lt;/p&gt; &lt;p&gt;Unfortunately, historically it hasn&amp;#8217;t been easy to get a sense from GCC about the decisions it&amp;#8217;s making as it&amp;#8217;s optimizing your code. We have an option, &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Developer-Options.html#index-fopt-info"&gt;-fopt-info&lt;/a&gt;, that emits optimization information, but it&amp;#8217;s been more of a tool for the developers of GCC itself, rather than something aimed at end users.&lt;/p&gt; &lt;p&gt;For example, consider this (contrived) example:&lt;/p&gt; &lt;pre style="line-height: 125%;"&gt;&lt;span style="color: #bc7a00; font-family: monospace;"&gt;#define N 1024&lt;/span&gt; &lt;span style="color: #b00040; font-family: monospace;"&gt;void&lt;/span&gt; &lt;span style="color: #0000ff; font-family: monospace;"&gt;test&lt;/span&gt; (&lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; &lt;span style="color: #666666; font-family: monospace;"&gt;*&lt;/span&gt;p, &lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; &lt;span style="color: #666666; font-family: monospace;"&gt;*&lt;/span&gt;q) { &lt;span style="color: #b00040; font-family: monospace;"&gt;int&lt;/span&gt; i; &lt;span style="color: #008000; font-weight: bold; font-family: monospace;"&gt;for&lt;/span&gt; (i &lt;span style="color: #666666; font-family: monospace;"&gt;=&lt;/span&gt; &lt;span style="color: #666666; font-family: monospace;"&gt;0&lt;/span&gt;; i &lt;span style="color: #666666; font-family: monospace;"&gt;&amp;#60;&lt;/span&gt; N; i&lt;span style="color: #666666; font-family: monospace;"&gt;++&lt;/span&gt;) { p[i] &lt;span style="color: #666666; font-family: monospace;"&gt;=&lt;/span&gt; q[i]; asm &lt;span style="color: #008000; font-weight: bold; font-family: monospace;"&gt;volatile&lt;/span&gt; (&lt;span style="color: #ba2121; font-family: monospace;"&gt;""&lt;/span&gt; &lt;span style="color: #666666; font-family: monospace;"&gt;:::&lt;/span&gt; &lt;span style="color: #ba2121; font-family: monospace;"&gt;"memory"&lt;/span&gt;); } } &lt;/pre&gt; &lt;p&gt;I tried compiling it with GCC 8 with &lt;code&gt;-O3 -fopt-info-all-vec&lt;/code&gt;, but it wasn&amp;#8217;t very enlightening:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc-8 -c v.c -O3 -fopt-info-all-vec Analyzing loop at v.c:7 v.c:7:3: note: ===== analyze_loop_nest ===== v.c:7:3: note: === vect_analyze_loop_form === v.c:7:3: note: === get_loop_niters === v.c:7:3: note: not vectorized: loop contains function calls or data references that cannot be analyzed v.c:3:6: note: vectorized 0 loops in function. v.c:3:6: note: ===vect_slp_analyze_bb=== v.c:3:6: note: ===vect_slp_analyze_bb=== v.c:10:7: note: === vect_analyze_data_refs === v.c:10:7: note: got vectype for stmt: _5 = *_3; vector(4) int v.c:10:7: note: got vectype for stmt: *_4 = _5; vector(4) int v.c:10:7: note: === vect_analyze_data_ref_accesses === v.c:10:7: note: not consecutive access _5 = *_3; v.c:10:7: note: not consecutive access *_4 = _5; v.c:10:7: note: not vectorized: no grouped stores in basic block. v.c:7:3: note: === vect_analyze_data_refs === v.c:7:3: note: not vectorized: not enough data-refs in basic block. v.c:7:3: note: ===vect_slp_analyze_bb=== v.c:7:3: note: ===vect_slp_analyze_bb=== v.c:12:1: note: === vect_analyze_data_refs === v.c:12:1: note: not vectorized: not enough data-refs in basic block. &lt;/pre&gt; &lt;p&gt;For GCC 9, I&amp;#8217;ve reorganized problem-tracking within the vectorizer so that the output is of the form:&lt;/p&gt; &lt;pre&gt; [LOOP-LOCATION]: couldn't vectorize this loop [PROBLEM-LOCATION]: because of [REASON] &lt;/pre&gt; &lt;p&gt;For the example above, this gives the following, identifying the location of the construct within the loop that the vectorizer couldn&amp;#8217;t handle. (I hoped to have it also show the source code, but that didn&amp;#8217;t make feature freeze):&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ gcc-9 -c v.c -O3 -fopt-info-all-vec v.c:7:3: missed: couldn't vectorize loop v.c:10:7: missed: statement clobbers memory: __asm__ __volatile__("" : : : "memory"); v.c:3:6: note: vectorized 0 loops in function. v.c:10:7: missed: statement clobbers memory: __asm__ __volatile__("" : : : "memory"); &lt;/pre&gt; &lt;p&gt;This improves things, but still has some limitations, so for GCC 9 I&amp;#8217;ve also added a new option to emit machine-readable optimization information: &lt;a href="https://gcc.gnu.org/onlinedocs/gcc/Developer-Options.html#index-fsave-optimization-record"&gt;-fsave-optimization-record&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This writes out a &lt;code&gt;SRCFILE.opt-record.json.gz&lt;/code&gt; file with much richer data: for example, every message is tagged with profile information (if available), so that you can look at the &amp;#8220;hottest&amp;#8221; part of the code, and it captures inlining information, so that if a function has been inlined into several places, you can see how each instance of the function has been optimized.&lt;/p&gt; &lt;h2&gt;Other improvements&lt;/h2&gt; &lt;p&gt;GCC can emit &amp;#8220;fix-it hints&amp;#8221; that suggest how to fix a problem in your code. These can be automatically applied by an IDE.&lt;/p&gt; &lt;p&gt;For GCC 9, I&amp;#8217;ve added various new fix-it hints. There are now fix-it hints for forgetting the &lt;code&gt;return *this;&lt;/code&gt; needed by various C++ operators:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 -c operator.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;operator.cc:&lt;/span&gt; In member function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;boxed_ptr&amp;#38; boxed_ptr::operator=(const boxed_ptr&amp;#38;)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;operator.cc:7:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;warning: &lt;/span&gt;&lt;/span&gt;no return statement in function returning non-void [&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;-Wreturn-type&lt;/span&gt;&lt;/span&gt;] 6 | m_ptr = other.m_ptr; +++ |+&lt;span style="font-family: monospace; color: #5f8700;"&gt; return *this;&lt;/span&gt; 7 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;}&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #5f5faf; font-weight: normal;"&gt;^&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;and for when the compiler needs a &lt;code&gt;typename&lt;/code&gt;:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 -c template.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;template.cc:3:3:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;need ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;typename&lt;/span&gt;’ before ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;Traits::type&lt;/span&gt;’ because ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;Traits&lt;/span&gt;’ is a dependent scope 3 | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;Traits&lt;/span&gt;&lt;/span&gt;::type type; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;typename &lt;/span&gt; &lt;/pre&gt; &lt;p&gt;and when you try to use an accessor member as if it were a data member:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 -c fncall.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;fncall.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;void hangman(const mystring&amp;#38;)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;fncall.cc:12:11:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;invalid use of member function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int mystring::get_length() const&lt;/span&gt;’ (did you forget the ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;()&lt;/span&gt;’ ?) 12 | if (&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;str.get_length&lt;/span&gt;&lt;/span&gt; &amp;#62; 0) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;~~~~^~~~~~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;()&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;and for C++11&amp;#8217;s scoped enums:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 -c enums.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;enums.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;void json::test(const json::value&amp;#38;)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;enums.cc:12:26:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;STRING&lt;/span&gt;’ was not declared in this scope; did you mean ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;json::kind::STRING&lt;/span&gt;’? 12 | if (v.get_kind () == &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;STRING&lt;/span&gt;&lt;/span&gt;) | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;json::kind::STRING&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;enums.cc:3:44:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;note: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;json::kind::STRING&lt;/span&gt;’ declared here 3 | enum class kind { OBJECT, ARRAY, NUMBER, &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;STRING&lt;/span&gt;&lt;/span&gt;, TRUE, FALSE, NULL_ }; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #8a8a8a; font-weight: normal;"&gt;^~~~~~&lt;/span&gt;&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;And I added a tweak to integrate the suggestions about misspelled members with that for accessors:&lt;/p&gt; &lt;pre style="color: #e4e4e4; background-color: #262626;"&gt;$ g++-9 -c accessor-fixit.cc &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;accessor-fixit.cc:&lt;/span&gt; In function ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int test(t*)&lt;/span&gt;’: &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;accessor-fixit.cc:17:15:&lt;/span&gt; &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;error: &lt;/span&gt;&lt;/span&gt;‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;class t&lt;/span&gt;’ has no member named ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;ratio&lt;/span&gt;’; did you mean ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int t::m_ratio&lt;/span&gt;’? (accessible via ‘&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;int t::get_ratio() const&lt;/span&gt;’) 17 | return ptr-&amp;#62;&lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;ratio&lt;/span&gt;&lt;/span&gt;; | &lt;span style="font-family: monospace; color: #ffffd7; font-weight: normal;"&gt;&lt;span style="font-family: monospace; color: #d75f00; font-weight: normal;"&gt;^~~~~&lt;/span&gt;&lt;/span&gt; | &lt;span style="font-family: monospace; color: #5f8700;"&gt;get_ratio()&lt;/span&gt; &lt;/pre&gt; &lt;p&gt;I&amp;#8217;ve also tweaked the suggestions code so it considers transposed letters, so it should do a better job of figuring out misspellings.&lt;/p&gt; &lt;h2&gt;Looking to the future&lt;/h2&gt; &lt;p&gt;The above covers some of the changes I&amp;#8217;ve made for GCC 9.&lt;/p&gt; &lt;p&gt;Perhaps a deeper change is that we now have a set of &lt;a href="https://gcc.gnu.org/onlinedocs/gccint/User-Experience-Guidelines.html"&gt;user experience guidelines for GCC&lt;/a&gt;, to try to keep a focus on the programmer&amp;#8217;s experience as we implement new diagnostics. If you&amp;#8217;d like to get involved in GCC development, please join us on the &lt;a href="https://gcc.gnu.org/lists.html"&gt;GCC mailing list&lt;/a&gt;. Hacking on diagnostics is a great way to get started.&lt;/p&gt; &lt;h2&gt;Trying it out&lt;/h2&gt; &lt;p&gt;GCC 9 will be in &lt;a href="https://fedoraproject.org/wiki/Releases/30/Schedule"&gt;Fedora 30&lt;/a&gt;, which should be out in a few weeks.&lt;/p&gt; &lt;p&gt;For simple code examples, you can play around with the new&lt;br /&gt; GCC at &lt;a href="https://godbolt.org/"&gt;https://godbolt.org/&lt;/a&gt; (select GCC &amp;#8220;trunk&amp;#8221;).&lt;/p&gt; &lt;p&gt;Have fun!&lt;/p&gt; &lt;h2&gt;See Also&lt;/h2&gt; &lt;p&gt;If you are using GCC 8 on &lt;a href="https://developers.redhat.com/products/rhel/overview/"&gt;Red Hat Enterprise Linux&lt;/a&gt; 6, 7, or &lt;a href="https://developers.redhat.com/rhel8"&gt;8 Beta&lt;/a&gt;,  some articles that might be of interest:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/15/gcc-8-usability-improvements/"&gt;Usability improvements in GCC 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/"&gt; Recommended compiler and linker flags for GCC&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/05/yum-install-gcc-8-clang-6/"&gt;How to install GCC 8 on Red Hat Enterprise Linux&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#38;linkname=Usability%20improvements%20in%20GCC%209" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F08%2Fusability-improvements-in-gcc-9%2F&amp;#038;title=Usability%20improvements%20in%20GCC%209" data-a2a-url="https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/" data-a2a-title="Usability improvements in GCC 9"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/"&gt;Usability improvements in GCC 9&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hDVcx9YfRmc" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I work at Red Hat on GCC, the GNU Compiler Collection, and I spent most of the past year making GCC easier to use. Let&amp;#8217;s look at C and C++ improvements that will be in the next major release of GCC, GCC 9. A new look for diagnostics By way of example, let&amp;#8217;s look at [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/"&gt;Usability improvements in GCC 9&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">564197</post-id><dc:creator>David Malcolm</dc:creator><dc:date>2019-03-08T08:05:49Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/</feedburner:origLink></entry><entry><title>Why Quarkus</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/7jpKRMdySw4/" /><category term="Discussions" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><author><name>Emmanuel Bernard</name></author><id>searchisko:content:id:jbossorg_blog-why_quarkus</id><updated>2019-03-08T14:15:57Z</updated><published>2019-03-08T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;About eight months ago, I started a very thrilling journey. That journey is just beginning and I am even more excited today than I was when we started. Yesterday, we announced &lt;a href="https://quarkus.io"&gt;Quarkus&lt;/a&gt; which to me represents three things:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Java is at a new junction point&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Java is back in the game in container platforms and serverless&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;developer experience is king&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="a-new-paradigm-shift"&gt;&lt;a class="anchor" href="#a-new-paradigm-shift"&gt;&lt;/a&gt;A new paradigm shift&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Java has had a few paradigm shifts in the past. Two of them resonate for me as I contributed to them:&lt;/p&gt; &lt;/div&gt; &lt;div class="olist arabic"&gt; &lt;ol class="arabic"&gt; &lt;li&gt; &lt;p&gt;Java’s ecosystem got taken over by Open Source&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Java introduced &lt;code&gt;@Annotations&lt;/code&gt; and that changed the programming model significantly (&lt;code&gt;XML&lt;/code&gt; anyone?). Some frameworks ignored it (they are gone), some embraced it and new annotation-native frameworks got created. This revolutionalized the Java ecosystem.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;I believe we are at one of these junctions. Java is embracing Ahead of Time Compilation (AOT) and that’s going to change everything. For people that don’t know, &lt;a href="https://graalvm.org"&gt;GraalVM&lt;/a&gt; and specifically Substrate VM are opening that door.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;GraalVM is great because it brings Java code to milliseconds start time (or first response time as we prefer to measure it) and 10+ MB of Resident Set Size (RSS). When you measure memory in Java, you need to be aware of two things:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;the heap size (that’s the &lt;code&gt;-Xmx&lt;/code&gt; thing)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;and the non heap size (that’s what the JVM needs to keep its structure around and other things, in short, not our app data)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Together, they add up to the total memory consumed which is nicely represented by RSS. RSS is what matters in real life and particularly in containers. When you go over your memory limit, Kubernetes rightly kills you (a bit rude but it told you not to go over limit and you are not alone).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;GraalVM brings low RSS and boot time. That’s great but GraalVM comes with a dark side too. The dynamic nature of Java is severely constrained (class loading at runtime, reflection, proxies, etc). In practice, it means 90% of the Java ecosystem does not work without change.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;So the Java ecosystem must adapt. It must accept to do much less magic trickery at startup time. The good news is that we can do most of them at build time :)&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Quarkus does bring an infrastructure for frameworks to embrace build time metadata discovery (like annotations), declare which classes need reflection at runtime, boot at &lt;em&gt;build time&lt;/em&gt;, and generally offer a lot GraalVM optimization for free (or cheap at least).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If I caricature, Quarkus makes GraalVM usable for framework developers (and for users, see later).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="but-wait-why-do-i-care-about-memory-and-startup-time"&gt;&lt;a class="anchor" href="#but-wait-why-do-i-care-about-memory-and-startup-time"&gt;&lt;/a&gt;But wait, why do I care about memory and startup time&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;People embrace agility. To do that, they embrace new instant deployment platforms like Kubernetes or alternatives. The idea is that you deploy between one and many instances of your app with the click of a button or close to. Combine that with microservices which also help on the agility front and you have many many deployments on these platforms. The extreme of that model is serverless with minimal functions deployed: you could imagine 200 functions doing what one good old app was doing.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The idea of Java taking 100 MB, 200 MB or even more of fix cost before your app does anything useful is prohibitive when you deploy 20x or even 200x Java processes. Specifically on the function as a service side, 2s or more means that the cool kids have to leave Java behind.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;No more. In our tests, we found that Quarkus applications compiled with GraalVM have a very good requests/s/MB number. We care about requests/s/MB because it’s really easy in deployment platforms like Kubernetes to deploy a second instance of your app and roughly double the requests/s. You don’t scale one process up, you scale processes out.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Oh and the memory and boot time for Quarkus on your good old OpenJDK HotSpot is nothing short of impressive too. Which brings me to my next point.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="developer-experience"&gt;&lt;a class="anchor" href="#developer-experience"&gt;&lt;/a&gt;Developer experience&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All of this is cool, but at the end of the day, developer is king. Saving a few MB but losing a joyful, productive, easy to use experience is not going to cut it.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The good news is that when you can start the full application in less than a second from &lt;em&gt;cold&lt;/em&gt; boot, and even faster from &lt;em&gt;warm&lt;/em&gt; boot, there are lots of interesting opportunities opening in front of you.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We ran with it! And some more! Quarkus has an awesome developer experience:&lt;/p&gt; &lt;/div&gt; &lt;div class="dlist"&gt; &lt;dl&gt; &lt;dt class="hdlist1"&gt;Really fast test suite run&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;Your test suite will run &lt;em&gt;really fast&lt;/em&gt;, fast enough that tricks like mocking services to speed things up, lazy startup of components, testing with a subset of your application, etc become unnecessary (or less common). The days to check Facebook while the test suite runs are numbered.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;div class="imageblock"&gt; &lt;div class="content"&gt; &lt;img src="http://in.relation.to/images/quarkus_graphics_v2_devjoy_01.png" alt="quarkus graphics v2 devjoy 01" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="dlist"&gt; &lt;dl&gt; &lt;dt class="hdlist1"&gt;Live reload&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;We have a live reload mode that works with &lt;em&gt;zero&lt;/em&gt; configuration nor IDE trick. You hit save in your IDE, it compiles, and boom you can refresh your browser to see the results. Your app has been redeployed for you in subsecond. Writing changes involving UI and database changes is really easy with such short feedback loop.&lt;/p&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add a new Hibernate &lt;code&gt;@Entity&lt;/code&gt;, hit save ⇒ it’s deployed, yes with the database schema change&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add a new REST endpoint, a CDI bean, hit save ⇒ it’s deployed&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;change a configuration in &lt;code&gt;application.properties&lt;/code&gt; or a resource file like &lt;code&gt;index.html&lt;/code&gt; ⇒ boom it’s deployed&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;And the best part is that we redeploy the &lt;em&gt;full application&lt;/em&gt; because starting in Quarkus is so cheap. No need to do hot replace of bytecode or anything.&lt;/p&gt; &lt;/div&gt; &lt;div class="dlist"&gt; &lt;dl&gt; &lt;dt class="hdlist1"&gt;Cohesive and opinionated platform&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;While we reuse standards and popular frameworks, we want a really easy to use experience. That means one configuration file, not two, not one per technology. This surfaces in Quarkus everywhere but let me give you one example: no need for a &lt;code&gt;persistence.xml&lt;/code&gt;. We support it if you want to. But out of the box we detect your database settings from &lt;code&gt;application.properties&lt;/code&gt; and figure the rest out for you.&lt;/p&gt; &lt;/dd&gt; &lt;dt class="hdlist1"&gt;Productivity with Panache&lt;/dt&gt; &lt;dd&gt; &lt;p&gt;We also looked at the 80% use cases that should be as simple as possible because well, you do them all the time. For these, we took a more dramatic approach and offer a opinionated, concise and readable approach that sits on top of the usual technology. One of the canonical example of that is the simplified model we worked on on top of JPA and Hibernate ORM. This is entirely optional, but if you embrace the approach, your code will be loads simpler and smaller. We internally use the code name Panache for these approaches. Panache means &lt;em&gt;flamboyant manner and style&lt;/em&gt;. Check out &lt;a href="https://quarkus.io/guides/hibernate-orm-panache-guide"&gt;Hibernate with Panache&lt;/a&gt; for the first example of this.&lt;/p&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="join-the-revolution"&gt;&lt;a class="anchor" href="#join-the-revolution"&gt;&lt;/a&gt;Join the revolution&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With all that I have not told you what &lt;a href="https://quarkus.io"&gt;Quarkus&lt;/a&gt; is but hopefully picked your interest. Yes I used very emphatic words, but I am truly excited for Java developers right now. Quarkus is to be experienced more than described with words, so &lt;a href="https://quarkus.io/get-started/"&gt;give it a spin&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Quarkus is at its beginning. There is a lot to do: lots of technologies to integrate, lots of development simplification opportunities. My hope is that an ecosystem builds around it to become the Java ecosystem that runs on GraalVM. If you want to add support for your favorite framework, have an idea for a simpler use case, or simply want to try, join the revolution. &lt;a href="http://quarkus.io/community"&gt;Come talk to us&lt;/a&gt; and join the Quarkers :)&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/7jpKRMdySw4" height="1" width="1" alt=""/&gt;</content><summary>About eight months ago, I started a very thrilling journey. That journey is just beginning and I am even more excited today than I was when we started. Yesterday, we announced Quarkus which to me represents three things: Java is at a new junction point Java is back in the game in container platforms and serverless developer experience is king A new paradigm shift Java has had a few paradigm shifts...</summary><dc:creator>Emmanuel Bernard</dc:creator><dc:date>2019-03-08T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/03/08/why-quarkus/</feedburner:origLink></entry><entry><title>Subatomic Infinispan Client</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/o3qMdzswFl8/subatomic-infinspan-client.html" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><author><name>William Burns</name></author><id>searchisko:content:id:jbossorg_blog-subatomic_infinispan_client</id><updated>2019-03-07T16:10:16Z</updated><published>2019-03-07T14:08:00Z</published><content type="html">Today, the Quarkus project was released as a public beta. &lt;a href="https://quarkus.io/"&gt;https://quarkus.io/&lt;/a&gt; For those of you not familiar, Quarkus allows you to write your enterprise apps as you have done in the past with Hibernate/JAX-RS, but also to compile these applications to a Graal-VM native image. Running in a native image allows for the application to be started up in mere milliseconds, depending upon the app, all while using much less memory. &lt;br /&gt;&lt;br /&gt;The Infinispan team is proud to announce that you can use the HotRod Java client in Quarkus and supports being compiled to a native image as well. This can allow you to startup and connect to a remote Infinispan server faster than ever before.&lt;br /&gt;&lt;br /&gt;If you want a quick and simple example of how you can get this working you can take a look at the quick start which can be found at &lt;a href="https://github.com/quarkusio/quarkus-quickstarts/tree/master/infinispan-client"&gt;https://github.com/quarkusio/quarkus-quickstarts/tree/master/infinispan-client&lt;/a&gt;. This example covers configuring the client connection, cache injection and simple get/put operations as a basis.&lt;br /&gt;&lt;br /&gt;The Infinispan Client Quarkus extension in addition to providing an easy way to create a Graal-VM native image with Infinispan Client also provides the following features to help the user get stuff done quicker.&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Automatically Inject Important Resources&lt;/li&gt;&lt;ol&gt;&lt;li&gt;RemoteCache (named)&lt;/li&gt;&lt;li&gt;RemoteCacheManger&lt;/li&gt;&lt;li&gt;CounterManager&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;User based ProtoStream Marshalling&lt;/li&gt;&lt;li&gt;Querying (Indexed / Non Indexed)&lt;/li&gt;&lt;li&gt;Continuous Query&lt;/li&gt;&lt;li&gt;Near Cache&lt;/li&gt;&lt;li&gt;Authentication/Authorization&lt;/li&gt;&lt;li&gt;Encryption&lt;/li&gt;&lt;li&gt;Counters&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;More details for these features as well as how to configure them can be found at &lt;a href="https://quarkus.io/guides/infinispan-client-guide"&gt;https://quarkus.io/guides/infinispan-client-guide&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Please let us know of any questions, concerns or suggestions at the usual places: &lt;a href="https://developer.jboss.org/en/infinispan/content"&gt;forum&lt;/a&gt; or &lt;a href="http://infinispan.zulipchat.com/"&gt;chat&lt;/a&gt;. We expect to continue enhancing this extension and would love to have any feedback.&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/5rLI1dCVRcs" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/o3qMdzswFl8" height="1" width="1" alt=""/&gt;</content><summary>Today, the Quarkus project was released as a public beta. https://quarkus.io/ For those of you not familiar, Quarkus allows you to write your enterprise apps as you have done in the past with Hibernate/JAX-RS, but also to compile these applications to a Graal-VM native image. Running in a native image allows for the application to be started up in mere milliseconds, depending upon the app, all whi...</summary><dc:creator>William Burns</dc:creator><dc:date>2019-03-07T14:08:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/5rLI1dCVRcs/subatomic-infinspan-client.html</feedburner:origLink></entry><entry><title>Introducing Quarkus: a next-generation Kubernetes native Java framework</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VY0ScjOLXQU/" /><category term="Announcement" /><category term="Community" /><category term="Java" /><category term="Kubernetes" /><category term="Quarkus" /><category term="Serverless" /><category term="containers" /><category term="GraalVM" /><category term="Hotspot" /><category term="kubernetes" /><author><name>Jason Greene</name></author><id>https://developers.redhat.com/blog/?p=570667</id><updated>2019-03-07T12:00:55Z</updated><published>2019-03-07T12:00:55Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400"&gt;Java was introduced to the open-source community over twenty years ago and to this day, it still remains very popular among developers. In fact, it has never ranked lower than #2 on the &lt;/span&gt;&lt;a href="https://www.tiobe.com/tiobe-index/"&gt;&lt;span style="font-weight: 400"&gt;TIOBE Index&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt;. Java was born in the mid-90s and has nearly twenty years of optimizations for running highly dynamic monolithic applications that assumed sole ownership of (virtualized) host CPU and memory. However, we now live in a world dominated by the cloud, mobile, IoT, and open source, where containers, Kubernetes, microservices, reactive, Function-as-a-Service (FaaS), &lt;/span&gt;&lt;a href="https://12factor.net/"&gt;&lt;span style="font-weight: 400"&gt;12-factor&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400"&gt;, and cloud-native application development can deliver higher levels of productivity and efficiency. As an industry, we need to rethink how Java can be best utilized to address these new deployment environments and application architectures.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;We’d like to introduce you to &lt;/span&gt;&lt;b&gt;Quarkus&lt;/b&gt;&lt;span style="font-weight: 400"&gt; and &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400"&gt;Supersonic Subatomic Java&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400"&gt;!&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Quarkus is a Kubernetes Native Java framework tailored for GraalVM and HotSpot, crafted from best-of-breed Java libraries and standards. &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400"&gt;The goal of Quarkus is to make Java a leading platform in Kubernetes and serverless environments while offering developers a unified reactive and imperative programming model to optimally address a wider range of distributed application architectures.&lt;/span&gt;&lt;/i&gt;&lt;/p&gt; &lt;p&gt;&lt;span id="more-570667"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400"&gt;Container First&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Quarkus delivers significant runtime efficiencies (based on Red Hat testing), such as:&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" size-medium wp-image-571187 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.49-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.49-PM-300x83.png" alt="" width="300" height="83" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.49-PM-300x83.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.49-PM.png 311w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Fast Startup (tens of milliseconds) allows automatic scaling up and down of microservices on containers and Kubernetes as well as FaaS on-the-spot execution&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Low memory utilization helps optimize container density in microservices architecture deployments requiring multiple containers &lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Smaller application and container image footprint&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;span style="font-weight: 400"&gt;Unifies Imperative and Reactive&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Most Java developers are familiar with the imperative programming model and would like to utilize that experience when adopting a new platform. At the same time, developers are rapidly adopting a cloud native, event-driven, asynchronous, and reactive model to address business requirements &lt;/span&gt;&lt;span style="font-weight: 400"&gt;to build highly concurrent and responsive applications&lt;/span&gt;&lt;span style="font-weight: 400"&gt;. Quarkus is designed to seamlessly brings the two models together in the same platform, resulting in strong leverage within an organization.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400"&gt;Developer Joy&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;A cohesive platform for optimized developer joy:&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" size-medium wp-image-571207 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.59-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.59-PM-300x83.png" alt="" width="300" height="83" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.59-PM-300x83.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screen-Shot-2019-03-06-at-3.44.59-PM.png 311w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Unified configuration with all configuration in a single property file.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Zero config, live reload in the blink of an eye&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;Streamlined code for the 80% common usages, flexible for the 20%&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400"&gt;&lt;span style="font-weight: 400"&gt;No hassle native executable generation&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;&lt;span style="font-weight: 400"&gt;Best of Breed Libraries and Standards&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Quarkus brings a cohesive, fun-to-use full-stack framework by leveraging best of breed libraries you love and use wired on a standard backbone &amp;#8211; these include Eclipse MicroProfile, JPA/Hibernate, JAX-RS/RESTEasy, Eclipse Vert.x, Netty, and more.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Quarkus also includes an extension framework that third-party framework authors can leverage to extend it. The Quarkus extension framework reduces the complexity for making third-party frameworks run on Quarkus and compile to a GraalVM native binary.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400"&gt;Summary&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Quarkus provides an effective solution for running Java in this new world of serverless, microservices, containers, Kubernetes, FaaS, and the cloud because it has been designed with these in mind. Its container-first approach for cloud-native Java applications unifies imperative and reactive programming paradigms for microservices development and offers an extensible set of standards-based enterprise Java libraries and frameworks combined with extreme developer productivity that promises to revolutionize the way we develop in Java.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;We’d love you to join the Quarkus open-source community. If you’re interested in helping us continue to improve Quarkus, developing third-party extensions, using Quarkus to develop applications, or if you’re just curious about it, please join us at:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;span style="font-weight: 400"&gt;Quarkus website: &lt;/span&gt;&lt;a href="http://quarkus.io"&gt;&lt;span style="font-weight: 400"&gt;http://quarkus.io&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400"&gt;Quarkus GitHub project: &lt;/span&gt;&lt;span style="font-weight: 400"&gt;https://github.com/quarkusio/quarkus&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400"&gt;Quarkus Twitter: &lt;/span&gt;&lt;a href="https://twitter.com/QuarkusIO"&gt;&lt;span style="font-weight: 400"&gt;https://twitter.com/QuarkusIO&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400"&gt;Quarkus chat: &lt;/span&gt;&lt;a href="https://quarkusio.zulipchat.com/"&gt;&lt;span style="font-weight: 400"&gt;https://quarkusio.zulipchat.com/&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400"&gt;Get quarked! and let’s start building some hadrons&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#38;linkname=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fquarkus-next-generation-kubernetes-native-java-framework%2F&amp;#038;title=Introducing%20Quarkus%3A%20a%20next-generation%20Kubernetes%20native%20Java%20framework" data-a2a-url="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/" data-a2a-title="Introducing Quarkus: a next-generation Kubernetes native Java framework"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Introducing Quarkus: a next-generation Kubernetes native Java framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VY0ScjOLXQU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Java was introduced to the open-source community over twenty years ago and to this day, it still remains very popular among developers. In fact, it has never ranked lower than #2 on the TIOBE Index. Java was born in the mid-90s and has nearly twenty years of optimizations for running highly dynamic monolithic applications that [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Introducing Quarkus: a next-generation Kubernetes native Java framework&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">570667</post-id><dc:creator>Jason Greene</dc:creator><dc:date>2019-03-07T12:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/</feedburner:origLink></entry><entry><title>Quarkus is here!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/83kZ-ozMEI8/quarkus-is-here" /><category term="Camel" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="feed_group_name_management" scheme="searchisko:content:tags" /><category term="feed_name_marklittle" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="narayana" scheme="searchisko:content:tags" /><category term="protean" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="substratevm" scheme="searchisko:content:tags" /><category term="vert.x" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Mark Little</name></author><id>searchisko:content:id:jbossorg_blog-quarkus_is_here</id><updated>2019-03-07T11:54:46Z</updated><published>2019-03-07T11:54:46Z</published><content type="html">&lt;!-- [DocumentBodyStart:0a71c8e2-1e08-4b7d-a4bd-30cffe7b0ce0] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;We&amp;#8217;ve finally released &lt;a class="jive-link-external-small" href="https://quarkus.io/" rel="nofollow"&gt;Quarkus&lt;/a&gt;, a project the team have been working on for the past 9 months. Our internal project name for the work was Protean because, as you&amp;#8217;ll see, our aim is for it to be incredibly versatile and flexible for cloud development and deployment. &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework" rel="nofollow"&gt;There are other articles&lt;/a&gt; and presentations to come which will go into more detail but I wanted to give an overview of what we&amp;#8217;re trying to achieve with Quarkus. (Yes, naming is the hardest part of computer science.)&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In many ways it&amp;#8217;s possible to trace the heritage of Quarkus back to around 2010/2011 when we started to work on improvements to &lt;a class="jive-link-external-small" href="https://jaxenter.com/interview-mark-little-discusses-jboss-eap-6-104736.html" rel="nofollow"&gt;JBossAS with version 6 and subsequently WildFly&lt;/a&gt;. The aim of that was to ensure EAP could run well in the first release of OpenShift as well as on constrained devices (aka IoT); maybe some of the readers were present at the &lt;a class="jive-link-external-small" href="https://www.redhat.com/en/blog/behind-the-scenes-jboss-world-2011-keynote-and-live-demo" rel="nofollow"&gt;JBossWorld keynote&lt;/a&gt; where we &lt;a class="jive-link-external-small" href="https://vimeo.com/24798138" rel="nofollow"&gt;demonstrated running on plug devices&lt;/a&gt;, as Raspberry Pis were just about to break onto the world. The cloud focus imposed similar requirements on us as IoT: limited processing power some of the time, reduced memory availability, storage restrictions etc. Generally our thoughts were that if we could get projects and services which ran well on a constrained device then they&amp;#8217;d stand a good chance of running well on the cloud.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Over the following years we&amp;#8217;ve had many OpenShift releases, further improvements in &lt;a class="jive-link-external-small" href="https://www.redhat.com/en/blog/openshift-is-the-first-paas-to-support-java-ee-6-full-profile-in-the-cloud" rel="nofollow"&gt;WildFly&lt;/a&gt; and other projects, our entire &lt;a class="jive-link-blog-small" data-containerId="1427" data-containerType="37" data-objectId="5330" data-objectType="38" href="https://developer.jboss.org/blogs/mark.little/2013/09/24/xpaas"&gt;xPaaS&lt;/a&gt; efforts to bring our core capabilities such as transactions, messaging, data caching etc. &lt;a class="jive-link-blog-small" data-containerId="1427" data-containerType="37" data-objectId="5613" data-objectType="38" href="https://developer.jboss.org/blogs/mark.little/2014/11/08/the-enterprise-middleware-platform"&gt;as services on OpenShift&lt;/a&gt;. In that time the entire cloud space has seen a number of paradigm shifts including the massive adoption of Linux containers and Kubernetes. In the middleware space we&amp;#8217;ve tuned our projects and services to work well with both and &lt;a class="jive-link-blog-small" data-containerId="1427" data-containerType="37" data-objectId="5811" data-objectType="38" href="https://developer.jboss.org/blogs/mark.little/2015/10/27/next-generation-frameworks-and-stacks"&gt;outlined the vision&lt;/a&gt; for where we are going and why. With our OpenJDK team continuing to collaborate upstream we&amp;#8217;ve also been making changes to Java to ensure it runs well in those environments as well.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;However, despite Red Hat/JBoss and other vendors and communities showing that Java works well in the cloud, doubts remain and there are some often cited causes for concern. The JVM represents a huge and impressive amount of work by countless developers from a number of vendors over two decades. Despite the fact Java began life aimed at constrained devices, it rapidly evolved into a world where the assumptions are quite different to the cloud today, e.g., able to consume a lot of memory,&amp;#160; requirements to dynamically update the running application/environment and other run-time optimisations. It's important to remember that Java remains the number 1 programming language for enterprise developers working on the backend and many organisations have invested a lot of time and money into their Java-based developer organisations and software because it has dominated the software landscape for so many years. Being able to continue to leverage those things as they transition to the cloud is therefore incredibly important for this huge community. But concerns about Java (performance, runtime memory footprint, boot time etc.) have caused some to re-evaluate their investment with Java and consider some of the newer languages, despite the fact many of those languages don&amp;#8217;t yet have the rich ecosystem of tools, utilities etc. which have been built up over the years by the Java community.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Therefore, being able to continue to leverage this Java community and ensure that our own communities and customers can do so too, has been one of the important reasons behind what we&amp;#8217;ve been doing with Quarkus and what you'll hear about soon. As we also pointed out when we kicked off xPaaS, we also want to take advantage of as much of our own community efforts as possible because things such as WildFly, Hibernate, Apache ActiveMQ, Apache Camel, Infinispan, Narayana, Drools, jBPM, Eclipse Vert.x and many others are mature, category leaders which we believe are still relevant in the cloud space. We&amp;#8217;d prefer to enable our communities and customers to be able to continue to rely on them rather than having to start from scratch.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;OK so what is Quarkus and how does any of what I&amp;#8217;ve said (The Context above) related to it? Well broadly speaking Quarkus work falls into two categories:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Leveraging OpenJDK leadership and cloud improvements, as well as the Graal and Substrate projects, it provides a way to develop Kubernetes native Java applications and microservices. As you will see from other articles, our new website, or even the quickstarts, this covers a range of things. For example, in a Kubernetes environment the Linux container images are immutable, so dynamically modifying the running application, as is possible with approaches similar to those used within the WildFly microcontainer, is typically not necessary. Furthermore, despite the fact that Write Once Run Anywhere is important for Java developers off the cloud, it&amp;#8217;s less important when running in Kubernetes where Linux dominates. If you consider some of these constraints as possible advantages when you are targeting the cloud, heavily optimising your Java application at build-time, including potentially compiling Java to a native executable, offer some possibilities for improvement in the cloud compared to traditional Java. For example, if you can compare compiled Java with its bytecode cousin, the memory utilisation can be significantly less and the boot time can likewise be considerably quicker. And if you, as a developer, need to make changes to your application then you do so in the way all Kubernetes developers do today ... create a new container image and deploy it, as simple and quickly as that.&lt;/li&gt;&lt;li&gt;Faster, smaller and more Kube-native Java based upon existing implementations is all well and good but we simply couldn&amp;#8217;t stop there. Building on the work we&amp;#8217;d been doing around xPaaS, as well as new cloud work such as Strimzi and OpenShift Cloud Functions, the team all agreed that we needed to define a prescriptive Kubernetes native environment. We want to build on and hopefully influence industry standards such as Eclipse MicroProfile and Eclipse Jakarta EE. We&amp;#8217;re taking an opinionated view on things such as Knative (for our serverless work), asychronous reactive/event-driven microservices (yes, Eclipse Vert.x has a huge role to play) and generally anything that we feel makes Kubernetes-native Java development better for public, private and hybrid cloud.&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;I&amp;#8217;ve only touched the surface of the work the team embarked upon last year. I hope to write some more about this over the coming months and maybe do some presentations with the developers. Come to Summit 2019 and hear from us first hand (&lt;a class="jive-link-external-small" href="https://summit.redhat.com/conference/sessions" rel="nofollow"&gt;check the agenda and search for Protean&lt;/a&gt;). Many of our products and projects either already are making the Quarkus journey or plan to join soon. I&amp;#8217;ll be continuing to support this upstream and in our products as a key effort for Red Hat. I&amp;#8217;m even hoping to be able to get back to contributing some more transactions related work when I get some spare time - the little I managed to do back when we kicked off the work was enjoyable.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:0a71c8e2-1e08-4b7d-a4bd-30cffe7b0ce0] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/83kZ-ozMEI8" height="1" width="1" alt=""/&gt;</content><summary>We’ve finally released Quarkus, a project the team have been working on for the past 9 months. Our internal project name for the work was Protean because, as you’ll see, our aim is for it to be incredibly versatile and flexible for cloud development and deployment. There are other articles and presentations to come which will go into more detail but I wanted to give an overview of what we’re tryin...</summary><dc:creator>Mark Little</dc:creator><dc:date>2019-03-07T11:54:46Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/mark.little/2019/03/07/quarkus-is-here</feedburner:origLink></entry><entry><title>OpenShift 4.0 Developer Preview on AWS is up and running</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wMMCtIgJO6g/" /><category term="Cloud" /><category term="Containers" /><category term="Developer Tools" /><category term="OpenShift" /><category term="amazon web services" /><category term="AWS" /><category term="developer preview" /><category term="OpenShift4" /><category term="Red Hat OpenShift" /><author><name>Don Schenck</name></author><id>https://developers.redhat.com/blog/?p=564037</id><updated>2019-03-07T08:00:36Z</updated><published>2019-03-07T08:00:36Z</published><content type="html">&lt;p&gt;The &lt;a href="https://try.openshift.com"&gt;OpenShift 4.0 Developer Preview&lt;/a&gt; is available for Amazon Web Services (AWS), and if you’re anything like me, you want to be among the first to get your hands on it.&lt;/p&gt; &lt;p&gt;The starting point is &lt;a href="https://try.openshift.com"&gt;try.openshift.com&lt;/a&gt;, where you’ll find overview information and that important “Get Started” button. Click it and you’re off to the big show.&lt;/p&gt; &lt;p&gt;&lt;span id="more-564037"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;(If you aren&amp;#8217;t a &lt;a href="https://developers.redhat.com/"&gt;Red Hat Developer&lt;/a&gt; member, this is your reason to &lt;a href="https://developers.redhat.com/auth/realms/rhd/protocol/openid-connect/registrations?client_id=web&amp;#38;redirect_uri=https%3A%2F%2Fdevelopers.redhat.com%2F%2Fconfirmation&amp;#38;state=76233dbe-8a82-40c4-8da1-43aafef5d311&amp;#38;nonce=39c0accb-3936-46ae-8e66-ea37125c47fd&amp;#38;response_mode=fragment&amp;#38;response_type=code"&gt;sign up&lt;/a&gt;. In fact, you must be a member in order to access the information and bits, but it’s free and easy and valuable, so why not?)&lt;/p&gt; &lt;p&gt;Once you get to the &lt;a href="https://cloud.openshift.com/clusters/install"&gt;Developer Preview page&lt;/a&gt;, you’ll find the instructions and necessary links. If you’re already skilled in using AWS, you’ll speed right along with no problems. But if you’re anything like I was two weeks ago, you’re a newbie to AWS and additional information would be helpful. This blog post is that “additional information.&amp;#8221;&lt;/p&gt; &lt;h2&gt;My newbie experience&lt;/h2&gt; &lt;p&gt;There are some things you’ll need to do or understand or points that will make your life easier. As a newbie to AWS, I&amp;#8217;ve gathered them here so you won&amp;#8217;t struggle or fail where I did.&lt;/p&gt; &lt;h3&gt;You need to register your cluster domain in AWS Route 53&lt;/h3&gt; &lt;p&gt;What is AWS Route 53? It’s the AWS DNS server. You need your domain to be registered there so AWS can direct traffic to your cluster, which means…you need a domain.&lt;/p&gt; &lt;p&gt;If this is experimental, evaluation, or proof-of-concept work you’re doing, I suggest registering a cheap domain for use here. I registered rhdemos.com, which was available and cheap (about eight dollars a year) and allows me to have complete freedom with the domain without worrying about muddying the waters of another (production) domain. It’s just easier for me to manage.&lt;/p&gt; &lt;p&gt;I registered rhdemos.com in Route 53 and received a message that it may take a while, but it turned out to be just a few minutes. This is good; computers are all about speed, and I hate waiting.&lt;/p&gt; &lt;p&gt;This was all new territory to me, and I managed to find my way through the AWS documents (the link to the documents is on the &lt;a href="https://cloud.openshift.com/clusters/install"&gt;Developer Preview page&lt;/a&gt;). The part of this that struck me as “good to know” was this: I downloaded files and configured my credentials on my work MacBook Pro—only on that single machine. I can also do the same thing for any other machine I use, but my life is easier (okay, I’m lazy) by just sticking to this particular machine when working with OpenShift 4.0 on AWS. Not a big deal. If you want to enable multiple machines, you may want to do this step on several machines at the same time while it’s all fresh in your mind. That&amp;#8217;s not a problem; it&amp;#8217;s just a consideration.&lt;/p&gt; &lt;h3&gt;Now you&amp;#8217;re almost ready&lt;/h3&gt; &lt;p&gt;I just needed to download the installer and then I’d be ready to go. I followed the link on the &lt;a href="https://cloud.openshift.com/clusters/install"&gt;Developer Preview page&lt;/a&gt;, made sure it was in my path and enabled (that is, &lt;code&gt;chmod +x…&lt;/code&gt;), and I was ready.&lt;/p&gt; &lt;p&gt;Now for the fun and easy part: You simply run the command &lt;code&gt;./openshift-install create cluster&lt;/code&gt; and off it goes. Just be certain you have all your credentials and settings right. If you don’t, the install won’t succeed (don’t ask me how I know this). If it does fail, and you’re lazy or not-thinking like I was, you go into AWS and start deleting assets right and left, all over the place.&lt;/p&gt; &lt;p&gt;Or, if you’re smarter than I was, you can run &lt;code&gt;./openshift-install --help&lt;/code&gt; and see that you can simply use the command &lt;code&gt;./openshift-install destroy cluster&lt;/code&gt; to delete everything and start over.&lt;/p&gt; &lt;p&gt;Boy did I felt dumb.&lt;/p&gt; &lt;p&gt;TL;DR: &lt;code&gt;./openshift-install destroy cluster&lt;/code&gt; can be used to remove a cluster and all the associated artifacts.&lt;/p&gt; &lt;h3&gt;You can create and wipe things out quickly&lt;/h3&gt; &lt;p&gt;After running the command to destroy things, I ran the install with no problems. During the install, you’ll be asked which AWS region to use (I used my default value), the base domain (remember, the domain name you registered?), a cluster name (whatever you want), and a &amp;#8220;pull secret.&amp;#8221; The pull secret comes from the Developer Preview web page and is unique to your email address. I copied mine to a document on my Mac’s desktop to keep it handy.&lt;/p&gt; &lt;p&gt;The OpenShift installation took nearly 24 minutes (Figure 1, below), after which it displayed important information about logging in, passwords, and web access (Figure 2, below). Keep this information handy.&lt;/p&gt; &lt;div id="attachment_564467" style="width: 275px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.11-PM.png"&gt;&lt;img aria-describedby="caption-attachment-564467" class="wp-image-564467 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.11-PM.png" alt="OpenShift installation time" width="265" height="323" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.11-PM.png 265w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.11-PM-246x300.png 246w" sizes="(max-width: 265px) 100vw, 265px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-564467" class="wp-caption-text"&gt;Figure 1: Okay, not quite 24 minutes&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;div id="attachment_564477" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.21-PM.png"&gt;&lt;img aria-describedby="caption-attachment-564477" class="wp-image-564477 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.21-PM-1024x201.png" alt="Information about logging in, passwords, and web access" width="640" height="126" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.21-PM-1024x201.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.21-PM-300x59.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.21-PM-768x151.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/Screen-Shot-2019-02-20-at-12.51.21-PM.png 1332w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-564477" class="wp-caption-text"&gt;Figure 2: Keep this information handy. (This is just an example. Go ahead and try it; it won&amp;#8217;t work.)&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Since I’m just experimenting with OpenShift 4.0 on AWS, I regularly create and destroy a cluster. I have not been leaving the cluster running 24&amp;#215;7; why spend the money if it’s not necessary? It’s just too easy to create a cluster and then destroy it at the end of the day. This is definitely a big plus, and &lt;em&gt;kudos to the engineers for making this so easy&lt;/em&gt;.&lt;/p&gt; &lt;h3&gt;You now have options&lt;/h3&gt; &lt;p&gt;Yes, you can run &lt;a href="http://openshift.com/"&gt;OpenShift&lt;/a&gt; on your local PC using minishift. And that’s a great way to ease into OpenShift. But if you want to kick things up a notch (like, say, installing and using &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady Workspaces&lt;/a&gt;) or give other team members at work access to your cluster, this works swimmingly. Plus, the performance is better than minishift running on your PC (which is sharing CPU cycles with Slack, Chrome, your email client, and so on).&lt;/p&gt; &lt;h3&gt;Don’t forget: The AWS meter is running&lt;/h3&gt; &lt;p&gt;You’re running things on AWS. You will pay for the AWS resources (for CPU cycles and disk and all the other parts). You can run up a hefty bill if you’re not mindful. Keep tabs on things, and destroy the cluster if you don’t need it. You’ve been warned.&lt;/p&gt; &lt;h2&gt;Go for it&lt;/h2&gt; &lt;p&gt;By combining the real-world advice above with the excellent instructions on the &lt;a href="https://cloud.openshift.com/clusters/install"&gt;Developer Preview page&lt;/a&gt;, you can have OpenShift 4.0 Developer Preview up and running on AWS in minutes. This is your chance to grab those bragging rights &amp;#8230; I mean, to evaluate. Yeah.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#38;linkname=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F07%2Fopenshift-4-0-developer-preview-on-aws-is-up-and-running%2F&amp;#038;title=OpenShift%204.0%20Developer%20Preview%20on%20AWS%20is%20up%20and%20running" data-a2a-url="https://developers.redhat.com/blog/2019/03/07/openshift-4-0-developer-preview-on-aws-is-up-and-running/" data-a2a-title="OpenShift 4.0 Developer Preview on AWS is up and running"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/07/openshift-4-0-developer-preview-on-aws-is-up-and-running/"&gt;OpenShift 4.0 Developer Preview on AWS is up and running&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wMMCtIgJO6g" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The OpenShift 4.0 Developer Preview is available for Amazon Web Services (AWS), and if you’re anything like me, you want to be among the first to get your hands on it. The starting point is try.openshift.com, where you’ll find overview information and that important “Get Started” button. Click it and you’re off to the big [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/07/openshift-4-0-developer-preview-on-aws-is-up-and-running/"&gt;OpenShift 4.0 Developer Preview on AWS is up and running&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/03/07/openshift-4-0-developer-preview-on-aws-is-up-and-running/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">564037</post-id><dc:creator>Don Schenck</dc:creator><dc:date>2019-03-07T08:00:36Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/07/openshift-4-0-developer-preview-on-aws-is-up-and-running/</feedburner:origLink></entry><entry><title>Triple cachestore release: Cloud, MongoDB and Cassandra</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/aC9M_v6eYjY/triple-cachestore-release-cloud-mongodb.html" /><category term="cache store" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="release" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-triple_cachestore_release_cloud_mongodb_and_cassandra</id><updated>2019-03-07T07:19:07Z</updated><published>2019-03-06T15:07:00Z</published><content type="html">Today we present to you a trifecta of cache store releases which align to Infinispan 9.x &lt;br /&gt;&lt;h4&gt;Cassandra Cache Store&lt;/h4&gt;The Cassandra cache store now implements the &lt;a href="https://docs.jboss.org/infinispan/9.4/apidocs/org/infinispan/persistence/spi/AdvancedCacheLoader.html#publishEntries(java.util.function.Predicate,boolean,boolean)" target="_blank"&gt;publishEntries/publishKeys&lt;/a&gt; methods.&lt;br /&gt;&lt;h4&gt;Cloud Cache Store&lt;/h4&gt;The Cloud cache store uses the Apache jclouds library to store data on cloud storage providers such as Amazon’s S3, Rackspace’s Cloudfiles or any other such provider supported by JClouds.&lt;br /&gt;The store has been updated to Infinispan 9.x's persistence SPI and uses jclouds 2.1.x&lt;br /&gt;&lt;h4&gt;MongoDB Cache Store&lt;/h4&gt;This cache store has also been updated to the Infinispan 9.x persistence SPI.&lt;br /&gt;&lt;br /&gt;You can get documentation and maven coordinates from our &lt;a href="http://infinispan.org/cache-store-implementations/" target="_blank"&gt;Cache Store page&lt;/a&gt;&lt;img src="http://feeds.feedburner.com/~r/Infinispan/~4/QDxy-HhL5OI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/aC9M_v6eYjY" height="1" width="1" alt=""/&gt;</content><summary>Today we present to you a trifecta of cache store releases which align to Infinispan 9.x Cassandra Cache StoreThe Cassandra cache store now implements the publishEntries/publishKeys methods. Cloud Cache StoreThe Cloud cache store uses the Apache jclouds library to store data on cloud storage providers such as Amazon’s S3, Rackspace’s Cloudfiles or any other such provider supported by JClouds. The ...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2019-03-06T15:07:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/Infinispan/~3/QDxy-HhL5OI/triple-cachestore-release-cloud-mongodb.html</feedburner:origLink></entry><entry><title>Changes made to the Libabigail ABI change analysis framework in 2018</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cLOXkQghm8c/" /><category term="C" /><category term="C++" /><category term="Community" /><category term="Developer Tools" /><category term="Open source" /><category term="Programming Languages" /><category term="Red Hat Enterprise Linux" /><category term="ABI" /><category term="Abigail" /><category term="change analysis" /><category term="Libabigail" /><category term="RHEL" /><author><name>Dodji Seketeli</name></author><id>https://developers.redhat.com/blog/?p=564347</id><updated>2019-03-06T08:05:18Z</updated><published>2019-03-06T08:05:18Z</published><content type="html">&lt;p&gt;This article is for people interested in the long-term maintenance of software systems that expose application binary interfaces (a.k.a. ABIs) to other systems. That long-term maintenance involves detecting and analyzing inevitable changes in the ABIs and assessing whether these changes allow the maintained systems to stay compatible with the components with which they interact.&lt;/p&gt; &lt;p&gt;In this article, I describe what happened to the ABI change analysis framework that I worked on during 2018: the &lt;a href="https://sourceware.org/libabigail/manual/index.html"&gt;Abigail library (Libabigail) and its associated set of tools&lt;/a&gt;. The goal is not to list the myriad changes that happened throughout releases &lt;a href="https://sourceware.org/ml/libabigail/2018-q1/msg00015.html"&gt;1.2&lt;/a&gt;, &lt;a href="https://sourceware.org/ml/libabigail/2018-q2/msg00010.html"&gt;1.3&lt;/a&gt;, &lt;a href="https://sourceware.org/ml/libabigail/2018-q3/msg00000.html"&gt;1.4&lt;/a&gt;, and &lt;a href="https://sourceware.org/ml/libabigail/2018-q4/msg00019.html"&gt;1.5&lt;/a&gt; that occurred during that year, but I will walk you through the main changes that happened and put them in perspective.&lt;/p&gt; &lt;p&gt;&lt;span id="more-564347"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Core functionality improvements&lt;/h2&gt; &lt;p&gt;These are improvements to the core library. They are thus propagated to all the tools using the library.&lt;/p&gt; &lt;h3&gt;General improvement to the leaf change report&lt;/h3&gt; &lt;p&gt;Several Libabigail tools can emit change reports using either a default reporting mode or a leaf change reporting mode. In the latter mode, only changes on types, variables, and functions are reported. Unlike in the default reporting mode, the impact of those changes (for example, which function was impacted by a given type change and how) is not reported. In other words, if changes are linked to each other in a tree-like manner, only the leaves are reported in this mode. The &lt;a href="https://sourceware.org/libabigail/manual/kmidiff.html"&gt;kmidiff&lt;/a&gt; tool, for instance,  uses this mode by default. And &lt;a href="https://sourceware.org/libabigail/manual/abidiff.html"&gt;abidiff&lt;/a&gt; can emit reports using this mode, using the &lt;code&gt;--leaf-changes-only&lt;/code&gt; option.&lt;/p&gt; &lt;p&gt;Source locations of the changes on types are now reported in this mode.&lt;/p&gt; &lt;p&gt;The introductory summary of changes emitted at the beginning of change reports in this mode has been improved.&lt;/p&gt; &lt;p&gt;The meaningfulness of change reports in this mode has been generally improved through many little changes, making the output of the kmidiff tool (in particular) much more usable.&lt;/p&gt; &lt;h3&gt;Improved redundancy detection&lt;/h3&gt; &lt;p&gt;Whenever Libabigail emits change reports, it avoids reporting the &amp;#8220;same&amp;#8221; change twice.  For instance, let&amp;#8217;s suppose we have a type &lt;code&gt;struct Foo&lt;/code&gt; like this:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt; struct Foo { int m0; };&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;Suppose that type is used by two functions named &lt;code&gt;function1&lt;/code&gt; and &lt;code&gt;function2&lt;/code&gt;, as shown below:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;void function1(struct Foo *a) { } void function2(struct Foo *b) { }&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;Now let&amp;#8217;s see how &lt;a href="https://sourceware.org/libabigail/manual/abidiff.html"&gt;abidiff&lt;/a&gt; compares the ABIs of two versions of the binary that contain the definition of &lt;code&gt;struct&lt;/code&gt;&lt;code&gt;Foo&lt;/code&gt;, &lt;code&gt;function1&lt;/code&gt;, and &lt;code&gt;function2&lt;/code&gt;, where the only change that occurred is adding a data member to &lt;code&gt;struct Foo&lt;/code&gt;, like this:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt; struct Foo { int m0; + char m0; };&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;The result of invoking &lt;a href="https://sourceware.org/libabigail/manual/abidiff.html"&gt;abidiff&lt;/a&gt; on the two versions of the binary would be as follows:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;$ abidiff test-v0.o test-v1.o Functions changes summary: 0 Removed, 1 Changed (1 filtered out), 0 Added functions Variables changes summary: 0 Removed, 0 Changed, 0 Added variable 1 function with some indirect sub-type change: [C]'function void function1(Foo*)' at test-v1.cc:8:1 has some indirect sub-type changes: parameter 1 of type 'Foo*' has sub-type changes: in pointed to type 'struct Foo' at test-v1.cc:1:1: type size changed from 32 to 64 (in bits) 1 data member insertion: 'char Foo::m1', at offset 32 (in bits) at test-v1.cc:4:1 $&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;Notice how the change to &lt;code&gt;struct Foo&lt;/code&gt; is reported as impacting &lt;code&gt;function1&lt;/code&gt;&lt;em&gt;. &lt;/em&gt;But &lt;code&gt;function2&lt;/code&gt; also uses &lt;code&gt;struct Foo&lt;/code&gt;, and abidiff voluntarily avoids reporting the &lt;code&gt;struct Foo&lt;/code&gt; change in the context of &lt;code&gt;function2&lt;/code&gt; because such a report would be redundant.&lt;/p&gt; &lt;p&gt;There are cases, though, where we want to report redundant changes. For instance, we want to report all instances of function parameter changes where the type &lt;code&gt;const char*&lt;/code&gt; was modified to &lt;code&gt;char*&lt;/code&gt;&lt;em&gt;. &lt;/em&gt;Those changes should not be considered redundant.  This is an area where Libabigail was lacking. It was over-filtering redundant changes. This is improved now.&lt;/p&gt; &lt;p&gt;Another case of redundancy detection improvement is on &lt;code&gt;enum&lt;/code&gt; types. The reporting pass of Libabigail was failing to detect that a given change to an &lt;code&gt;enum&lt;/code&gt; type was already reported. So there were cases were the tools would report a given &lt;code&gt;enum&lt;/code&gt; type changed several times in several different contexts. This was fixed.&lt;/p&gt; &lt;h3&gt;Improved categorizing of changes&lt;/h3&gt; &lt;p&gt;Whenever Libabigail&amp;#8217;s comparison engine detects that an ABI artifact (for example, a symbol, type, or declaration) has changed, that change is modeled in an internal (in-memory) representation, a.k.a the &lt;em&gt;diff IR&lt;/em&gt;.  The diff IR is a graph where the nodes are the artifact changes (a.k.a. diff nodes).  The diff IR is later processed by various passes for various purposes.  The purpose of one of those passes is to &lt;em&gt;categorize&lt;/em&gt; the changes carried by each diff node. Each change carried by each diff node ends up in one of three big categories: harmful change, harmless changes, and non-categorized changes.&lt;/p&gt; &lt;p&gt;Later, when the diff IR is traversed for the purpose of emitting change reports, harmless changes can, for instance, be omitted by default. This helps to increase the signal-to-noise ratio of change reports by being able to avoid reporting ABI changes that are deemed not important to users. But this categorizing business (particularly the part where we tried to improve it) seems to be the never-ending kind.&lt;/p&gt; &lt;p&gt;One example of a recent improvement made is the &amp;#8220;harmless name change&amp;#8221; category. Whenever a diff IR node carries a &lt;code&gt;typedef&lt;/code&gt; or an &lt;code&gt;enum&lt;/code&gt; type name change, Libabigail would consider that change to be harmless. That, in turns, allows the change reporting pass to avoid showing &lt;code&gt;typedef&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt; name changes by default, because these have no impact on the ABI of the library we are looking at. This is all fine and dandy unless the diff IR node also carries other changes that might not be considered harmless. Thus, the change categorizing engine of Libabigail has now &amp;#8220;tightened up&amp;#8221; the conditions for which to categorize a &lt;code&gt;typedef&lt;/code&gt; or &lt;code&gt;enum&lt;/code&gt; type diff IR node as a harmless name change.  For &lt;code&gt;typedef&lt;/code&gt; types, a name change is now considered harmless only if there is no change in the textual representation of the underlying type. For &lt;code&gt;enum&lt;/code&gt; types, a name change is now considered harmless only if there is no other change in the &lt;code&gt;enum&lt;/code&gt;, for example, on the enumerators or on the underlying type.&lt;/p&gt; &lt;p&gt;&lt;a href="https://en.cppreference.com/w/cpp/language/cv"&gt;CV-qualifier&lt;/a&gt; changes on return types of functions are now also categorized as harmless by default. Note that these were already categorized as harmless on function parameter types.&lt;/p&gt; &lt;p&gt;Whenever a &lt;code&gt;void*&lt;/code&gt; pointer is changed into a more &amp;#8220;typed&amp;#8221; pointer, that change is now categorized as harmless by default.&lt;/p&gt; &lt;h3&gt;Support of anonymous data members&lt;/h3&gt; &lt;p&gt;An anonymous data member is a data member of a &lt;code&gt;struct&lt;/code&gt; or a union that has no name. The type of such a data member is either a &lt;code&gt;struct&lt;/code&gt; or a union, for instance:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;struct Foo { int a; struct /* &amp;#60;-- This is an anonymous data member. */ { char b; char c; }; int d; };&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;The debug information emitted by &lt;a href="https://gcc.gnu.org"&gt;GCC&lt;/a&gt; in the &lt;a href="http://dwarfstd.org/Dwarf5Std.php"&gt;DWARF&lt;/a&gt; format describes such anonymous data member constructs, but the DWARF reader and the various internal representations of Libabigail had to be adapted to support them. This is now supported.&lt;/p&gt; &lt;h3&gt;Better support for ELF symbol versions&lt;/h3&gt; &lt;p&gt;An ELF symbol can have multiple versions, and Libabigail has been supporting this feature for a long time. But when a function symbol &lt;em&gt;S&lt;/em&gt; has several versions and several different functions with different names have those different versions of &lt;em&gt;S&lt;/em&gt; as underlying symbols, Libabigail could mistakenly take one function for another. This is because there are cases where Libabigail identifies the function using its symbol name without taking the version name into account. This has now been fixed and Libabigail always takes the symbol version into account when identifying a function.&lt;/p&gt; &lt;h3&gt;Support for union types in suppression specifications&lt;/h3&gt; &lt;p&gt;Libabigail (and its tools) allows users to suppress change reports based on what they want. Users can provide a file in which they describe the kind of artifacts for which changes should be suppressed. For instance, a user can say that changes to a type named &lt;code&gt;FooPrivateType&lt;/code&gt; should not be reported by the tool. To do so, the user would write a suppression specification file that would look like this:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;[suppress_type] name = FooPrivateType&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;That suppression specification file would then be passed to the Libabigail tools using appropriate options.&lt;/p&gt; &lt;p&gt;That kind of suppression specification now acts on &lt;em&gt;union&lt;/em&gt; types as well.&lt;/p&gt; &lt;h2&gt;Default suppression specification for new projects&lt;/h2&gt; &lt;p&gt;Libabigail installs default suppression specifications that are used automatically and implicitly used by tools like &lt;a href="https://sourceware.org/libabigail/manual/abidiff.html"&gt;abidiff&lt;/a&gt; and &lt;a href="https://sourceware.org/libabigail/manual/abipkgdiff.html"&gt;abipkgdiff&lt;/a&gt; whenever these compare some shared libraries identified either by their filename or their &lt;a href="https://en.wikipedia.org/wiki/Soname"&gt;soname&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Whenever a particular project team feels the need to define a set of specific suppression rules (for example, to suppress changes detected on types or symbols that are deemed private, based on a specific naming scheme), project members can reach out to Libabigail developers so that together, we come up with a default suppression specification for the project.  Libabigail already installs default suppression specifications for several system libraries, for instance.&lt;/p&gt; &lt;p&gt;In that spirit, a new default suppression specification is now installed for the &lt;a href="https://web.mit.edu/kerberos/"&gt;krb5&lt;/a&gt; and &lt;a href="https://libvirt.org/"&gt;libvirt&lt;/a&gt; projects and their libraries.&lt;/p&gt; &lt;h2&gt;Tools-specific improvements&lt;/h2&gt; &lt;h3&gt;fedabipkgdiff&lt;/h3&gt; &lt;p&gt;&lt;a href="https://sourceware.org/libabigail/manual/fedabipkgdiff.html"&gt;Fedabipkgdiff&lt;/a&gt; is a command-line tool to compare the ABI of ELF binaries contained in &lt;a href="https://getfedora.org/"&gt;Fedora&lt;/a&gt; packages. It interacts with the &lt;a href="https://koji.fedoraproject.org/koji/"&gt;Fedora build system&lt;/a&gt; to get the packages to act on.&lt;/p&gt; &lt;p&gt;This tool was ported over to Python 3 as part of the general effort to move over to Python 3 in Fedora. It can still be used with Python 2, though.&lt;/p&gt; &lt;h3&gt;abipkgdiff&lt;/h3&gt; &lt;p&gt;&lt;a href="https://sourceware.org/libabigail/manual/abipkgdiff.html"&gt;abipkgdiff&lt;/a&gt; is a command-line tool to compare the ABI of ELF binaries contained in software packages that are available locally.&lt;/p&gt; &lt;p&gt;When an RPM contains a shared library whose &lt;a href="https://en.wikipedia.org/wiki/Soname"&gt;soname&lt;/a&gt; is not advertised by the RPM as being &amp;#8220;provided,&amp;#8221; abipkgdiff now considers that shared library to be private to the RPM.  It thus drops that shared library from the set of libraries to compare.  This prevents abipkgdiff from emitting ABI change reports about libraries deemed private to the package.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Several other fixes and improvements were made across the codebase of Libabigail and its associated tools during 2018. These were made possible due to users who took the time to &lt;a href="http://sourceware.org/bugzilla/enter_bug.cgi?product=libabigail"&gt;report issues&lt;/a&gt; they encountered while using the framework or to request enhancements they thought about while trying to adapt it to their environment. I would like to thank them warmly and sincerely.&lt;/p&gt; &lt;p&gt;The Libabigail developers keep working on improving the features of the Libabigail static analysis framework in general, and we hope to &lt;a href="https://sourceware.org/ml/libabigail/"&gt;hear from you&lt;/a&gt; each time you feel like reaching out to us!&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#38;linkname=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fchanges-made-to-the-libabigail-abi-change-analysis-framework-in-2018%2F&amp;#038;title=Changes%20made%20to%20the%20Libabigail%20ABI%20change%20analysis%20framework%20in%202018" data-a2a-url="https://developers.redhat.com/blog/2019/03/06/changes-made-to-the-libabigail-abi-change-analysis-framework-in-2018/" data-a2a-title="Changes made to the Libabigail ABI change analysis framework in 2018"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/06/changes-made-to-the-libabigail-abi-change-analysis-framework-in-2018/"&gt;Changes made to the Libabigail ABI change analysis framework in 2018&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cLOXkQghm8c" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article is for people interested in the long-term maintenance of software systems that expose application binary interfaces (a.k.a. ABIs) to other systems. That long-term maintenance involves detecting and analyzing inevitable changes in the ABIs and assessing whether these changes allow the maintained systems to stay compatible with the components with which they interact. In [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/06/changes-made-to-the-libabigail-abi-change-analysis-framework-in-2018/"&gt;Changes made to the Libabigail ABI change analysis framework in 2018&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/03/06/changes-made-to-the-libabigail-abi-change-analysis-framework-in-2018/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">564347</post-id><dc:creator>Dodji Seketeli</dc:creator><dc:date>2019-03-06T08:05:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/06/changes-made-to-the-libabigail-abi-change-analysis-framework-in-2018/</feedburner:origLink></entry><entry><title>How Red Hat developers can create handy shortcuts with Firefox keyword bookmarks</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RLN7Cp0EtHg/" /><category term="Community" /><category term="bookmark" /><category term="developer productivity" /><category term="Firefox" /><category term="shortcut" /><author><name>Florian Weimer</name></author><id>https://developers.redhat.com/blog/?p=565217</id><updated>2019-03-06T08:00:27Z</updated><published>2019-03-06T08:00:27Z</published><content type="html">&lt;p&gt;Firefox offers a simple way to enhance the browsing experience. With a little bit of configuration, you can turn the URL bar into a simple command-line tool to search bug databases, Internet RFCs, and CVEs. This comes in handy when you have an ID for a bug, but you do not have a link to click through. For example, if you have a Red Hat Bugzilla ID, just type &lt;code&gt;rhbz &amp;#60;bugid&amp;#62;&lt;/code&gt; into Firefox&amp;#8217;s search bar and Firefox will take you directly to that bug in Bugzilla.&lt;/p&gt; &lt;p&gt;In this article, after I show how to set up keyword-based bookmarks, I share a list of my shortcuts that I think will be handy for developers working with Red Hat products, projects, and communities.&lt;/p&gt; &lt;p&gt;&lt;span id="more-565217"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;To use this feature, you must create a bookmark using the full &lt;em&gt;New Bookmark&lt;/em&gt; dialog box. You can open this dialog box from the bookmark window. Press &lt;code&gt;Ctrl+Shift+O&lt;/code&gt; to access that, or choose &lt;em&gt;Show All Bookmarks&lt;/em&gt; from the Bookmarks menu. In that window, you need to choose &lt;em&gt;New Bookmark …&lt;/em&gt; in the &lt;em&gt;Organize&lt;/em&gt; menu, and the following dialog box will show.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/02/new-bookmark.png"&gt;&lt;img class=" aligncenter wp-image-565237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/02/new-bookmark.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/02/new-bookmark.png" alt="New Bookmark dialog box" width="440" height="377" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/02/new-bookmark.png 440w, https://developers.redhat.com/blog/wp-content/uploads/2019/02/new-bookmark-300x257.png 300w" sizes="(max-width: 440px) 100vw, 440px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A keyword bookmark has a URL that contains a &lt;code&gt;%s&lt;/code&gt; sequence (just as in &lt;code&gt;printf&lt;/code&gt;) and a keyword name. When the keyword is entered into the URL bar, the URL is not used directly. Instead, the arguments following the keyword are spliced in the URL instead of the &lt;code&gt;%s&lt;/code&gt; placeholder. For example, an &lt;code&gt;example&lt;/code&gt; keyword bookmark with the URL &lt;code&gt;https://example.com/%s&lt;/code&gt; will turn the URL bar command &lt;code&gt;example sample.html&lt;/code&gt; into &lt;code&gt;https://example.com/sample.html&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;I find the following keyword bookmarks particularly useful. They allow me to access information quickly when someone mentions an identifier on IRC, without pasting a full hyperlink (or a hyperlink going to a different resource that does not provide the information I want to view).&lt;/p&gt; &lt;table class="large-24 small-24 downloads-table" style="border: 1px solid black;"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;Keyword&lt;/th&gt; &lt;th&gt;URL&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;swbz&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://sourceware.org/bugzilla/show_bug.cgi?id=%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;rhbz&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;gcc&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://gcc.gnu.org/%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;deb&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://bugs.debian.org/%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;rfc&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;http://tools.ietf.org/html/rfc%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;koji&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://koji.fedoraproject.org/koji/search?match=glob&amp;#38;type=package&amp;#38;terms=%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;bzsourceware&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://bugzilla.redhat.com/buglist.cgi?f1=ext_bz_bug_map.ext_bz_bug_id&amp;#38;f2=external_bugzilla.url&amp;#38;o1=equals&amp;#38;o2=equals&amp;#38;query_format=advanced&amp;#38;v2=https%3A%2F%2Fsourceware.org%2Fbugzilla&amp;#38;v1=%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The first entry works for bugs in Sourceware Bugzilla, which covers binutils, glibc, elfutils, and a few others. For example, &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=18665"&gt;&lt;code&gt;swbz 18665&lt;/code&gt;&lt;/a&gt; shows a glibc bug, and since we create CVE aliases for security bugs, you can get the same bug using &lt;a href="https://sourceware.org/bugzilla/show_bug.cgi?id=CVE-2015-7547"&gt;&lt;code&gt;swbz CVE-2015-7547&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;rhbz&lt;/code&gt; works in a similar fashion, but with the Red Hat Bugzilla instance, which covers Fedora and most Red Hat products. For example, &lt;a href="https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=CVE-2015-7547"&gt;&lt;code&gt;rhbz CVE-2015-7547&lt;/code&gt;&lt;/a&gt; leads to the flaw bug maintained by Red Hat Product Security.&lt;/p&gt; &lt;p&gt;&lt;code&gt;gcc&lt;/code&gt; is a little bit different. To view a bug, you need to use &lt;a href="https://gcc.gnu.org/PR89225"&gt;&lt;code&gt;gcc PR89225&lt;/code&gt;&lt;/a&gt;. But you can also use &lt;a href="https://gcc.gnu.org/r268597"&gt;&lt;code&gt;gcc r268597&lt;/code&gt;&lt;/a&gt; to view specific revisions in Subversion. (This relies on the fact that the &lt;code&gt;gcc.gnu.org&lt;/code&gt; web server has redirects for &lt;code&gt;PR*&lt;/code&gt; and &lt;code&gt;r*&lt;/code&gt; URLs at the root.)&lt;/p&gt; &lt;p&gt;The &lt;code&gt;deb&lt;/code&gt; shortcut allows you to view individual bugs, such as &lt;a href="https://bugs.debian.org/903514"&gt;&lt;code&gt;deb 903514&lt;/code&gt;&lt;/a&gt;, or all bugs for a binary or source package by using &lt;a href="https://bugs.debian.org/libc6"&gt;&lt;code&gt;deb libc6&lt;/code&gt;&lt;/a&gt; or &lt;a href="https://bugs.debian.org/src:glibc"&gt;&lt;code&gt;deb src:glibc&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;IETF RFCs can be viewed using &lt;a href="http://tools.ietf.org/html/rfc1035"&gt;&lt;code&gt;rfc 1035&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you want to locate a package in Koji (Fedora&amp;#8217;s build system), you can use something like &lt;a href="https://koji.fedoraproject.org/koji/search?match=glob&amp;#38;type=package&amp;#38;terms=binutils"&gt;&lt;code&gt;koji binutils&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;bzsourceware&lt;/code&gt; allows you to perform a reverse lookup on Sourceware bugs in Red Hat Bugzilla (where these bugs have been linked manually). &lt;a href="https://bugzilla.redhat.com/buglist.cgi?f1=ext_bz_bug_map.ext_bz_bug_id&amp;#38;f2=external_bugzilla.url&amp;#38;o1=equals&amp;#38;o2=equals&amp;#38;query_format=advanced&amp;#38;v2=https%3A%2F%2Fsourceware.org%2Fbugzilla&amp;#38;v1=18665"&gt;&lt;code&gt;bzsourceware 18665&lt;/code&gt;&lt;/a&gt; again provides information about the glibc vulnerability used as an example above. Such keyword bookmarks can be particularly powerful, but since they are derived from what are essentially web application implementation details, they can bitrot over time and need occasional tweaks to keep them working.&lt;/p&gt; &lt;p&gt;The following shortcuts for accessing information in the Customer Portal are specific to Red Hat:&lt;/p&gt; &lt;table class="large-24 small-24 downloads-table" style="border: 1px solid black;"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;th&gt;Keyword&lt;/th&gt; &lt;th&gt;URL&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;cve&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://access.redhat.com/security/cve/%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;case&lt;/code&gt;&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://access.redhat.com/support/cases/#/case/%s&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;a href="https://access.redhat.com/security/cve/CVE-2015-7547"&gt;&lt;code&gt;cve CVE-2015-7547&lt;/code&gt;&lt;/a&gt; shows the same vulnerability in the Customer Portal. (These resources contain customer-facing vulnerability information.) If you have a valid subscription and a case number, you can enter it after &lt;code&gt;case&lt;/code&gt;, and you will be directed to the case overview for that case. (Note that this is the customer-facing view; Red Hat associates working in Support have access to the backend, using different URLs and, unfortunately, different IDs as well.&lt;/p&gt; &lt;p&gt;Of course, there are many Red-Hat-internal resources (using internal, non-public URLs) that can be accessed in the same manner.&lt;/p&gt; &lt;p&gt;I hope this little Firefox feature can be as useful to you as it is to me.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#38;linkname=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F06%2Fhow-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks%2F&amp;#038;title=How%20Red%20Hat%20developers%20can%20create%20handy%20shortcuts%20with%20Firefox%20keyword%20bookmarks" data-a2a-url="https://developers.redhat.com/blog/2019/03/06/how-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks/" data-a2a-title="How Red Hat developers can create handy shortcuts with Firefox keyword bookmarks"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/06/how-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks/"&gt;How Red Hat developers can create handy shortcuts with Firefox keyword bookmarks&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RLN7Cp0EtHg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Firefox offers a simple way to enhance the browsing experience. With a little bit of configuration, you can turn the URL bar into a simple command-line tool to search bug databases, Internet RFCs, and CVEs. This comes in handy when you have an ID for a bug, but you do not have a link to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/06/how-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks/"&gt;How Red Hat developers can create handy shortcuts with Firefox keyword bookmarks&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/03/06/how-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">565217</post-id><dc:creator>Florian Weimer</dc:creator><dc:date>2019-03-06T08:00:27Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/06/how-red-hat-developers-can-create-handy-shortcuts-with-firefox-keyword-bookmarks/</feedburner:origLink></entry></feed>
