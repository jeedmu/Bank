<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Getting started with CodeReady Workspaces and Red Hat OpenShift Application Runtimes launcher</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/eQf3mz9vRgQ/" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><author><name>veermuchandi</name></author><id>searchisko:content:id:jbossorg_blog-getting_started_with_codeready_workspaces_and_red_hat_openshift_application_runtimes_launcher</id><updated>2019-03-18T12:36:24Z</updated><published>2019-03-18T12:36:24Z</published><content type="html">&lt;p&gt;Watch this video for an introduction to &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview/"&gt;CodeReady Workspaces&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt;, their functionality, and how they complement each other for &lt;a href="https://www.redhat.com/en/topics/cloud-native-apps"&gt;cloud-native application&lt;/a&gt; development on &lt;a href="https://developers.redhat.com/products/openshift"&gt;OpenShift&lt;/a&gt;. This is the first part of a video series, and the subsequent videos will cover step-by-step instructions to use Launcher and CodeReady workspaces. To try hands-on labs, refer to &lt;a href="https://github.com/RedHatWorkshops/CodeReadyWorkspacesAndLauncherTutorial"&gt;the tutorial on GitHub&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-574157"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/d32FDzs6qtI" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;br /&gt; &lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#38;linkname=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Fgetting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes%2F&amp;#038;title=Getting%20started%20with%20CodeReady%20Workspaces%20and%20Red%20Hat%20OpenShift%20Application%20Runtimes%20launcher" data-a2a-url="https://developers.redhat.com/blog/2019/03/18/getting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes/" data-a2a-title="Getting started with CodeReady Workspaces and Red Hat OpenShift Application Runtimes launcher"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/18/getting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes/"&gt;Getting started with CodeReady Workspaces and Red Hat OpenShift Application Runtimes launcher&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/eQf3mz9vRgQ" height="1" width="1" alt=""/&gt;</content><summary>Watch this video for an introduction to CodeReady Workspaces and Red Hat OpenShift Application Runtimes, their functionality, and how they complement each other for cloud-native application development on OpenShift. This is the first part of a video series, and the subsequent videos will cover step-by-step instructions to use Launcher and CodeReady workspaces. To try hands-on labs, refer to the tu...</summary><dc:creator>veermuchandi</dc:creator><dc:date>2019-03-18T12:36:24Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/18/getting-started-with-codeready-workspaces-and-red-hat-openshift-application-runtimes/</feedburner:origLink></entry><entry><title>RPM packaging: A simplified guide to creating your first RPM</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1KZ76eLHjJI/" /><category term="C" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="rpm" scheme="searchisko:content:tags" /><category term="rpm packaging" scheme="searchisko:content:tags" /><author><name>mohammad ahmad</name></author><id>searchisko:content:id:jbossorg_blog-rpm_packaging_a_simplified_guide_to_creating_your_first_rpm</id><updated>2019-03-18T07:00:29Z</updated><published>2019-03-18T07:00:29Z</published><content type="html">&lt;p&gt;The concept of RPM packaging can be overwhelming for first-timers because of the impression a steep learning curve is involved. In this article, I will demonstrate that building an RPM with minimal knowledge and experience is possible. Note that this article is meant as a starting point, not a complete guide to RPM packaging.&lt;/p&gt; &lt;p&gt;&lt;span id="more-568837"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;ASCII-based Tetris game&lt;/h2&gt; &lt;p&gt;For my demonstration, I chose a simple ASCII-based Tetris game, written in C, and I made slight adjustments to ensure a relatively straightforward RPM build. I will use a game called Vitetris as my example, which you can &lt;a href="https://www.victornils.net/tetris/vitetris-0.57.tar.gz"&gt;download&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To ensure there are no errors when creating the RPM package, I remove references in the Makefile that change file permissions to root, in order to allow a non-root user to build the RPM. This modification is as follows:&lt;/p&gt; &lt;pre&gt;$ cat Makefile |grep 'INSTALL ' INSTALL = install #INSTALL = install -oroot -groot # non-root users building the rpm won't be able to set this and the RPM build will fail.&lt;/pre&gt; &lt;p&gt;Once you have made this change, create a new gzipped tarball with the same name: &lt;code&gt;vitetris-0.57.tar.gz&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Preparing the environment&lt;/h2&gt; &lt;p&gt;To install your development environment on a subscribed &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 7 system, you need the following repositories to build your RPMs: &lt;code&gt;rhel-7-server-rpms&lt;/code&gt;, &lt;code&gt;rhel-7-server-extras-rpms&lt;/code&gt;, and &lt;code&gt;rhel-7-server-optional-rpms&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;You must have following packages installed:&lt;/p&gt; &lt;pre&gt;# yum install -y rpm* gcc gpg* rng-tools&lt;/pre&gt; &lt;p&gt;I use &lt;code&gt;rpm*&lt;/code&gt; and &lt;code&gt;gpg*&lt;/code&gt; because it makes the number of things to remember to install much more manageable.&lt;/p&gt; &lt;h2&gt;Compiling the software manually&lt;/h2&gt; &lt;p&gt;A large part of success with RPM packaging understanding the software you are working with. First, compiling software manually preferably is done as a non-root user. In this case, I am using the &lt;code&gt;rpmbuilder&lt;/code&gt; user.&lt;/p&gt; &lt;p&gt;Start with extracting the gzipped tarball (&lt;code&gt;vitetris-0.57.tar.gz&lt;/code&gt;), and then inspecting the README file. In this case, the README file doesn&amp;#8217;t contain information about compiling your game from source code. As a general rule, open source software written in C is compiled with three steps: &lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, and &lt;code&gt;make install&lt;/code&gt;. However, it is worth just running &lt;code&gt;make&lt;/code&gt; on its own to see whether the software will build.&lt;/p&gt; &lt;p&gt;As a non-root user, test to see whether running &lt;code&gt;make&lt;/code&gt; is sufficient:&lt;/p&gt; &lt;pre&gt;[rpmbuilder@rpm vitetris-0.57]$ make generating src/src-conf.mk ./src-conf.sh 'cc' '' '' ... Done. Now run ./tetris (or make install) &lt;/pre&gt; &lt;p&gt;To test the game, simply run &lt;code&gt;./tetris&lt;/code&gt; to see whether the game loads and can be played:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/tetris2.png"&gt;&lt;img class=" aligncenter wp-image-569337 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/tetris2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/tetris2-260x300.png" alt="Running Tetris after building from source code" width="260" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/tetris2-260x300.png 260w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/tetris2.png 494w" sizes="(max-width: 260px) 100vw, 260px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Creating GPG keys&lt;/h2&gt; &lt;p&gt;Signing your RPM package adds an extra layer of trust to your packages. Therefore, to create GPG keys as the &lt;code&gt;rpmbuilder&lt;/code&gt; user, you will need a session with root access to run &lt;code&gt;rngd&lt;/code&gt; (to speed up the generation process) and a session with X11 forwarding as the &lt;code&gt;rpmbuilder&lt;/code&gt; user.&lt;/p&gt; &lt;p&gt;As root, run:&lt;/p&gt; &lt;pre&gt;# rngd -r /dev/urandom&lt;/pre&gt; &lt;p&gt;If you get the following error:&lt;/p&gt; &lt;pre&gt;Failed to init entropy source 2: Intel RDRAND Instruction RNG&lt;/pre&gt; &lt;p&gt;Try:&lt;/p&gt; &lt;pre&gt;# rngd -r /dev/urandom -o /dev/random -f&lt;/pre&gt; &lt;p&gt;You must log into the host as &lt;code&gt;rpmbuilder&lt;/code&gt; user with X11 forwarding (otherwise, the key generation will fail):&lt;/p&gt; &lt;pre&gt;$ gpg --gen-key ... Please select what kind of key you want: (1) RSA and RSA (default) (2) DSA and Elgamal (3) DSA (sign only) (4) RSA (sign only) Your selection? 1 RSA keys may be between 1024 and 4096 bits long. What keysize do you want? (2048) Requested keysize is 2048 bits Please specify how long the key should be valid. 0 = key does not expire &amp;#60;n&amp;#62; = key expires in n days &amp;#60;n&amp;#62;w = key expires in n weeks &amp;#60;n&amp;#62;m = key expires in n months &amp;#60;n&amp;#62;y = key expires in n years Key is valid for? (0) Key does not expire at all Is this correct? (y/N) y GnuPG needs to construct a user ID to identify your key. Real name: RPM Build User Email address: rpmbuilder@rpm Comment: RPM Builder GPG Signing Key You selected this USER-ID: "RPM Build User (RPM Builder GPG Signing Key) &amp;#60;rpmbuilder@rpm&amp;#62;" Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O You need a Passphrase to protect your secret key.&lt;/pre&gt; &lt;div id="attachment_569357" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gpg-password.png"&gt;&lt;img aria-describedby="caption-attachment-569357" class=" aligncenter wp-image-569357 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gpg-password.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gpg-password-300x214.png" alt="Prompt that is displayed if you have X11 forwarding turned on" width="300" height="214" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/gpg-password-300x214.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/gpg-password.png 654w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-569357" class="wp-caption-text"&gt;This prompt will only appear if you have X11 forwarding turned on.&lt;/p&gt;&lt;/div&gt; &lt;pre&gt;... gpg: depth: 0 valid: 1 signed: 0 trust: 0-, 0q, 0n, 0m, 0f, 1u pub 2048R/EEF6D9AD 2019-03-02 Key fingerprint = 6ED1 2456 B7ED EEC6 D0DF B870 444A 40A7 EEF6 D9AD uid RPM Build User (RPM Builder GPG Signing Key) &amp;#60;rpmbuilder@rpm&amp;#62; sub 2048R/D498F883 2019-03-02&lt;/pre&gt; &lt;p&gt;If you need to export the key to be used within satellite for custom software or in your yum repo configuration, use the command:&lt;/p&gt; &lt;pre&gt;$ gpg --armor --export -----BEGIN PGP PUBLIC KEY BLOCK----- Version: GnuPG v2.0.22 (GNU/Linux)&lt;/pre&gt; &lt;p&gt;&amp;#8230;&lt;/p&gt; &lt;h2&gt;Creating the RPM package for Vitetris&lt;/h2&gt; &lt;p&gt;To build the RPM, first create the build tree and the spec file and place the source code in the right place:&lt;/p&gt; &lt;pre&gt;$ rpmdev-setuptree $ rpmdev-newspec rpmbuild/SPECS/vitetris.spec rpmbuild/SPECS/vitetris.spec created; type minimal, rpm version &amp;#62;= 4.11. $ cp vitetris-0.57.tar.gz rpmbuild/SOURCES/ &lt;/pre&gt; &lt;h3&gt;Add initial details to the spec file&lt;/h3&gt; &lt;p&gt;Provide the initial details:&lt;/p&gt; &lt;pre&gt;Name: vitetris Version: 0.57 Release: 1%{?dist} Summary: ASCII based tetris game License: BSD URL: https://www.victornils.net/tetris/ Source0: vitetris-0.57.tar.gz BuildRequires: gcc&lt;/pre&gt; &lt;h3&gt;Remove unnecessary sections&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Delete the &lt;code&gt;Requires&lt;/code&gt; section, as this software doesn&amp;#8217;t have any dependencies.&lt;/li&gt; &lt;li&gt;Delete the &lt;code&gt;%configure&lt;/code&gt; section, as this software can be built without &lt;code&gt;configure&lt;/code&gt; (keep this if you need &lt;code&gt;configure&lt;/code&gt; before you run &lt;code&gt;make&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Add a description&lt;/h3&gt; &lt;p&gt;You can add anything you like, but here is a suggestion:&lt;/p&gt; &lt;pre&gt;%description vitetris is a multiplayer ASCII-based Tetris game&lt;/pre&gt; &lt;h3&gt;Test the initial build&lt;/h3&gt; &lt;p&gt;Test the build with the information just provided to see what errors appear:&lt;/p&gt; &lt;pre&gt;$ rpmbuild -ba rpmbuild/SPECS/vitetris.spec ... RPM build errors: Installed (but unpackaged) file(s) found: /usr/local/bin/tetris /usr/local/share/applications/vitetris.desktop /usr/local/share/doc/vitetris/README /usr/local/share/doc/vitetris/licence.txt /usr/local/share/pixmaps/vitetris.xpm&lt;/pre&gt; &lt;h3&gt;Add a list of files from the previous step to the spec file&lt;/h3&gt; &lt;p&gt;You must add the list of files from the previous step to the &lt;code&gt;%files&lt;/code&gt; section, as follows:&lt;/p&gt; &lt;pre&gt;%files /usr/local/bin/tetris /usr/local/share/applications/vitetris.desktop %doc /usr/local/share/doc/vitetris/README /usr/local/share/doc/vitetris/licence.txt /usr/local/share/pixmaps/vitetris.xpm&lt;/pre&gt; &lt;p&gt;Notice that &lt;code&gt;%doc&lt;/code&gt; was put in front of the README to identify it as an informational document. The RPM will still build without this.&lt;/p&gt; &lt;h3&gt;Rerun the build&lt;/h3&gt; &lt;pre&gt;$ rpmbuild -ba rpmbuild/SPECS/vitetris.spec Wrote: /home/rpmbuilder/rpmbuild/SRPMS/vitetris-0.57-1.el7.src.rpm Wrote: /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-0.57-1.el7.x86_64.rpm Wrote: /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-debuginfo-0.57-1.el7.x86_64.rpm Executing(%clean): /bin/sh -e /var/tmp/rpm-tmp.AqR4Aq + umask 022 + cd /home/rpmbuilder/rpmbuild/BUILD + cd vitetris-0.57 + /usr/bin/rm -rf /home/rpmbuilder/rpmbuild/BUILDROOT/vitetris-0.57-1.el7.x86_64 + exit 0 &lt;/pre&gt; &lt;h3&gt;Sign the RPM package&lt;/h3&gt; &lt;p&gt;Signing your RPM is as simple as running:&lt;/p&gt; &lt;pre&gt;$ rpmsign --addsign /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-0.57-1.el7.x86_64.rpm Enter pass phrase: Pass phrase is good. /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-0.57-1.el7.x86_64.rpm: &lt;/pre&gt; &lt;p&gt;If you get this error:&lt;/p&gt; &lt;pre&gt;You must set "%_gpg_name" in your macro file&lt;/pre&gt; &lt;p&gt;Set &lt;code&gt;%_gpg_name&lt;/code&gt; with the public key value:&lt;/p&gt; &lt;pre&gt;$ gpg --list-keys /home/rpmbuilder/.gnupg/pubring.gpg ----------------------------------- pub 2048R/&lt;strong&gt;&lt;span style="color: #ff00ff; font-family: monospace;"&gt;EEF6D9AD&lt;/span&gt;&lt;/strong&gt; 2019-03-02 uid RPM Build User (RPM Builder GPG Signing Key) &amp;#60;rpmbuilder@rpm&amp;#62; sub 2048R/D498F883 2019-03-02 $ echo "%_gpg_name &lt;strong&gt;&lt;span style="color: #ff00ff; font-family: monospace;"&gt;EEF6D9AD&lt;/span&gt;&lt;/strong&gt;" &amp;#62;&amp;#62; .rpmmacros&lt;/pre&gt; &lt;p&gt;Try again:&lt;/p&gt; &lt;pre&gt;$ rpmsign --addsign /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-0.57-1.el7.x86_64.rpm Enter pass phrase: Pass phrase is good. /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-0.57-1.el7.x86_64.rpm:&lt;/pre&gt; &lt;h3&gt;Test an install/uninstall of the RPM as root user&lt;/h3&gt; &lt;pre&gt;# rpm -i /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-0.57-1.el7.x86_64.rpm warning: /home/rpmbuilder/rpmbuild/RPMS/x86_64/vitetris-0.57-1.el7.x86_64.rpm: Header V4 RSA/SHA1 Signature, key ID eef6d9ad: NOKEY # /usr/local/bin/tetris&lt;/pre&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/03/rpm_tetris.png"&gt;&lt;img class=" aligncenter wp-image-569417 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/rpm_tetris.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/rpm_tetris-216x300.png" alt="Installing the RPM as root" width="216" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/rpm_tetris-216x300.png 216w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/rpm_tetris.png 398w" sizes="(max-width: 216px) 100vw, 216px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Uninstall the RPM:&lt;/p&gt; &lt;pre&gt;# rpm -qa |grep tetris vitetris-0.57-1.el7.x86_64 =# rpm -e vitetris-0.57-1.el7.x86_64 # /usr/local/bin/tetris -bash: /usr/local/bin/tetris: No such file or directory&lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Depending on the software you intend to package, custom RPM packaging can be challenging. In this article, I aimed to do as little as possible to demonstrate that default settings are often enough to build an RPM.&lt;/p&gt; &lt;p&gt;To learn more, see &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html-single/rpm_packaging_guide/index"&gt;Red Hat&amp;#8217;s RPM packaging guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#38;linkname=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F18%2Frpm-packaging-guide-creating-rpm%2F&amp;#038;title=RPM%20packaging%3A%20A%20simplified%20guide%20to%20creating%20your%20first%20RPM" data-a2a-url="https://developers.redhat.com/blog/2019/03/18/rpm-packaging-guide-creating-rpm/" data-a2a-title="RPM packaging: A simplified guide to creating your first RPM"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/18/rpm-packaging-guide-creating-rpm/"&gt;RPM packaging: A simplified guide to creating your first RPM&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1KZ76eLHjJI" height="1" width="1" alt=""/&gt;</content><summary>The concept of RPM packaging can be overwhelming for first-timers because of the impression a steep learning curve is involved. In this article, I will demonstrate that building an RPM with minimal knowledge and experience is possible. Note that this article is meant as a starting point, not a complete guide to RPM packaging. ASCII-based Tetris game For my demonstration, I chose a simple ASCII-bas...</summary><dc:creator>mohammad ahmad</dc:creator><dc:date>2019-03-18T07:00:29Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/18/rpm-packaging-guide-creating-rpm/</feedburner:origLink></entry><entry><title>Modern Process Integration Tooling Workshop - Lab 7 Running Rewards Process</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/RT-ZUVpnIMg/modern-process-integration-tooling-workshop-lab7.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-modern_process_integration_tooling_workshop_lab_7_running_rewards_process</id><updated>2019-03-18T06:00:04Z</updated><published>2019-03-18T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/index-redhat.html#/3" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;" target="_blank"&gt;&lt;img alt="process automation manager workshops" border="0" data-original-height="521" data-original-width="819" height="203" src="https://3.bp.blogspot.com/-H2LUVHDZXiI/XAfW1rJVeHI/AAAAAAAAtWU/z6mG0YikV6sCDhZDIamQo3Wd2ntzRl46wCLcBGAs/s320/Screenshot%2B2018-12-05%2Bat%2B14.45.32.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Click to start workshop&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div style="text-align: left;"&gt;&lt;/div&gt;Since starting to update my &lt;a href="https://bpmworkshop.gitlab.io/#/" target="_blank"&gt;free online rules and process automation workshops&lt;/a&gt; that showcase how to get started using modern business logic tooling, you've come a long ways with process automation.&lt;br /&gt;&lt;br /&gt;The updates started with moving from JBoss BPM&amp;nbsp; to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager.&lt;br /&gt;&lt;br /&gt;This article highlights the newest lab update for Red Hat Process Automation Manager, where you learn to run your completed automation project and explore data gathered in process and task reports.&lt;br /&gt;&lt;br /&gt;Let's take a look at the lab shall we?&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Lab 7 - Running rewards process&lt;/h3&gt;This lab is the latest step on learning to develop a process integration project. It's a step by step guide on how to create the form for users to pass data when starting a process instance and for the user task to process a reward submission.&lt;br /&gt;&lt;br /&gt;The easiest way is to just &lt;a href="https://bpmworkshop.gitlab.io/rhpam/lab07.html" target="_blank"&gt;jump right into lab 7&lt;/a&gt;:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhpam/lab07.html" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Comments or feedback on any part of the workshop that might not be clear, just reach out.&lt;br /&gt;&lt;br /&gt;Stay tuned for the next lab update, coming soon!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qxT6QjPYTTM:_5Z-Poq2bJ4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qxT6QjPYTTM:_5Z-Poq2bJ4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qxT6QjPYTTM:_5Z-Poq2bJ4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qxT6QjPYTTM:_5Z-Poq2bJ4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qxT6QjPYTTM:_5Z-Poq2bJ4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qxT6QjPYTTM:_5Z-Poq2bJ4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qxT6QjPYTTM:_5Z-Poq2bJ4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qxT6QjPYTTM:_5Z-Poq2bJ4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qxT6QjPYTTM:_5Z-Poq2bJ4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=qxT6QjPYTTM:_5Z-Poq2bJ4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=qxT6QjPYTTM:_5Z-Poq2bJ4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/qxT6QjPYTTM" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/RT-ZUVpnIMg" height="1" width="1" alt=""/&gt;</content><summary>Click to start workshop Since starting to update my free online rules and process automation workshops that showcase how to get started using modern business logic tooling, you've come a long ways with process automation. The updates started with moving from JBoss BPM  to Red Hat Decision Manager and from JBoss BPM Suite to Red Hat Process Automation Manager. This article highlights the newest lab...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-03-18T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/qxT6QjPYTTM/modern-process-integration-tooling-workshop-lab7.html</feedburner:origLink></entry><entry><title>Set up JDK Mission Control with Red Hat Build of OpenJDK</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/23yMO8Bpmig/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="JDK" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="monitoring" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="OpenJDK" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="Red Hat Software Collections" scheme="searchisko:content:tags" /><category term="troubleshooting" scheme="searchisko:content:tags" /><author><name>Syed M Shaaf</name></author><id>searchisko:content:id:jbossorg_blog-set_up_jdk_mission_control_with_red_hat_build_of_openjdk</id><updated>2019-03-15T07:00:07Z</updated><published>2019-03-15T07:00:07Z</published><content type="html">&lt;p&gt;JDK Mission Control is now the newest member of the &lt;a href="https://developers.redhat.com/products/softwarecollections/overview"&gt;Red Hat Software Collections&lt;/a&gt; (RHSCL). &lt;a href="https://github.com/JDKMissionControl"&gt;JDK Mission Control&lt;/a&gt; is a powerful profiler for HotSpot Java virtual machines (JVMs) and has an advanced set of tools that enable efficient and detailed analysis of the extensive data collected by JDK Flight Recorder. The toolchain enables developers and administrators to collect and analyze data from &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java applications&lt;/a&gt; running locally or deployed in production environments.&lt;/p&gt; &lt;p&gt;In this article, I will go through a primary example of setting up JDK Mission Control. For &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Linux&lt;/a&gt;, JDK Mission Control is part of the RHSCL and, for Windows, it is available as part of the &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;OpenJDK&lt;/a&gt; zip distribution on the &lt;a href="https://access.redhat.com/"&gt;Red Hat Customer Portal&lt;/a&gt;.  For Linux, these instructions assume that Red Hat Build of OpenJDK 11 is already installed. I will show how to set up the system to install software from RHSCL, which provides the latest development technologies for &lt;a href="https://developers.redhat.com/topics/linux/"&gt;Red Hat Enterprise Linux&lt;/a&gt;. Then, I will install the JDK Mission Control and run a simple sample application. The whole tutorial should take fewer than 10 minutes to complete.&lt;span id="more-572457"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;b&gt;Installing Mission Control&lt;/b&gt;&lt;/h2&gt; &lt;h3&gt;&lt;b&gt;For Microsoft Windows&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;For Microsoft Windows, the OpenJDK zip available via the Red Hat Customer Portal now contains JDK Mission Control and JDK Flight Recorder. Once un-archived, the JMC binary can be found in the &lt;code&gt;bin&lt;/code&gt; directory.&lt;/p&gt; &lt;h3&gt;&lt;b&gt;For Red Hat Enterprise Linux&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;You can add or remove software repositories from the command line using the subscription-manager tool as the root user. Use the &lt;code&gt;--list&lt;/code&gt; option to view the available software repositories and verify that you have access to RHSCL:&lt;/p&gt; &lt;pre&gt;$ su - # subscription-manager repos --list | egrep rhscl&lt;/pre&gt; &lt;p&gt;Depending which variant is used (e.g., server or workstation), you can enable the repo with the following command:&lt;/p&gt; &lt;pre&gt;# subscription-manager repos --enable  rhel-variant-rhscl-7-rpms&lt;/pre&gt; &lt;p&gt;Install JMC with the following command:&lt;/p&gt; &lt;pre&gt;$ yum install rh-jmc&lt;/pre&gt; &lt;p&gt;We have now installed JMC. You can launch it by typing &lt;code&gt;JMC&lt;/code&gt; or heading off to the applications menu.&lt;/p&gt; &lt;p&gt;If you are running multiple versions of Java, as I do, and want to launch JMC from the command line, use the following options to launch JMC with the path to the Red Hat Build of OpenJDK.&lt;/p&gt; &lt;pre&gt;$ scl enable rh-jmc bash $ jmc -vm /usr/lib/jvm/java-11-openjdk-11.0.2.7-0.el7_6.i386/bin&lt;/pre&gt; &lt;h3&gt;&lt;b&gt;Real-time Monitoring&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;JMC allows you to perform real-time monitoring of JVMs. To do this, create a new connection from the File Menu, choose your JVM, and start JMX console. The result should give you an overview page with Processors, Memory consumption, Java heap use, JVM CPU usage, etc.&lt;/p&gt; &lt;p&gt;&lt;img class=" wp-image-572477 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/JMC-Realtime-monitoring-1024x516.jpeg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/JMC-Realtime-monitoring-300x151.jpeg" alt="" width="898" height="452" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/JMC-Realtime-monitoring-300x151.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/JMC-Realtime-monitoring-768x387.jpeg 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/JMC-Realtime-monitoring-1024x516.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/JMC-Realtime-monitoring.jpeg 1583w" sizes="(max-width: 898px) 100vw, 898px" /&gt;&lt;/p&gt; &lt;p&gt;Now that we have JMC set up, let&amp;#8217;s try to run an example and see how it works.&lt;/p&gt; &lt;p&gt;The following is a simple example of reading a couple of files. Indeed, there can be issues that we have not taken into consideration. In the example below, I have two files: a simple HTML file and a text file, which is about 1 GB.&lt;/p&gt; &lt;pre&gt;import java.io.BufferedReader; import java.io.File; import java.io.FileReader; import java.io.IOException; public class TextFileReader { private File textFilePath = null; public TextFileReader(String textFilePath) { if (textFilePath == null) throw new IllegalArgumentException(); this.textFilePath = new File(textFilePath); } public void readFile() throws IOException { FileReader fileReader = new FileReader(textFilePath); BufferedReader bufferedreader = new BufferedReader(fileReader); StringBuffer sb = new StringBuffer(); String strLine; while ((strLine = bufferedreader.readLine()) != null) { sb.append(strLine); sb.append("\n"); } fileReader.close(); System.out.println(sb.toString()); } public static void main(String[] args) throws IOException{ new TextFileReader("index.html").readFile(); new TextFileReader("test.txt").readFile(); } }&lt;/pre&gt; &lt;p&gt;Let’s execute the following commands to compile and run this example.&lt;/p&gt; &lt;pre&gt;$ javac TextFileReader.java $ java -XX:+FlightRecorder -XX:StartFlightRecording=dumponexit=true,filename=filereader.jfr TextFileReader&lt;/pre&gt; &lt;p&gt;In the above Java command, the parameter &lt;code&gt;-XX:StartFlightRecording&lt;/code&gt; will dump the results into &lt;code&gt;filereader.jfr&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s look at the results by opening this file in JMC.&lt;/p&gt; &lt;p&gt;&lt;img class=" wp-image-572467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/screenshot-jmc2-1024x549.jpeg" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/screenshot-jmc2-300x161.jpeg" alt="" width="902" height="484" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/screenshot-jmc2-300x161.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/screenshot-jmc2-768x411.jpeg 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/screenshot-jmc2-1024x549.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/screenshot-jmc2.jpeg 1579w" sizes="(max-width: 902px) 100vw, 902px" /&gt;&lt;/p&gt; &lt;p&gt;JMC reports in-depth details on the entire run; for example, JVM internals shows that GC is Stalling. Moreover, with a large file with not much memory, that is a problem, so we can fix the issue either by lowering the value of &lt;code&gt;-XX:InitiatingHeapOccupancyPercent&lt;/code&gt; and even more so ensuring that there is enough memory (e.g., Xms1024m -Xmx4096m).&lt;/p&gt; &lt;p&gt;Another great example can be found &lt;a href="https://fedoramagazine.org/jdk-mission-control-is-now-in-fedora-29/"&gt;here&lt;/a&gt; by Jie Kang, Software Engineer at Red Hat, where he shows how the method profiling works, aiding in optimization of the original code.&lt;/p&gt; &lt;p&gt;JMC is very useful for understanding application behavior such as memory leaks, deadlock, and much more. Give it a try with the &lt;a href="https://developers.redhat.com/products/openjdk/overview"&gt;Red Hat Build of OpenJDK.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#38;linkname=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F15%2Fjdk-mission-control-red-hat-build-openjdk%2F&amp;#038;title=Set%20up%20JDK%20Mission%20Control%20with%20Red%20Hat%20Build%20of%20OpenJDK" data-a2a-url="https://developers.redhat.com/blog/2019/03/15/jdk-mission-control-red-hat-build-openjdk/" data-a2a-title="Set up JDK Mission Control with Red Hat Build of OpenJDK"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/15/jdk-mission-control-red-hat-build-openjdk/"&gt;Set up JDK Mission Control with Red Hat Build of OpenJDK&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/23yMO8Bpmig" height="1" width="1" alt=""/&gt;</content><summary>JDK Mission Control is now the newest member of the Red Hat Software Collections (RHSCL). JDK Mission Control is a powerful profiler for HotSpot Java virtual machines (JVMs) and has an advanced set of tools that enable efficient and detailed analysis of the extensive data collected by JDK Flight Recorder. The toolchain enables developers and administrators to collect and analyze data from Java app...</summary><dc:creator>Syed M Shaaf</dc:creator><dc:date>2019-03-15T07:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/15/jdk-mission-control-red-hat-build-openjdk/</feedburner:origLink></entry><entry><title>4.0.19</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/wtW_KKfd3No/4019.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-4_0_19</id><updated>2019-03-14T13:20:15Z</updated><published>2019-03-14T13:19:00Z</published><content type="html">FYI: I just released 4.0.19.Final. &lt;br /&gt;&lt;br /&gt;This changes the way ASYM_ENCRYPT disseminates the private shared group key to members, going from a pull- to a push-based approach [1] [2].&lt;br /&gt;&lt;br /&gt;In combination with JGRP-2293 [3], this should help a lot in environments like Kubernetes or Openshift where pods with JGroups nodes are started/stopped dynamically, and where encryption is required.&lt;br /&gt;&lt;br /&gt;The design is at [3]. &lt;br /&gt;&lt;br /&gt;Check it out and let me know if you run into issues.&lt;br /&gt;Cheers,&lt;br /&gt;&lt;br /&gt;[1] &lt;a href="https://issues.jboss.org/browse/JGRP-2297"&gt;https://issues.jboss.org/browse/JGRP-2297&lt;/a&gt;&lt;br /&gt;[2] &lt;a href="https://issues.jboss.org/browse/JGRP-2293"&gt;https://issues.jboss.org/browse/JGRP-2293&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="https://github.com/belaban/JGroups/blob/master/doc/design/ASYM_ENCRYPT.txt"&gt;https://github.com/belaban/JGroups/blob/master/doc/design/ASYM_ENCRYPT.txt&lt;/a&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/wtW_KKfd3No" height="1" width="1" alt=""/&gt;</content><summary>FYI: I just released 4.0.19.Final. This changes the way ASYM_ENCRYPT disseminates the private shared group key to members, going from a pull- to a push-based approach [1] [2]. In combination with JGRP-2293 [3], this should help a lot in environments like Kubernetes or Openshift where pods with JGroups nodes are started/stopped dynamically, and where encryption is required. The design is at [3]. Ch...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2019-03-14T13:19:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2019/03/4019.html</feedburner:origLink></entry><entry><title>Quarking Drools: How we turned a 13-year-old Java project into a first-class serverless component</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/BF0O4ih8nkE/" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="GraalVM" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Mario Fusco</name></author><id>searchisko:content:id:jbossorg_blog-quarking_drools_how_we_turned_a_13_year_old_java_project_into_a_first_class_serverless_component</id><updated>2019-03-14T07:05:14Z</updated><published>2019-03-14T07:05:14Z</published><content type="html">&lt;p style="text-align: center;"&gt;&lt;em&gt;&amp;#8220;The question of whether a computer can think is no more interesting than the question of whether a submarine can swim.” (Edsger W. Dijkstra)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Rule-based artificial intelligence (AI) is often overlooked, possibly because people think it&amp;#8217;s only useful in heavyweight enterprise software products. However, that&amp;#8217;s not necessarily true. Simply put, a rule engine is just a piece of software that allows you to separate domain and business-specific constraint from the main application flow. We are part of the team developing and maintaining &lt;a href="https://www.drools.org/"&gt;Drools&lt;/a&gt;—the world&amp;#8217;s most popular open source rule engine and part of Red Hat—and, in this article, we will describe how we are changing Drools to make it part of the cloud and serverless revolution.&lt;span id="more-572587"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Technical overview&lt;/h2&gt; &lt;p&gt;Our main goal was to make the core of the rule engine lighter, isolated, easily portable across different platforms, and well-suited to run in a container. The software development landscape has changed a lot in the past 20 years. We are moving more and more toward a polyglot world, which is one reason why we are working to make our technology work across a lot of different platforms. This is also why we started looking into &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt;, the new Oracle Labs polyglot virtual machine (VM) ecosystem, consisting of:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A polyglot VM runtime, alternative to the &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java&lt;/a&gt; virtual machine (JVM) with a just-in-time (JIT) compiler that improves efficiency and speed of applications over traditional HotSpot. This is also the &amp;#8220;proper&amp;#8221; GraalVM.&lt;/li&gt; &lt;li&gt;A framework to write efficient dynamic programming languages (e.g., JavaScript, Python, and R) and to mix and match them (Truffle).&lt;/li&gt; &lt;li&gt;A tool to compile programs ahead-of-time (AOT) into a native executable.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Meanwhile at Red Hat, another team was already experimenting with GraalVM and native binary generation for application development. This effort has been realized in a new project you may have heard of called &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Quarkus&lt;/a&gt;. The Quarkus project is a best-of-breed Java stack that works on good old JVM but is also especially tailored for GraalVM, native binary compilation, and cloud-native application development.&lt;/p&gt; &lt;p&gt;GraalVM is an amazing tool, but it also comes with some (understandable) &lt;a href="https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md"&gt;limitations&lt;/a&gt;. Thus, Quarkus is designed to integrate seamlessly with GraalVM and native image generation, as well as provide useful utilities to overcome any related limitations. In particular, Drools used to make extensive use of dynamic class generation, class-loading, and quite a bit of reflection. To produce fast, efficient, and small native executables, Graal performs aggressive inlining and dead-code elimination, and it operates under a &lt;strong&gt;closed-world assumption&lt;/strong&gt;: that is, the compiler removes any references to class and methods that cannot be statically reachable in the code. In other words, unrestricted reflective calls and dynamic class loading are a no-go. Although this may at first sound like a showstopper, here we will document in detail how we modified the core of Drools to overcome such limitations, and we will explain why such limitations are not evil and can be liberating.&lt;/p&gt; &lt;h2&gt;The Executable Model&lt;/h2&gt; &lt;p&gt;In a rule engine, &lt;b&gt;facts&lt;/b&gt; are inserted into a &lt;b&gt;working memory.&lt;/b&gt; &lt;b&gt;Rules&lt;/b&gt; describe &lt;b&gt;actions&lt;/b&gt; to take when certain &lt;b&gt;constraints&lt;/b&gt; over the facts that are inserted into the working memory become &lt;b&gt;true&lt;/b&gt;. For instance, the sentence &amp;#8220;&lt;b&gt;when&lt;/b&gt; &lt;i&gt;the sun goes down &lt;/i&gt;&lt;b&gt;:&lt;/b&gt; &lt;i&gt;turn on the lights&lt;/i&gt;&amp;#8221; expresses a rule over the sun. The &lt;i&gt;fact&lt;/i&gt; is that the sun is going down. The &lt;i&gt;action&lt;/i&gt; is to turn on the lights. In a rule engine, we &lt;i&gt;insert &lt;/i&gt;the &amp;#8220;sun is going down&amp;#8221; fact inside the working memory. When we &lt;i&gt;fire&lt;/i&gt; the rules, the action of &lt;i&gt;turning on the lights&lt;/i&gt; will execute.&lt;/p&gt; &lt;p&gt;A rule definition has the form&lt;/p&gt; &lt;p style="text-align: left;"&gt;&lt;i&gt;constraints&lt;/i&gt; → &lt;i&gt;consequence&lt;/i&gt;&lt;/p&gt; &lt;p&gt;The &lt;i&gt;constraints&lt;/i&gt; part, also called the &lt;i&gt;left-hand side &lt;/i&gt;of the rule, describes the constraints that activate the rule and make it ready to &lt;i&gt;fire&lt;/i&gt;; the &lt;i&gt;consequence&lt;/i&gt; part, also called the &lt;i&gt;right-hand side&lt;/i&gt; of the rule, contains the action that rule will take when the rule is fired.&lt;/p&gt; &lt;p&gt;In Drools, a rule is written using the Drools Rule Language (in short, DRL), and it has the form:&lt;/p&gt; &lt;pre&gt;&lt;b&gt;rule&lt;/b&gt; R1 &lt;b&gt;when&lt;/b&gt;   $r : Result()                               // constraints    $p : Person( age &amp;#62;= 18 )      &lt;b&gt;then&lt;/b&gt;   $r.setValue( $p.getName() + " can drink");  // consequence &lt;b&gt;end&lt;/b&gt;&lt;/pre&gt; &lt;p&gt;Constraints are written using a form of pattern-matching over the data (Java objects) that is inserted into the working memory. Actions are basically a block of Java code with a few Drools-specific extensions.&lt;/p&gt; &lt;p&gt;Historically, the DRL used to be a dynamic language that was interpreted at runtime by the Drools engine. In particular, the pattern matching syntax had a major drawback: it made extensive use of reflection unless the engine detected a constraint was &amp;#8220;hot&amp;#8221; enough for further optimization; that is, if it had evaluated a certain number of times; in that case the engine would compile it into bytecode on-the-fly.&lt;/p&gt; &lt;p&gt;About one year ago, for performance reasons, we decided to go away with runtime reflection and dynamic code generation and completed the implementation of what we called the &lt;a href="http://blog.athico.com/2018/02/the-drools-executable-model-is-alive.html"&gt;Drools Executable Model&lt;/a&gt;, providing a pure Java-based representation of a rule set, together with a convenient Java DSL to programmatically define such model.&lt;/p&gt; &lt;p&gt;To give an idea of how this Java API looks, like let’s consider again the simple Drools rule reported above. The rule will fire if the working memory contains any Result instance and any instance of Person where the age field is greater or equal to 18. The consequence is to set the value of the Result object to a String saying that the person can drink. The equivalent rule expressed with the executable model API looks like the following (pretty-printed for readability):&lt;/p&gt; &lt;pre&gt;var r = declarationOf(Result.class, "$r"); var p = declarationOf(Person.class, "$p"); var rule =    rule("com.example", "R1").build(          pattern(r),          pattern(p).expr("e", p -&amp;#62; p.getAge() &amp;#62;= 18),          alphaIndexedBy(int.class, GREATER_OR_EQUAL, 1, this::getAge, 18),          reactOn("age")),     on(p, r).execute(($p, $r) -&amp;#62;          $r.setValue($p.getName() + " can drink")));&lt;/pre&gt; &lt;p&gt;As you can see, this representation is more verbose and harder to understand, partly because of the Java syntax, but mostly because it explicitly contains lots of details, such as the specification of how Drools should internally index a given constraint, which was implicit in the corresponding DRL. We did this on purpose because we wanted a totally explicit rule representation that did not require any convoluted inference or reflection sorcery. However, we knew it would be crazy to ask users to be aware of all such intricate details, so we wrote a compiler to translate DRL into the equivalent Java code. We achieved this using &lt;a href="http://javaparser.org/"&gt;JavaParser&lt;/a&gt;, a really nice open source library that allows to parse, modify, and generate any Java source code through a convenient API.&lt;/p&gt; &lt;p&gt;In all honesty, when we designed and implemented the executable model, we didn’t have strictly GraalVM in mind. We simply wanted an intermediate and pure Java representation of the rule that could be efficiently interpreted and executed by the engine. Yet, by completely avoiding reflection and dynamic code generation,  the executable model was key to allowing us to support native binary generation with Graal. For instance, because the new model expresses all constraints as lambda predicates, we don’t need to optimize the constraints evaluators through bytecode generation and dynamic classloading, which are totally forbidden in native image generation.&lt;/p&gt; &lt;p&gt;The design and implementation of executable model taught us an important lesson in the process of making Drools compatible with Graal: any limitation can be overcome with a sufficient amount of code generation. We will further discuss this in the next section.&lt;/p&gt; &lt;h2&gt;Overcoming other Graal limitations&lt;/h2&gt; &lt;p&gt;Having a plain Java model of a Drools rule base was a very good starting point, but more work was needed to make our project compatible with native binary generation.&lt;/p&gt; &lt;p&gt;The executable model makes reflection largely unnecessary; however, our engine still needs reflection for one last feature called&lt;a href="http://docs.jboss.org/drools/release/7.17.0.Final/drools-docs/html_single/#_fine_grained_property_change_listeners"&gt; property reactivity&lt;/a&gt;. Our plans are to get rid of reflection altogether, but, because the change is nontrivial, for this time we resorted to a handy feature of the binary image compiler. This feature&lt;i&gt; does&lt;/i&gt; support a form of reflection, provided that we can declare upfront the classes we will need to reflect upon at runtime. This can be supplied by providing a&lt;a href="https://github.com/oracle/graal/blob/master/substratevm/REFLECTION.md#manual-configuration"&gt; JSON descriptor&lt;/a&gt; file to the compiler, or, if you are using Quarkus, you can just &lt;a href="https://quarkus.io/guides/rest-json-guide"&gt;annotate the domain classes&lt;/a&gt;. For instance, in the rule shown above, our domain classes would be Result and Person. Then we can write:&lt;/p&gt; &lt;pre&gt;[  {     "name" : "org.drools.simple.project.Person",     "allPublicMethods" : true  },  {     "name" : "org.drools.simple.project.Result",     "allPublicMethods" : true  } ]&lt;/pre&gt; &lt;p&gt;Then, we can instruct the native binary compiler with the flag&lt;/p&gt; &lt;pre&gt;-H:ReflectionConfigurationFiles=reflection.json&lt;/pre&gt; &lt;p&gt;We segregated other redundant reflection trickery to a &lt;i&gt;dynamic&lt;/i&gt; module and implemented an alternative &lt;i&gt;static&lt;/i&gt; version of the same components that users can choose to import into their project. This approach is especially useful for binary image generation, but it has benefits for regular use cases as well. In particular, avoiding reflection and dynamic loading can result in faster startup time and improved run-time.&lt;/p&gt; &lt;p&gt;At startup time, Drools projects read an XML descriptor called the &lt;i&gt;kmodule&lt;/i&gt;, where the user declaratively defines the configuration of the project. Usually, we parse this XML file and load it into memory, but our current XStream-based parser uses a lot of reflection; so, first, we can load the XML with an alternative strategy that avoids reflection. However, we can go further: if we can guarantee that the in-memory representation of the XML will never change across runs, and we can afford to run a quick code-generation phase before repackaging a project for deployment, then we can avoid loading the XML at each boot-up altogether. In fact, we are now able to translate the XML file into a class file that will be loaded at startup time, like any other hand-coded class. Here&amp;#8217;s a comparison of the XML with a snippet of the generated code (again, pretty-printed for readability). The generated code is more verbose because it makes explicit all of the configuration defaults.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;table style="height: 203px;" width="888"&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;pre&gt;&amp;#60;kbase name="simpleKB" packages="org.drools.simple.project"&amp;#62; &amp;#60;ksession name="simpleKS" default="true"/&amp;#62; &amp;#60;/kbase&amp;#62;&lt;/pre&gt; &lt;/td&gt; &lt;td&gt; &lt;pre&gt;var m = KieServices.get().newKieModuleModel(); var kb = m.newKieBaseModel("simpleKB"); kb.setEventProcessingMode(CLOUD); kb.addPackage("org.drools.simple.project"); var ks = kb.newKieSessionModel("simpleKS"); ks.setDefault(true); ks.setType(STATEFUL); ks.setClockType(ClockTypeOption.get("realtime"));&lt;/pre&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Another issue with startup time is dynamic classpath scanning. Drools supports alternate ways to take &lt;i&gt;decisions&lt;/i&gt; other than DRL-based rules, such as &lt;i&gt;decision-tables, &lt;/i&gt;the &lt;i&gt;Decision Model and Notation (DMN) &lt;/i&gt;or &lt;i&gt;predictive models &lt;/i&gt;using the &lt;i&gt;Predictive Model Markup Language &lt;/i&gt;(&lt;i&gt;PMML&lt;/i&gt;). Such extensions are implemented as dynamically loadable modules, that are hooked into the core engine by scanning the classpath at boot-time. Although this is extremely flexible, it is not essential: even in this case, we can avoid runtime classpath scanning and provide &lt;i&gt;static &lt;/i&gt;wiring of the required components either by generating code at build-time, or by providing an explicit API to end users to hook components manually. We resorted to provide a pre-built static module with a minimal core.&lt;/p&gt; &lt;pre&gt;private Map&amp;#60;Class&amp;#60;?&amp;#62;, Object&amp;#62; serviceMap = new HashMap&amp;#60;&amp;#62;(); private void wireServices() {   serviceMap.put(ServiceInterface.class,                 Class.forName("org.drools.ServiceImpl").newInstance());   // … more services here }&lt;/pre&gt; &lt;p&gt;Note that, although here we are using Class.forName(), the compiler is smart enough to recognize the constant and substitute it with an actual constructor. Of course, it is possible to simplify this further by generating a chain of &lt;b&gt;if&lt;/b&gt; statements.&lt;/p&gt; &lt;p&gt;Finally, we tied everything together by getting rid of the last few pre-executable model leftovers: the legacy Drools class-loader. This was the culprit behind the following apparently cryptic error message:&lt;/p&gt; &lt;pre&gt;Error: unsupported features in 2 methods Detailed message: Error: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Unsupported method java.lang.ClassLoader.defineClass(String, byte[], int, int, ProtectionDomain) is reachable: The declaring class of this element has been substituted, but this element is not present in the substitution class To diagnose the issue, you can add the option --report-unsupported-elements-at-runtime. The unsupported element is then reported at run time when it is accessed the first time. Trace:        at parsing org.drools.dynamic.common.DynamicComponentsSupplier$DefaultByteArrayClassLoader.defineClass(DynamicComponentsSupplier.java:49) Call path from entry point to org.drools.dynamic.common.DynamicComponentsSupplier$DefaultByteArrayClassLoader.defineClass(String, byte[], ProtectionDomain):&lt;/pre&gt; &lt;p&gt;Really, however, the message is pretty clear: our custom class-loader is able to dynamically &lt;i&gt;define&lt;/i&gt; a class, which is useful when you generate bytecode at &lt;i&gt;run-time.&lt;/i&gt; But, if the codebase relies completely on the executable model, we can avoid this altogether, so we isolated the legacy class-loader into the &lt;i&gt;dynamic &lt;/i&gt;module.&lt;/p&gt; &lt;p&gt;This is the last step that was necessary to successfully generate a native image of our simple test project, and the results exceeded our expectations, thereby confirming that the time and efforts we spent in this experiment were well invested. Indeed, executing the main class of our test case with a normal JVM takes 43 milliseconds with a occupation of 73M of memory. The corresponding native image generated by Graal lasted is timed at less than 1 millisecond and uses only 21M of memory.&lt;/p&gt; &lt;h2&gt;Integrating with Quarkus&lt;/h2&gt; &lt;p&gt;Once we had a first version of Drools compatible with Graal native binary generation, the next natural step was to start leveraging the features provided by Quarkus and try to create a simple web service with it. We noticed that Quarkus offers a different and simpler mechanism to let the compiler know that we need reflection on a specific class. In fact, instead of having to declare this in a JSON file as before, you can annotate the class of your domain model as follows:&lt;/p&gt; &lt;pre&gt;@RegisterForReflection public class Person { … }&lt;/pre&gt; &lt;p&gt;We also decided to go one small step forward with our code generation machinery. In particular, we added one small interface to Drools code&lt;/p&gt; &lt;pre&gt;public interface KieRuntimeBuilder {     KieSession newKieSession();     KieSession newKieSession(String sessionName); }&lt;/pre&gt; &lt;p&gt;so that when the Drools compiler creates the executable model from the DRL files it also generates an implementation of this class. This implementation has the purpose of supplying a Drools session automatically configured with the rules and the parameters defined by the user.&lt;/p&gt; &lt;p&gt;After that, we were ready to put both dependency injection and REST support provided by Quarkus to work, and we developed a simple web service exercising the Drools runtime.&lt;/p&gt; &lt;pre&gt;@Path("/candrink/{name}/{age}") public class CanDrinkResource {     @Inject     KieRuntimeBuilder runtimeBuilder;     @GET     @Produces(MediaType.TEXT_PLAIN)     public String canDrink( @PathParam("name") String name,                           @PathParam("age") int age ) {        KieSession ksession = runtimeBuilder.newKieSession();        Result result = new Result();        ksession.insert(result);        ksession.insert(new Person( name, age ));        ksession.fireAllRules();        return result.toString();     } }&lt;/pre&gt; &lt;p&gt;The example is straightforward enough to not require any further explanation and is fully deployable as a microservice in an OpenShift cluster. Thanks to the extremely low startup time—due to the work we did on Drools and the low overhead of Quarkus—this microservice is fast enough to be deployable in a &lt;a href="https://cloud.google.com/knative/"&gt;KNative&lt;/a&gt; cloud. You can find the full source code on &lt;a href="https://github.com/kiegroup/submarine-examples"&gt;GitHub&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Introducing Submarine&lt;/h2&gt; &lt;p&gt;These days, rule engines are seldom a matter of discussion. This is because they &lt;i&gt;just work&lt;/i&gt;. A rule engine is not necessarily antithetical to a cloud environment, but work might be needed to fit the new paradigm. This was the story of our journey. We started with courage and curiosity. In the next few months, we will push this work forward to become more than a simple prototype, to realize a complete suite of business automation tools ready for the cloud. The name of the initiative is &lt;b&gt;Submarine, &lt;/b&gt;from the famous Dijkstra quote. So, sit tight, and get ready to dive in.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#38;linkname=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fquarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component%2F&amp;#038;title=Quarking%20Drools%3A%20How%20we%20turned%20a%2013-year-old%20Java%20project%20into%20a%20first-class%20serverless%20component" data-a2a-url="https://developers.redhat.com/blog/2019/03/14/quarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component/" data-a2a-title="Quarking Drools: How we turned a 13-year-old Java project into a first-class serverless component"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/14/quarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component/"&gt;Quarking Drools: How we turned a 13-year-old Java project into a first-class serverless component&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/BF0O4ih8nkE" height="1" width="1" alt=""/&gt;</content><summary>“The question of whether a computer can think is no more interesting than the question of whether a submarine can swim.” (Edsger W. Dijkstra) Rule-based artificial intelligence (AI) is often overlooked, possibly because people think it’s only useful in heavyweight enterprise software products. However, that’s not necessarily true. Simply put, a rule engine is just a piece of software that allows y...</summary><dc:creator>Mario Fusco</dc:creator><dc:date>2019-03-14T07:05:14Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/14/quarking-drools-how-we-turned-a-13-year-old-java-project-into-a-first-class-serverless-component/</feedburner:origLink></entry><entry><title>How to set up a LAMP stack quickly on Red Hat Enterprise Linux 8 Beta</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kkklu_dsMjA/" /><category term="apache" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="LAMP" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="MariaDB" scheme="searchisko:content:tags" /><category term="php" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Maxim Burgerhout</name></author><id>searchisko:content:id:jbossorg_blog-how_to_set_up_a_lamp_stack_quickly_on_red_hat_enterprise_linux_8_beta</id><updated>2019-03-14T07:00:26Z</updated><published>2019-03-14T07:00:26Z</published><content type="html">&lt;p&gt;Have you &lt;a href="https://developers.redhat.com/rhel8/"&gt;tried&lt;/a&gt; the &lt;a href="https://developers.redhat.com/rhel8/"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; (RHEL8) Beta yet? Read on to learn how to stand up a &lt;a href="https://developers.redhat.com/blog/2017/03/07/how-to-set-up-a-lamp-stack-on-red-hat-enterprise-linux-7/"&gt;LAMP stack&lt;/a&gt; on top of RHEL8 Beta quickly, and play around with new features built into the operating system.&lt;/p&gt; &lt;p&gt;A LAMP stack is made up out of four main components, and some glue. The first main component in a LAMP stack is &lt;em&gt;Linux&lt;/em&gt;. In my example, I’m using Red Hat Enterprise Linux 8 Beta for that, which gives me a secure operating system, a modern programming environment, and user-friendly set of tools to control it.&lt;span id="more-570047"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;As for the web server, traditionally the “A” in LAMP stood for &lt;em&gt;Apache&lt;/em&gt;, but in RHEL8 Beta we actually have options here. We ship Apache httpd with RHEL8 Beta, but we also ship NGINX. Because I’m a little bit traditional here, I’ll opt for Apache.&lt;/p&gt; &lt;p&gt;In RHEL8 Beta, Apache ships as an &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/"&gt;AppStream&lt;/a&gt;, which, among other things, allow us to provide content with varying life cycles. With AppStreams, we can, for example, ship multiple versions of Python, and add new versions of programming environments outside of the normal RHEL release cadence.&lt;/p&gt; &lt;p&gt;Installing Apache on RHEL8 as easy as it was on earlier versions of RHEL. Run:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo yum -y install httpd&lt;/code&gt;&lt;/p&gt; &lt;p&gt;(You are using sudo, right? If you didn&amp;#8217;t set your user ID to be an Administrator during installation, see &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/"&gt;How to enable sudo on Red Hat Enterprise Linux&lt;/a&gt;.&lt;/em&gt;)&lt;/p&gt; &lt;p&gt;This command will enable the Apache 2.4 AppStream and install the httpd package, including its default dependencies.&lt;/p&gt; &lt;p&gt;To start this newly installed web server and make sure it will automatically be started after a reboot, I’ll need to run:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo systemctl enable --now httpd&lt;/code&gt;&lt;/p&gt; &lt;p&gt;And, as I’ll want my server to be reachable over the network, I’ll need to open up ports 80 and 443 on my system. We can do that from the Web Console in RHEL8 (see the DevNation video at the end of this article for a demo), but for now, let’s just use the command-line tools provided with RHEL8 Beta. They are quite easy:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo firewall-cmd --add-service=http --add-service=https&lt;/code&gt;&lt;br /&gt; &lt;code&gt;$ sudo firewall-cmd --add-service=http --add-service=https --permanent&lt;/code&gt;&lt;/p&gt; &lt;p&gt;That’s it. The first command opened up ports 80 and 443 right now, and the second command made sure that after a reboot or firewall restart, the ports will still be open.&lt;/p&gt; &lt;p&gt;Now for the database part. Again, traditionally, the “M” in LAMP stood for &lt;em&gt;MySQL&lt;/em&gt;; however, nowadays, it can also mean MariaDB, MongoDB, or even PostgreSQL. You can see what databases RHEL8 Beta ships with by running:&lt;/p&gt; &lt;p&gt;&lt;code&gt;sudo yum module list&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-570087 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screenshot-from-2019-03-05-09-50-45-1024x266.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screenshot-from-2019-03-05-09-50-45.png" alt="" width="1245" height="323" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screenshot-from-2019-03-05-09-50-45.png 1245w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screenshot-from-2019-03-05-09-50-45-300x78.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screenshot-from-2019-03-05-09-50-45-768x199.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/03/Screenshot-from-2019-03-05-09-50-45-1024x266.png 1024w" sizes="(max-width: 1245px) 100vw, 1245px" /&gt;&lt;/p&gt; &lt;p&gt;(I’ve stripped the non-database AppStreams from the output for brevity.)&lt;/p&gt; &lt;p&gt;As you can see, MongoDB is not an option for RHEL8 Beta. You can read the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/html/8.0_beta_release_notes/"&gt;RHEL8 Beta release notes&lt;/a&gt; for a little background on why that is. What we do have, though, is MySQL 8, MariaDB 10.3, PostgreSQL 9.6 and 10, and Redis 4 and 5. That’s a lot to choose from! (Do not assume the final product will ship with all of these versions, however. After all, we are looking at beta software.)&lt;/p&gt; &lt;p&gt;I want to build a fairly traditional LAMP stack here, so I’ll opt for MariaDB, which is a drop-in replacement for MySQL. I want to install a database server, so the default profile (‘&lt;em&gt;server&lt;/em&gt;’, indicated by the &lt;em&gt;[d]&lt;/em&gt; in the output above) will work for me. If I have only wanted the client bits, I could have installed the client profile, saving me a bit of disk space.&lt;/p&gt; &lt;p&gt;For now, however, I’ll run:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo yum -y module install mariadb&lt;/code&gt;&lt;/p&gt; &lt;p&gt;By the way, a standard &lt;code&gt;yum -y install mariadb-server&lt;/code&gt; will work just as well.&lt;/p&gt; &lt;p&gt;A database that’s not running is of little use, so let’s start it with:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo systemctl enable --now mariadb&lt;/code&gt;&lt;/p&gt; &lt;p&gt;I don’t need to open firewall ports, because my web server and database server run on the same machine. If you have separate machines for Apache and MariaDB, though, you’ll need to add the MySQL service to the firewall, using the &lt;em&gt;firewall-cmd&lt;/em&gt; command I showed above. You’ll also need to tune the SELinux policy to allow Apache to make network connections to a database (safety first!), by running:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo setsebool -P httpd_can_network_connect_db on&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Finally, because I have taken my lessons around security to heart, I’ll run the &lt;em&gt;mysql_secure_installation&lt;/em&gt; script:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo mysql_secure_installation&lt;/code&gt;&lt;/p&gt; &lt;p&gt;We are almost there. I have a proper Linux machine, I have my web server, and I have my database server. What’s still missing is a programming environment, and some glue. Let’s see, what programming environments do I have available?&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo yum module list&lt;/code&gt;&lt;/p&gt; &lt;p&gt;I’ll not show the whole output again here, but we have PHP, we have Python in two major versions, we have Ruby, and a plethora of other options. Traditional LAMP means PHP for me though, so that’s what I’ll be installing today. One simple command should that care of it:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo yum -y module install php&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Two final steps remain. First of all, some glue. In order to enable connecting to the MariaDB database from my PHP pages, I need to install a tiny library:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo yum -y install php-mysqlnd&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Now, as the final step, I’ll restart Apache to pick up my newly installed PHP and the PHP MySQL library:&lt;/p&gt; &lt;p&gt;&lt;code&gt;$ sudo systemctl restart httpd&lt;/code&gt;&lt;/p&gt; &lt;p&gt;That’s it, we are done. We can go into &lt;code&gt;/var/www/html&lt;/code&gt; and drop a PHP application in it and everything should work.&lt;/p&gt; &lt;p&gt;A few weeks back, Burr Sutter hosted me on DevNation Live, and we recorded an overview of RHEL8 Beta from a developer point of view. We covered installing and using programming environments, managing your development systems, and much more. Interested? Watch the video:&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/4DiLdgtcavo?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;I hope this is helpful. Let me know what you think in the comments or on Twitter: &lt;a href="https://twitter.com/MaximBurgerhout"&gt;@MaximBurgerhout&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#38;linkname=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F14%2Fred-hat-enterprise-linux-8-beta-lamp%2F&amp;#038;title=How%20to%20set%20up%20a%20LAMP%20stack%20quickly%20on%20Red%20Hat%20Enterprise%20Linux%208%20Beta" data-a2a-url="https://developers.redhat.com/blog/2019/03/14/red-hat-enterprise-linux-8-beta-lamp/" data-a2a-title="How to set up a LAMP stack quickly on Red Hat Enterprise Linux 8 Beta"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/14/red-hat-enterprise-linux-8-beta-lamp/"&gt;How to set up a LAMP stack quickly on Red Hat Enterprise Linux 8 Beta&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kkklu_dsMjA" height="1" width="1" alt=""/&gt;</content><summary>Have you tried the Red Hat Enterprise Linux 8 (RHEL8) Beta yet? Read on to learn how to stand up a LAMP stack on top of RHEL8 Beta quickly, and play around with new features built into the operating system. A LAMP stack is made up out of four main components, and some glue. The first main component in a LAMP stack is Linux. In my example, I’m using Red Hat Enterprise Linux 8 Beta for that, which g...</summary><dc:creator>Maxim Burgerhout</dc:creator><dc:date>2019-03-14T07:00:26Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/14/red-hat-enterprise-linux-8-beta-lamp/</feedburner:origLink></entry><entry><title>A gentle introduction to jump threading optimizations</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rI5b6EPvCuE/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="compiler" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="GNU Compiler Collection" scheme="searchisko:content:tags" /><category term="jump threading" scheme="searchisko:content:tags" /><category term="Performance Improvements" scheme="searchisko:content:tags" /><author><name>Aldy Hernandez</name></author><id>searchisko:content:id:jbossorg_blog-a_gentle_introduction_to_jump_threading_optimizations</id><updated>2019-03-13T07:07:24Z</updated><published>2019-03-13T07:07:24Z</published><content type="html">&lt;p&gt;As part of the &lt;a href="https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9/"&gt;GCC developers&lt;/a&gt;&amp;#8216; &lt;a href="https://gcc.gnu.org/wiki/AndrewMacLeod/Ranger"&gt;on-demand range work&lt;/a&gt; for GCC 10, I&amp;#8217;ve been playing with improving the backward jump threader so it can thread paths that are range-dependent. This, in turn, had me looking at the jump threader, which is a part of the compiler I&amp;#8217;ve been carefully avoiding for years. If, like me, you&amp;#8217;re curious about compiler optimizations, but are jump-threading-agnostic, perhaps you&amp;#8217;ll be interested in this short introduction.&lt;/p&gt; &lt;p&gt;&lt;span id="more-567287"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;At the highest level, jump threading&amp;#8217;s major goal is to reduce the number of dynamically executed jumps on different paths through the program&amp;#8217;s control flow graph. Often this results in improved performance due to the reduction of conditionals, which in turn enables further optimizations. Typically, for every runtime branch eliminated by jump threading, two or three other runtime instructions are eliminated.&lt;/p&gt; &lt;p&gt;Simplification of control flow also dramatically reduces the false-positive rates from warnings such as &lt;code&gt;-Wuninitialized&lt;/code&gt;. False positives from &lt;code&gt;-Wuninitialized&lt;/code&gt; typically occur because there are paths through the control flow graph that cannot occur at runtime, but remain in the internal representation of the code.&lt;/p&gt; &lt;p&gt;GCC developers have found a strong correlation between false positives from &lt;code&gt;-Wuninitialized&lt;/code&gt; and missed optimization opportunities. Thus, the GCC developers are keenly interested in any false-positive report for&lt;code&gt; -Wuninitialized&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The classic jump thread example is a simple jump to jump optimization. For instance, it can transform the following:&lt;/p&gt; &lt;pre&gt; if (a &amp;#62; 5) goto j; stuff (); stuff (); j: goto somewhere; &lt;/pre&gt; &lt;p&gt;into the more optimized sequence below:&lt;/p&gt; &lt;pre&gt; if (a &amp;#62; 5) goto somewhere; stuff (); stuff (); j: goto somewhere; &lt;/pre&gt; &lt;p&gt;However, jump threading can also thread two partial conditions that are known to overlap:&lt;/p&gt; &lt;pre&gt;void foo(int a, int b, int c) { if (a &amp;#38;&amp;#38; b) foo (); if (b || c) bar (); }&lt;/pre&gt; &lt;p&gt;The above is transformed into:&lt;/p&gt; &lt;pre&gt;void foo(int a, int b, int c) { if (a &amp;#38;&amp;#38; b) { foo (); goto skip; } if (b || c) { skip: bar (); } } &lt;/pre&gt; &lt;p&gt;An even more interesting sequence is when jump threading duplicates blocks to avoid branching. Consider a slightly tweaked version of the above:&lt;/p&gt; &lt;pre&gt;void foo(int a, int b, int c) { if (a &amp;#38;&amp;#38; b) foo (); tweak (); if (b || c) bar (); } &lt;/pre&gt; &lt;p&gt;The compiler cannot easily thread the above, unless it duplicates &lt;code&gt;tweak()&lt;/code&gt;, making the resulting code larger:&lt;/p&gt; &lt;pre&gt;void foo(int a, int b, int c) { if (a &amp;#38;&amp;#38; b) { foo (); tweak (); goto skip; } tweak (); if (b || c) { skip: bar (); } } &lt;/pre&gt; &lt;p&gt;Thanks to the code duplication, the compiler is able to join the two overlapping conditionals with no change in semantics. By the way, this is the ultimate goal of jump threading: avoiding expensive conditional branches, even though it may come at the expense of more code.&lt;/p&gt; &lt;p&gt;GCC does have a limit for how many instructions or basic blocks it is willing to duplicate in its quest for faster run speeds. Various compilation tweaks force the jump threader to consider longer sequences. One such option is &lt;code&gt;--param max-fsm-paths-insns=500&lt;/code&gt;, which causes the threader to thread sequences that could potentially duplicate up to 500 instructions per sequence (as opposed to the 100 default). Also there is &lt;code&gt;--param max-fsm-thread-length&lt;/code&gt;, which similarly expands the threader maximum, but by basic block length instead of instruction length. As with all &lt;code&gt;--param&lt;/code&gt; options, use them for self-amusement and clever party tricks, as they are subject to change without notice.&lt;/p&gt; &lt;p&gt;Jump threading is enabled by default for &lt;code&gt;-O2&lt;/code&gt; and above, but unfortunately, it is intertwined with the various value range propagation (VRP) passes and there is no independent way of turning it off. The deceptive &lt;code&gt;-fno-thread-jumps&lt;/code&gt; flag turns off jump threading only in the low-level RTL optimizers, which handle only a minuscule number of jump threads in a typical compilation. Making &lt;code&gt;-fno-thread-jumps&lt;/code&gt; applicable to all jump threading throughout the compiler, as well as disentangling VRP from jump threading as a whole, are on our to-do list.&lt;/p&gt; &lt;p&gt;If you&amp;#8217;d like to see the jump threader in action, compile a sufficiently complex program with &lt;code&gt;-fdump-tree-all-details -O2&lt;/code&gt; and look at &lt;code&gt;*.c*{ethread, thread1, thread2, thread3, thread4}&lt;/code&gt; as well as the VRP dumps &lt;code&gt;(*.c*{vrp1, vrp2})&lt;/code&gt;. You should see things like &lt;code&gt;Threaded jump 3 --&amp;#62; 4 to 7&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Enjoy!&lt;/p&gt; &lt;h2&gt;Also read&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings/"&gt;Understanding GCC warnings&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;More articles for C/C++ developers&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/08/usability-improvements-in-gcc-9"&gt;Usability improvements in GCC 9&lt;/a&gt; (GCC 9 is scheduled to be available in Fedora 30)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/15/gcc-8-usability-improvements/"&gt;Usability improvements in GCC 8&lt;/a&gt; (GCC 8 is available now for Red Hat Enterprise Linux 6, 7, and 8 Beta.)&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/05/yum-install-gcc-8-clang-6/#more-568577"&gt;How to install GCC 8 and Clang/LLVM 6 on Red Hat Enterprise Linux 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/"&gt;Recommended compiler and linker flags for GCC&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/11/01/getting-started-llvm-toolset/"&gt;Getting started with Clang/LLVM&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/24/detecting-string-truncation-with-gcc-8/"&gt;Detecting String Truncation with GCC 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/03/10/wimplicit-fallthrough-in-gcc-7/"&gt;Implicit fall through detection with GCC 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/02/22/memory-error-detection-using-gcc/"&gt;Memory error detection using GCC 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/03/17/diagnosing-function-pointer-security-flaws-with-a-gcc-plugin/" rel="bookmark"&gt;Diagnosing Function Pointer Security Flaws with a GCC plugin&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2016/01/14/toward-a-better-use-of-c11-atomics-part-1/" rel="bookmark"&gt;Toward a Better Use of C11 Atomics – Part 1&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#38;linkname=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Fintro-jump-threading-optimizations%2F&amp;#038;title=A%20gentle%20introduction%20to%20jump%20threading%20optimizations" data-a2a-url="https://developers.redhat.com/blog/2019/03/13/intro-jump-threading-optimizations/" data-a2a-title="A gentle introduction to jump threading optimizations"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/13/intro-jump-threading-optimizations/"&gt;A gentle introduction to jump threading optimizations&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rI5b6EPvCuE" height="1" width="1" alt=""/&gt;</content><summary>As part of the GCC developers‘ on-demand range work for GCC 10, I’ve been playing with improving the backward jump threader so it can thread paths that are range-dependent. This, in turn, had me looking at the jump threader, which is a part of the compiler I’ve been carefully avoiding for years. If, like me, you’re curious about compiler optimizations, but are jump-threading-agnostic, perhaps you’...</summary><dc:creator>Aldy Hernandez</dc:creator><dc:date>2019-03-13T07:07:24Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/13/intro-jump-threading-optimizations/</feedburner:origLink></entry><entry><title>Understanding GCC warnings, Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sJ0-vdY6bmw/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="compilers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="GNU Compiler Collection" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><author><name>Martin Sebor</name></author><id>searchisko:content:id:jbossorg_blog-understanding_gcc_warnings_part_2</id><updated>2019-03-13T07:06:58Z</updated><published>2019-03-13T07:06:58Z</published><content type="html">&lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings-part-1/"&gt;part 1&lt;/a&gt;, I shed light on trade-offs involved in the GCC implementation choices for various types of front-end warnings, such as preprocessor warnings, lexical warnings, type-safety warnings, and other warnings.&lt;/p&gt; &lt;p&gt;As useful as front-end warnings are, those based on the flow of control or data through the program have rather inconvenient limitations. To overcome them, flow-based warnings have increasingly been implemented in what GCC calls the &amp;#8220;middle end.&amp;#8221; Middle-end warnings are the focus of this article.&lt;/p&gt; &lt;p&gt;&lt;span id="more-562737"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Middle-end warnings&lt;/h2&gt; &lt;p&gt;For our purposes, the middle end starts with the &lt;em&gt;Gimplifier&lt;/em&gt; (the part of GCC that converts &lt;a href="https://gcc.gnu.org/onlinedocs/gccint/GENERIC.html"&gt;GENERIC&lt;/a&gt; to &lt;a href="https://gcc.gnu.org/onlinedocs/gccint/GIMPLE.html"&gt;GIMPLE&lt;/a&gt;) and includes all subsequent stages up to the expansion of GIMPLE to RTL (the low-level Register Transfer Language). Quite a number of GCC warnings fit this description. A representative sampling includes&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;-Warray-bounds&lt;/code&gt;, which detects out-of-bounds array indices&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Wformat-overflow&lt;/code&gt; (new in GCC 7), which looks for buffer overflows in calls to &lt;code&gt;sprintf&lt;/code&gt; and related functions&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Wnonnull&lt;/code&gt;, which detects passing null pointers to functions that don&amp;#8217;t expect it&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Wstringop-overflow&lt;/code&gt; (new in GCC 7), which helps find buffer overflow in calls to string and raw memory functions&lt;/li&gt; &lt;li&gt;&lt;code&gt;-Wuninitialized&lt;/code&gt;, which finds uses of uninitialized variables&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As GCC tries to detect more and more difficult bugs, the number of middle-end warnings has been growing.&lt;/p&gt; &lt;p&gt;The middle end in GCC is designed as a series of over a hundred more-or-less independent modules called &lt;em&gt;passes&lt;/em&gt;. Each pass traverses the intermediate representation of the source code (initially GENERIC, and then GIMPLE) in a predetermined order and transforms sequences of statements into others, performing various simplifications along the way. In the process, some passes expose interesting properties of the data the program operates on, such as the size of objects referenced by pointers or ranges of values that integer variables can take on in different branches of conditional statements, upper bounds on the number of loop iterations, and so on.&lt;/p&gt; &lt;p&gt;Although the purpose of a handful of passes is specifically to look for bugs, the primary purpose of almost all passes is to make code efficient. Because these optimization passes are selected only when their optimization is turned on, the number and quality of the warnings will be lower if optimization is disabled with &lt;code&gt;-O0&lt;/code&gt;. If somewhere along the way, a pass discovers a construct that is necessarily invalid, it may issue a warning, but with a few exceptions, doing so is secondary. The consequence is that implementing quality warnings in the middle end is challenging.&lt;/p&gt; &lt;h2&gt;Limitations of middle-end warnings&lt;/h2&gt; &lt;p&gt;The unavoidable challenge of all warnings implemented in the middle end is inherent in all flow-based warnings: because of the limits of computability, they are prone to both false negatives and false positives. But beyond that, GCC middle-end warnings are also imperfect because they depend on an infrastructure and representation that were designed primarily for optimization and with different priorities than static analyzers. Their number-one objective is to emit efficient object code for programs that follow the rules of the language. The basic assumption GCC optimizers have historically made, one that is enshrined in the standards for C and C++ and other languages, is that code they work with must be valid. Otherwise, all bets are off and their behavior is undefined. A design based on this view makes it difficult to detect even straightforward bugs and issue diagnostics for them. The same design also leads to inadvertently issuing warnings for correct constructs. Let&amp;#8217;s look at examples.&lt;/p&gt; &lt;h3&gt;False negatives due to assumptions about program validity&lt;/h3&gt; &lt;p&gt;As a simple example, consider the following trivially invalid program:&lt;/p&gt; &lt;pre&gt;const int primes[&lt;span style="color: #ff00ff; font-family: monospace;"&gt;10&lt;/span&gt;] = { 1, 3, 5, 7, 11, 13, 17, 19 }; int f (void) {   return primes[&lt;span style="color: #ff00ff; font-family: monospace;"&gt;17&lt;/span&gt;]; &lt;span style="color: #008000; font-family: monospace;"&gt;// index out-of-bounds&lt;/span&gt; }&lt;/pre&gt; &lt;p&gt;One would expect that compiling it would trigger a &lt;code&gt;-Warray-bounds&lt;/code&gt; warning for the read of the &lt;code&gt;primes&lt;/code&gt; array, but GCC issues no such warning. That seems like a simple bug (it can be found in GCC Bugzilla: &lt;a class="bz_bug_link bz_status_NEW " title="possibly missing -Warray-bounds warning" href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78678"&gt;78678&lt;/a&gt; and &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86691"&gt;86691&lt;/a&gt;) but, as it turns out, it is actually a &amp;#8220;feature&amp;#8221; of the internal design based on the assumption that the input to the middle end is a valid program. There is even a comment in the function that computes the result of the array dereference that makes this explicit (GCC uses the term &lt;em&gt;constructor&lt;/em&gt; to denote an aggregate initializer):&lt;/p&gt; &lt;pre&gt;  &lt;span style="color: #008000; font-family: monospace;"&gt;/* Memory not explicitly mentioned in constructor is 0 (or      the reference is out of range). */&lt;/span&gt;   return type ? build_zero_cst (type) : NULL_TREE; }&lt;/pre&gt; &lt;p&gt;The code considers the value of any element of the &lt;code&gt;primes&lt;/code&gt; array to be zero that has not been explicitly initialized, regardless of whether it is in or out of bounds. As a result, invalid indices into static constants are not diagnosed.&lt;/p&gt; &lt;h3&gt;The problem with early folding&lt;/h3&gt; &lt;p&gt;To emit code that is as efficient as possible, GCC aggressively performs transformations that simplify the internal representation of a program and make it easier to apply additional simplifications to. A simple example is an assignment such as&lt;/p&gt; &lt;pre&gt;n = strlen ("hello");&lt;/pre&gt; &lt;p&gt;where GCC can readily compute the result of the call and fold it into a constant, transforming the assignment to &lt;code&gt;n = 5&lt;/code&gt;. A somewhat more involved example is one that involves an offset into a constant string:&lt;/p&gt; &lt;pre&gt;extern int i; n = strlen ("hello" + i);&lt;/pre&gt; &lt;p&gt;Here, the result of the call cannot be folded into a constant unless &lt;code&gt;i&lt;/code&gt;&amp;#8216;s value is known; however, because the length of the string is known, and because the only values &lt;code&gt;i&lt;/code&gt; can take on for the resulting pointer to be valid are between zero and 5, the result also must be between zero and 5. Therefore, the assignment can be folded into &lt;code&gt;n = 5 - i&lt;/code&gt;. And that is, in fact, close to what happens: GCC replaces the call with the expression&lt;/p&gt; &lt;pre&gt;n = (size_t)i &amp;#60; 5 ? 5 - (size_t)i : 0;&lt;/pre&gt; &lt;p&gt;The conditional isn&amp;#8217;t strictly necessary because a valid program must guarantee that &lt;code&gt;i&lt;/code&gt; is not out of the bounds of the string, but it ensures that the result isn&amp;#8217;t entirely meaningless (and excessively large) even for invalid values. Replacing the &lt;code&gt;strlen&lt;/code&gt; call with the simple conditional makes the computation much faster and the code much more compact, so it is a useful optimization, but it comes at a price. Because GCC performs this transformation very early on, if &lt;code&gt;i&lt;/code&gt;&amp;#8216;s value is determined by some subsequent optimization to be outside the valid range of zero to 5, it&amp;#8217;s too late to detect that the pointer addition in the &lt;code&gt;strlen&lt;/code&gt; argument is invalid. The call along with its argument have been eliminated and replaced by the integer subtraction. The upshot is that the invalid code is not diagnosed. This can be seen in the very first GIMPLE dump of the example below. Notice that the &lt;code&gt;strlen&lt;/code&gt; call is not present in the GIMPLE:&lt;/p&gt; &lt;pre&gt;size_t f (int i) { &lt;span style="color: #ff00ff; font-family: monospace;"&gt;i = 17&lt;/span&gt;; return strlen ("hello" + i); }&lt;/pre&gt; &lt;p&gt;The dump, obtained by compiling the function with the &lt;code&gt;-fdump-tree-gimple=/dev/stdout&lt;/code&gt; option, looks like this:&lt;/p&gt; &lt;pre&gt;f (int i) { long unsigned int D.1909; long unsigned int iftmp.0; i = 17; if (i &amp;#60;= 5) goto &amp;#60;D.1911&amp;#62;; else goto &amp;#60;D.1912&amp;#62;; &amp;#60;D.1911&amp;#62;: _2 = (sizetype) i; iftmp.0 = 5 - _2; goto &amp;#60;D.1913&amp;#62;; &amp;#60;D.1912&amp;#62;: iftmp.0 = 0; &amp;#60;D.1913&amp;#62;: D.1909 = iftmp.0; return D.1909; }&lt;/pre&gt; &lt;p&gt;There are many other transformations besides computing constant string lengths that GCC performs early on, including replacing calls to library functions such as &lt;code&gt;strcpy&lt;/code&gt; with others, often &lt;code&gt;memcpy&lt;/code&gt;, or even lower-level primitives like aggregate assignments (in GIMPLE, all aggregates, including arrays, can be assigned by using various forms of the &lt;a href="https://gcc.gnu.org/onlinedocs/gccint/Storage-References.html"&gt;MEM_REF expression&lt;/a&gt;). Most (but not all) of them make the transformed code easier to transform further or open up other interesting optimization opportunities. Unfortunately, most also result in the loss of detailed information that, although rarely important for optimization, may be essential to bug detection in later passes.&lt;/p&gt; &lt;h3&gt;Missing optimizations imply missing warnings&lt;/h3&gt; &lt;p&gt;All middle-end warnings depend to one extent or another on optimizations exposing information about the program or data that is not immediately apparent from the source code. GCC is a very good optimizing compiler but it has unavoidable limits, and so in cases when an optimization that a certain warning depends on has not been implemented, the warning is simply not going to be issued.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s use the &lt;code&gt;-Wnonnull&lt;/code&gt; warning as an example to illustrate this. Because the argument to the &lt;code&gt;strchr&lt;/code&gt; function below is a global constant, GCC is able to evaluate it very early on and substitute its result, or null, for the second argument to &lt;code&gt;strcpy&lt;/code&gt;. When the &lt;code&gt;-Wnonnull&lt;/code&gt; checker sees the &lt;code&gt;strcpy&lt;/code&gt; call, the null has been substituted for the second argument and the warning triggers:&lt;/p&gt; &lt;pre&gt;const char a[] = "123"; void f (char *d) { char *p = strchr (a, '9'); strcpy (d, p); } &lt;strong&gt;&lt;span style="color: #ff00ff; font-family: monospace;"&gt;warning:&lt;/span&gt;&lt;/strong&gt; argument 2 null where non-null expected [&lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;-Wnonnull&lt;/strong&gt;&lt;/span&gt;] 6 | &lt;strong&gt;&lt;span style="color: #ff00ff; font-family: monospace;"&gt;strcpy (d, p)&lt;/span&gt;&lt;/strong&gt;; | &lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;^~~~~~~~~~~~~&lt;/strong&gt;&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;The result of the optimization can be seen by compiling the function with the &lt;code&gt;-fdump-tree-optimized=/dev/stdout&lt;/code&gt; option:&lt;/p&gt; &lt;pre&gt;;; Function f (f, funcdef_no=0, decl_uid=1907, cgraph_uid=1, symbol_order=1) f (char * d) { &amp;#60;bb 2&amp;#62; [local count: 1073741824]: strcpy (d_2(D), &lt;span style="color: #ff00ff; font-family: monospace;"&gt;0B&lt;/span&gt;); [tail call] return; }&lt;/pre&gt; &lt;p&gt;But with the constant array defined as a local variable, GCC is no longer able to evaluate the &lt;code&gt;strchr&lt;/code&gt; call at compile time and fold its result into a constant. This is because local variables are initialized dynamically even if they are declared &lt;code&gt;const&lt;/code&gt;. As a result, the &lt;code&gt;-Wnonnull&lt;/code&gt; warning, which has no additional smarts of its own, does not trigger. This is simply because the &lt;code&gt;strchr&lt;/code&gt; optimization does not handle dynamically initialized variables.&lt;/p&gt; &lt;pre&gt;void g (char *d) { const char b[] = "234"; char *p = strchr (b, '9'); strcpy (d, p); }&lt;/pre&gt; &lt;p&gt;And indeed, the output of the optimizer confirms that the &lt;code&gt;strchr&lt;/code&gt; call has not been folded in this case:&lt;/p&gt; &lt;pre&gt;;; Function g (g, funcdef_no=1, decl_uid=1911, cgraph_uid=2, symbol_order=2) g (char * d) { char * p; const char b[4]; &amp;#60;bb 2&amp;#62; [local count: 1073741824]: &lt;span style="color: #ff00ff; font-family: monospace;"&gt;b = "234"&lt;/span&gt;; &lt;span style="color: #ff00ff; font-family: monospace;"&gt;p_3&lt;/span&gt; = strchr (&lt;span style="color: #ff00ff; font-family: monospace;"&gt;&amp;#38;b&lt;/span&gt;, 57); &lt;span style="color: #008000; font-family: monospace;"&gt;// 57 == '9'&lt;/span&gt; strcpy (d_4(D), &lt;span style="color: #ff00ff; font-family: monospace;"&gt;p_3&lt;/span&gt;); a ={v} {CLOBBER}; return; }&lt;/pre&gt; &lt;h2&gt;False positives in middle-end warnings&lt;/h2&gt; &lt;p&gt;As various optimizations pass over the internal representation of a program, they perform various transformations with the goal of either simplifying them or exposing simplification opportunities for later passes. From the perspective of false positive warnings, while most of these transformations are benign, sometimes they can introduce problems. The two biggest sources of problems are what&amp;#8217;s commonly referred to as &lt;em&gt;early folding&lt;/em&gt; and an optimization known as &lt;em&gt;jump threading&lt;/em&gt;.&lt;/p&gt; &lt;h3&gt;Jump threading&lt;/h3&gt; &lt;p&gt;The jump threading pass attempts to minimize conditional branches in code by merging existing conditionals or moving or even duplicating statements into the conditional blocks. To the untrained eye, the pass appears to introduce execution paths through the program where none exist in the source code. The duplication of statements in conditional blocks can then cause trouble when constants or ranges are subsequently propagated into those statements. A full explanation of the jump threading pass is beyond the scope of this article. For more background, read &amp;#8220;&lt;a href="https://developers.redhat.com/blog/2019/03/13/intro-jump-threading-optimizations/"&gt;A gentle introduction to jump threading optimizations&lt;/a&gt;&amp;#8221; by Aldy Hernandez.&lt;/p&gt; &lt;p&gt;As an example of the effects of jump threading, take the simple function below (reduced from GCC bug &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=88771"&gt;88771&lt;/a&gt;). Compiling it with GCC 8 in ILP32 mode results in the two suspicious warnings below. The natural reaction of the author of the code is to exclaim, &amp;#8220;Where did the huge numbers come from? I didn&amp;#8217;t write them!&amp;#8221;&lt;/p&gt; &lt;pre&gt;int f (char *d, const char *s, size_t i) {   size_t n = i + 1 ? i + 1 : i;   strncpy (d, s, n);   if (i + 1)     return -1;   return 0; } &lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;warning:&lt;/strong&gt;&lt;/span&gt; &lt;strong&gt;‘strncpy’&lt;/strong&gt; pointer overflow between offset 0 and size [4294967295, 2147483647] [&lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;-Warray-bounds&lt;/strong&gt;&lt;/span&gt;] &lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;strncpy (d, s, n);&lt;/strong&gt; &lt;strong&gt;^~~~~~~~~~~~~~~~~&lt;/strong&gt;&lt;/span&gt; &lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;warning:&lt;/strong&gt;&lt;/span&gt; &lt;strong&gt;‘strncpy’&lt;/strong&gt; specified size 4294967295 exceeds maximum object size 2147483647 [&lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;-Wstringop-overflow=&lt;/strong&gt;&lt;/span&gt;]&lt;/pre&gt; &lt;p&gt;What triggers the warnings can be understood from the dump of the Value Range Propagation pass (VRP) obtained by compiling the function with the &lt;code&gt;-fdump-tree-vrp&lt;/code&gt; option. The test for &lt;code&gt;n + 1&lt;/code&gt; being non-zero has resulted in the pass, in conjunction with the jump-threading optimization, introducing a whole new basic block (&lt;code&gt;&amp;#60;bb 5&amp;#62;&lt;/code&gt;) into the function with an obviously invalid call to &lt;code&gt;strncpy&lt;/code&gt;. The &lt;code&gt;-Warray-bounds&lt;/code&gt; and &lt;code&gt;-Wstringop-overflow&lt;/code&gt; warnings that run during a subsequent pass over the transformed code then notice the impossibly excessive size in the second &lt;code&gt;strncpy&lt;/code&gt; call and, on the assumption that it comes from the source code, issue the (somewhat confusing) diagnostics.&lt;/p&gt; &lt;pre&gt;f (char * d, const char * s, size_t i) {   int _2;   size_t iftmp.0_4;   &amp;#60;bb 2&amp;#62; [local count: 1073741825]:   if (i_3(D) != 4294967295) ;; 4294967295 == (size_t)-1     goto &amp;#60;bb 3&amp;#62;; [66.00%]   else     goto &amp;#60;bb 5&amp;#62;; [34.00%]   &amp;#60;bb 3&amp;#62; [local count: 708669604]:   iftmp.0_4 = i_3(D) + 1;   strncpy (d_6(D), s_7(D), iftmp.0_4);   &amp;#60;bb 4&amp;#62; [local count: 1073741825]:   # _2 = PHI &amp;#60;0(5), 1(3)&amp;#62;   return _2;   &amp;#60;bb 5&amp;#62; [local count: 365072224]:   strncpy (d_6(D), s_7(D), 4294967295);   goto &amp;#60;bb 4&amp;#62;; [100.00%] }&lt;/pre&gt; &lt;p&gt;Jump threading leads to other hard-to-deal-with warnings as well, such as &lt;code&gt;-Wunintialized&lt;/code&gt; and &lt;code&gt;-Wmaybe-uninitialized&lt;/code&gt;. A popular construct that seems to be particularly prone to its effects is the C++ class template &lt;code&gt;std::optional&lt;/code&gt;. See GCC bug &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80635"&gt;80635&lt;/a&gt; for a test case and a detailed discussion of the challenges it presents.&lt;/p&gt; &lt;p&gt;Several solutions to this problem have been discussed and remediations have been put in place for some warnings, but none is optimal. One commonly advocated approach is discussed in the next section.&lt;/p&gt; &lt;h3&gt;Interaction with sanitizers&lt;/h3&gt; &lt;p&gt;Another source of unintended instances of middle-end warnings can be the interaction of optimizers with the sanitizers (such as the Address Sanitizer or the Undefined Behavior Sanitizer). The instrumentation inserted by the sanitizers sometimes interferes with the optimizers&amp;#8217; ability to track control or data flow or to limit the optimizers&amp;#8217; ability to determine properties like pointer nullness. Because warnings and sanitizers both serve the same purpose, ideally they would both be usable at the same time with the same efficacy. Unfortunately, despite efforts to minimize these undesirable interactions, it seems unlikely that they can be avoided altogether.&lt;/p&gt; &lt;h2&gt;Solutions to the challenges for middle-end warnings&lt;/h2&gt; &lt;p&gt;A number of solutions are being discussed by GCC developers to improve the signal-to-noise ratio in middle-end warnings. Implementing additional optimizations is a good way to make warnings more effective. In many cases, that&amp;#8217;s a win-win proposition because it also leads to more efficient object code; however, in some cases, especially when the cost of implementing the optimization is high and the coding pattern insufficiently common, the return on investment is less clear.&lt;/p&gt; &lt;p&gt;Probably the hardest problem is avoiding the false negatives due to early folding because preserving the original detail after statements have been folded requires architectural changes to the representation of programs in the compiler.&lt;/p&gt; &lt;p&gt;Avoiding false positives caused by jump threading is a similar problem, due to the fact that they result in sequences of statements being inserted by GCC that don&amp;#8217;t exist in the original source code. It may be possible to throttle jump threading if it results in invalid statements, but only if the validity can be determined at the time of making the initial threading decision. If the statements turn out to be invalid only after additional transformations, it may be too late to reverse the decision. In those cases, another strategy may need to be employed to avoid the warnings. One approach being considered is replacing such statements with calls to &lt;code&gt;__builtin_trap()&lt;/code&gt; or &lt;code&gt;__builtin_unreachable()&lt;/code&gt;, perhaps in conjunction with issuing a diagnostic very late in the process if the introduced path doesn&amp;#8217;t end up subsequently eliminated. The choice of the appropriate strategy will probably need to be controlled by a command line option as discussed in the video &amp;#8220;&lt;a href="https://www.youtube.com/watch?v=inDduOFEyew"&gt;Future directions for treatment of undefined behaviour in C &amp;#8211; GNU Tools Cauldron 2018&lt;/a&gt;.&amp;#8221;&lt;/p&gt; &lt;h2&gt;More articles for C/C++ developers&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/05/yum-install-gcc-8-clang-6/"&gt;How to install GCC 8 and Clang/LLVM 6 on Red Hat Enterprise Linux 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/"&gt;Recommended compiler and linker flags for GCC&lt;/a&gt;—Improve warnings and code generation with the right flags.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/15/gcc-8-usability-improvements/"&gt;Usability improvements in GCC 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/11/01/getting-started-llvm-toolset/"&gt;Getting started with Clang/LLVM&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/24/detecting-string-truncation-with-gcc-8/"&gt;Detecting String Truncation with GCC 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/03/10/wimplicit-fallthrough-in-gcc-7/"&gt;Implicit fall through detection with GCC 7&lt;/a&gt;—Detect missing break statements inside of a switch block. The warning is enabled with &lt;code class="notranslate"&gt;-Wimplicit-fallthrough&lt;/code&gt;. It is also one of the warnings that will be enabled if you use &lt;code class="notranslate"&gt;-Wextra&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/02/22/memory-error-detection-using-gcc/"&gt;Memory error detection using GCC 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/03/17/diagnosing-function-pointer-security-flaws-with-a-gcc-plugin/" rel="bookmark"&gt;Diagnosing Function Pointer Security Flaws with a GCC plugin&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2016/01/14/toward-a-better-use-of-c11-atomics-part-1/" rel="bookmark"&gt;Toward a Better Use of C11 Atomics – Part 1&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#38;linkname=Understanding%20GCC%20warnings%2C%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings-part-2%2F&amp;#038;title=Understanding%20GCC%20warnings%2C%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings-part-2/" data-a2a-title="Understanding GCC warnings, Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings-part-2/"&gt;Understanding GCC warnings, Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sJ0-vdY6bmw" height="1" width="1" alt=""/&gt;</content><summary>In part 1, I shed light on trade-offs involved in the GCC implementation choices for various types of front-end warnings, such as preprocessor warnings, lexical warnings, type-safety warnings, and other warnings. As useful as front-end warnings are, those based on the flow of control or data through the program have rather inconvenient limitations. To overcome them, flow-based warnings have increa...</summary><dc:creator>Martin Sebor</dc:creator><dc:date>2019-03-13T07:06:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings-part-2/</feedburner:origLink></entry><entry><title>Understanding GCC warnings</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/qYAXgQmPA3k/" /><category term="C" scheme="searchisko:content:tags" /><category term="C++" scheme="searchisko:content:tags" /><category term="community" scheme="searchisko:content:tags" /><category term="compilers" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="gcc" scheme="searchisko:content:tags" /><category term="GNU Compiler Collection" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><author><name>Martin Sebor</name></author><id>searchisko:content:id:jbossorg_blog-understanding_gcc_warnings</id><updated>2019-03-13T07:05:00Z</updated><published>2019-03-13T07:05:00Z</published><content type="html">&lt;p&gt;Most of us appreciate when our compiler lets us know we made a mistake. Finding coding errors early lets us correct them before they embarrass us in a code review or, worse, turn into bugs that impact our customers. Besides the compulsory errors, many projects enable additional diagnostics by using the &lt;code&gt;-Wall&lt;/code&gt; and &lt;code&gt;-Wextra&lt;/code&gt; command-line options. For this reason, some projects even turn them into errors via &lt;code&gt;-Werror&lt;/code&gt; as their first line of defense. But not every instance of a warning necessarily means the code is buggy. Conversely, the absence of warnings for a piece of code is no guarantee that there are no bugs lurking in it.&lt;/p&gt; &lt;p&gt;In this article, I would like to shed more light on trade-offs involved in the GCC implementation choices. Besides illuminating underlying issues for GCC contributors interested in implementing new warnings or improving existing ones, I hope it will help calibrate expectations for GCC users about what kinds of problems can be expected to be detected and with what efficacy. Having a better understanding of the challenges should also reduce the frustration the limitations of the available solutions can sometimes cause. (See &lt;a href="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings-part-2/"&gt;part 2&lt;/a&gt; to learn more about middle-end warnings.)&lt;/p&gt; &lt;p&gt;The article isn&amp;#8217;t specific to any GCC version, but some command-line options it refers to are more recent than others. Most are in GCC 4 that ships with &lt;a href="https://access.redhat.com/products/red-hat-enterprise-linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL), but some are as recent as GCC 7. The output of the compiler shown in the examples may vary between GCC versions. See &lt;a href="https://developers.redhat.com/blog/2019/03/05/yum-install-gcc-8-clang-6/"&gt;How to install GCC 8 on RHEL&lt;/a&gt; if you&amp;#8217;d like to use the last GCC.&lt;/p&gt; &lt;p&gt;&lt;span id="more-558357"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;We rarely notice when a warning is not issued even though it should be. When we do, it&amp;#8217;s usually when we are looking for a reason why a bug wasn&amp;#8217;t discovered earlier in the development cycle. Only a small subset of missing warnings are reported to GCC, and those that are tend to be treated with lower priority. To an extent this is unavoidable because other bugs are often more important (think about the compiler emitting incorrect code for valid programs, for instance). Despite that, reports of missing warnings are useful not just because they let compiler writers know the compiler isn&amp;#8217;t doing what it advertises to do. Often they can also help identify missed optimization opportunities that might otherwise go unnoticed.&lt;/p&gt; &lt;p&gt;In contrast, warnings that complain about code that is not buggy stand out. In projects that enable &lt;code&gt;-Werror&lt;/code&gt;, they are impossible to miss. We call them &amp;#8220;false positives,&amp;#8221; or &amp;#8220;false alarms,&amp;#8221; or &amp;#8220;spurious,&amp;#8221; or sometimes, perhaps a little pejoratively, &amp;#8220;bogus.&amp;#8221; But not all such warnings do fit the notion of a false positive as it&amp;#8217;s defined in literature. Formally, a &lt;em&gt;false positive&lt;/em&gt; is a report of a violation of a rule that isn&amp;#8217;t supported by the rule&amp;#8217;s definition. Simply put, it&amp;#8217;s a bug in the warning.&lt;/p&gt; &lt;h2&gt;True positives versus bugs&lt;/h2&gt; &lt;p&gt;As an example of the distinction, take the &lt;code&gt;-Wchar-subscripts&lt;/code&gt; option, whose documented purpose is to&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Warn if an array subscript has type &lt;code&gt;char&lt;/code&gt;. This is a common cause of error, as programmers often forget that this type is signed on some machines.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Therefore, issuing the warning for an array subscript of any other type, including &lt;code&gt;signed char&lt;/code&gt;, would be a false positive. However, even though no instance of &lt;code&gt;-Wchar-subscripts&lt;/code&gt; when &lt;code&gt;char&lt;/code&gt; is unsigned is indicative of a bug, none is a false positive because the warning is meant to trigger regardless of &lt;code&gt;char&lt;/code&gt;&amp;#8216;s signedness. Whether that is a good design is a separate issue.&lt;/p&gt; &lt;p&gt;If, on the other hand, the &lt;code&gt;-Wchar-subscripts&lt;/code&gt; documentation instead read:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Warn if an array subscript with type &lt;code&gt;char&lt;/code&gt; has a negative value.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;then only instances pointing to negative subscripts would be true positives, and all others of any type, including and especially &lt;code&gt;char&lt;/code&gt;, would be false positives. But even with this refined formulation, not every instance of this hypothetical warning would be a bug either because negative subscripts from the end of an array may be valid. That this definition would make &lt;code&gt;-Wchar-subscripts&lt;/code&gt; superfluous is interesting, because &lt;code&gt;-Warray-bounds&lt;/code&gt; detects exactly the kinds of bugs this warning tries to prevent, with a rate of false positives approaching zero.&lt;/p&gt; &lt;p&gt;This might seem like a subtle distinction, but an important one because it determines where in GCC a warning has to be implemented to achieve satisfactory rates of true and false positives and false negatives, and how challenging that might be.&lt;/p&gt; &lt;h2&gt;Front-end warnings&lt;/h2&gt; &lt;p&gt;Most GCC diagnostics, errors, and warnings alike are implemented in language front ends. For our purposes, a GCC front end translates programs from source code into a language-independent form called &lt;a href="https://gcc.gnu.org/onlinedocs/"&gt;GENERIC&lt;/a&gt; that the subsequent phases of the compiler work with. A front end handles parsing and semantic analysis and ends just before the GENERIC form of the program is converted into a form suitable for optimization (&lt;a href="https://gcc.gnu.org/onlinedocs/"&gt;GIMPLE&lt;/a&gt;). During the translation to GENERIC, a front end checks code against the lexical, type-safety, and other static constraints of the language and issues errors where required by the language specification. This process is also an opportunity to check for constructs that are strictly valid but that may be unsafe and issue warnings.&lt;/p&gt; &lt;h3&gt;Preprocessor warnings&lt;/h3&gt; &lt;p&gt;A small number of GCC warnings are implemented in the preprocessor. This is necessary because detecting problems after code has been preprocessed would no longer be possible. Even though the GCC preprocessor is a standalone program, thanks to its close integration with the front ends, it makes sense to consider it a part of a front end for simplicity&amp;#8217;s sake. A few interesting examples of preprocessor warnings are &lt;code&gt;-Wtrigraphs&lt;/code&gt; that detects uses of trigraphs, &lt;code&gt;-Wundef&lt;/code&gt; to identify uses of undefined macros in &lt;code&gt;#if&lt;/code&gt; directives, and &lt;code&gt;-Wunused-macros&lt;/code&gt; to help find macros that are not used.&lt;/p&gt; &lt;h3&gt;Lexical warnings&lt;/h3&gt; &lt;p&gt;A broad class of warnings implemented in GCC front ends are those that are based on lexical rules. These can be thought of as sophisticated regular expressions. In static analysis terminology, these rules are sometimes referred to as pattern rules. An example of such a warning is &lt;code&gt;-Wstrict-prototypes&lt;/code&gt;: it points out C functions that are declared without a prototype (that is, with an empty set of parentheses). This is valid (though deprecated in the C standard), but because it lets the function be called with any number of arguments of arbitrary types, it is unsafe, and so issuing a warning for it is useful. Other similar variations of this warning detect related problems: &lt;code&gt;-Wold-style-declaration&lt;/code&gt;, &lt;code&gt;-Wold-style-definition&lt;/code&gt; for K&amp;#38;R style of function definitions, and &lt;code&gt;-Wmissing-parameter-type&lt;/code&gt; for declaring function parameters without specifying their type.&lt;/p&gt; &lt;p&gt;Other interesting and useful warnings based on lexical rules are &lt;code&gt;-Wempty-body&lt;/code&gt; for if statements with no body, &lt;code&gt;-Winit-self&lt;/code&gt; for definitions of variables initialized to their own (indeterminate) value, &lt;code&gt;-Wmissing-field-initializers&lt;/code&gt; to help detect struct members inadvertently initialized to zero as a result of a missing initializer, &lt;code&gt;-Woverride-init&lt;/code&gt; to prevent accidentally overwriting the value of an already initialized aggregate member with a different value when using designated initializers, &lt;code&gt;-Wvla&lt;/code&gt; for making use of C99 variable length arrays due to their propensity for overflowing the stack, &lt;code&gt;-Wsizeof-array-argument&lt;/code&gt; for applying the &lt;code&gt;sizeof&lt;/code&gt; operator to a function parameter declared using the array form and expecting it to compute the size of the array, and others.&lt;/p&gt; &lt;h3&gt;Type-safety warnings&lt;/h3&gt; &lt;p&gt;Another class of front-end warnings is based on enhanced rules for type-safety. C has historically been a permissive language whose specification imposes only loose constraints on the properties of types in mixed expressions. Over time, the laxity has caused its share of bugs, so much so that C++ tightened many of the same rules in its specification. As a result, GCC often issues warnings for strictly valid C and also C++ constructs that are suggestive of bugs due to taking liberties with type conversions.&lt;/p&gt; &lt;p&gt;Typical examples are the &lt;code&gt;-Wcast-qual&lt;/code&gt;, &lt;code&gt;-Wcast-align&lt;/code&gt;, and &lt;code&gt;-Wcast-function-type&lt;/code&gt; warnings for casts that remove one or more qualifiers in an unsafe way, or that increase the alignment of a pointer target type, or cast function pointers to incompatible types, respectively. Others include the &lt;code&gt;-Wint-to-pointer-cast&lt;/code&gt; and &lt;code&gt;-Wpointer-to-int-cast&lt;/code&gt; pair of options that control diagnostics for implicit conversions between integers and pointers. Conversions between pointers and integers are valid in C even without a cast (they are invalid in C++), but because they can cause bugs, the warnings are helpful in finding those. Yet another example, &lt;code&gt;-Wsign-compare&lt;/code&gt;, detects comparisons between expressions with different signedness.&lt;/p&gt; &lt;h3&gt;Other front-end warnings&lt;/h3&gt; &lt;p&gt;The last category of front-end warnings is simply those that don&amp;#8217;t fit into either of the two categories above. Typically they involve some simple form of data or control flow analysis, or they require a global view of the whole translation unit (for the most part, the front end works on one declaration or statement at a time).&lt;/p&gt; &lt;p&gt;All the &lt;code&gt;-Wshift-&lt;/code&gt; warnings (&lt;code&gt;-Wshift-count-negative&lt;/code&gt;, &lt;code&gt;-Wshift-count-overflow&lt;/code&gt;, &lt;code&gt;-Wshift-negative-value&lt;/code&gt;, and &lt;code&gt;-Wshift-overflow&lt;/code&gt;) fall into this category because their efficacy depends on GCC&amp;#8217;s ability to determine the value of one of the operands of the shift expression.&lt;/p&gt; &lt;p&gt;Similarly, some &lt;code&gt;-Wunused&lt;/code&gt; warnings also fall in here because they depend on GCC&amp;#8217;s ability to track the flow of control or to distinguish statements with no effect from others (&lt;code&gt;-Wunused-value&lt;/code&gt;), or to detect unused results of functions declared with attribute &lt;code&gt;warn_unused_result&lt;/code&gt; (&lt;code&gt;-Wunused-result&lt;/code&gt;). These latter warnings are at least in part implemented outside the front end, in the middle end. Warnings that detect unused static functions (&lt;code&gt;-Wunused-function&lt;/code&gt;) are also partially implemented in the middle end, where they have a global view of the entire translation unit.&lt;/p&gt; &lt;p&gt;A slightly different example is &lt;code&gt;-Wtype-limits&lt;/code&gt;, which detects equality and relational expressions that are inevitably true or false as a result of the limited range of the type of one of the operands. For the warning to do its job, only the value of one of the equality operands has to be known. In fact, the warning triggers only when the value of just one of the operands, not both, is known.&lt;/p&gt; &lt;h2&gt;Trade-offs of front-end warnings&lt;/h2&gt; &lt;p&gt;Preprocessor warnings are usually based on straightforward rules and so are prone to neither false positives nor false negatives. They are also easy to suppress in code that cannot be fixed and tend not to be very interesting. They will not be discussed further.&lt;/p&gt; &lt;p&gt;Although more complex than preprocessor warnings, lexical warnings are usually also fairly straightforward and typically have low rates of false positives and false negatives. Unintended instances (false positives) and missing warnings where warnings should be issued (false negatives) are simple bugs in the implementation that can be easily fixed. Except for requests to include options such as &lt;code&gt;-Wall&lt;/code&gt;, there are no open bug reports against any of them in GCC Bugzilla.&lt;/p&gt; &lt;p&gt;Like lexical warnings, type-based warnings are also relatively simple and suffer from near-zero rates of false positives and false negatives. A front end is the appropriate compiler component for implementing them.&lt;/p&gt; &lt;p&gt;The trade-offs of front-end warnings come into focus for those that depend on any sort of data or control-flow analysis. Front ends simply don&amp;#8217;t have sufficient information about either to track the values of variables across statements, let alone across function calls, or to determine whether statements are reachable. As a result, such warnings are prone to both false negatives and false positives, suggesting that a front end may not be the most appropriate choice for their implementation. In the sections that follow, we will take a look at problems that stem from this choice.&lt;/p&gt; &lt;h3&gt;False negatives because of a lack of constant propagation&lt;/h3&gt; &lt;p&gt;A good example of a front-end warning that is compromised by the lack of constant propagation is &lt;code&gt;-Wformat&lt;/code&gt;. The implementation of the warning is able to check &lt;code&gt;printf&lt;/code&gt; format strings that are either literals or compile-time constants but not others. For instance, when the format string is declared as a &lt;code&gt;const char&lt;/code&gt; array, GCC can check it and catch mistakes like this one:&lt;/p&gt; &lt;pre&gt; const char fmt[] = "%s"; printf (fmt, 123);   &lt;span style="color: #008000;"&gt;// checked&lt;/span&gt; &lt;strong&gt;&lt;span style="color: #ff00ff; font-family: monospace;"&gt; warning:&lt;/span&gt;&lt;/strong&gt; format &lt;strong&gt;‘%s’&lt;/strong&gt; expects argument of type &lt;strong&gt;‘char *’&lt;/strong&gt;, but argument 2 has type &lt;strong&gt;‘int’&lt;/strong&gt; [&lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;-Wformat=&lt;/strong&gt;&lt;/span&gt;] &lt;/pre&gt; &lt;p&gt;But when the format string is assigned to a pointer variable that itself isn&amp;#8217;t a constant, the front end doesn&amp;#8217;t see its value (because the value of the pointer can change between its initialization and use) and GCC fails to detect the same mistake below:&lt;/p&gt; &lt;pre&gt; const char *fmt = "%s"; printf (fmt, 456);   &lt;span style="color: #008000; font-family: monospace;"&gt;// not checked &lt;/span&gt;&lt;/pre&gt; &lt;p&gt;Only later stages of the compiler that track the constant values of variables across expressions (they perform constant propagation) would make it possible to detect the mistake in this latter example.&lt;/p&gt; &lt;h3&gt;False negatives due to a lack of value range propagation&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;-Wtype-limits&lt;/code&gt; option mentioned above is documented like so:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Warn if a comparison is always true or always false due to the limited range of the data type, but do not warn for constant expressions.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;This specification leaves it open to a whole range of false positives. For instance, the manual implies &lt;code&gt;-Wtype-limits&lt;/code&gt; should be issued for this example:&lt;/p&gt; &lt;pre&gt;int f (int i) {   if (i &amp;#60; 0)     i = 0;   return i - INT_MIN &amp;#60; 0; &lt;span style="color: #008000; font-family: monospace;"&gt;// always false&lt;/span&gt; }&lt;/pre&gt; &lt;p&gt;In the &lt;code&gt;return&lt;/code&gt; statement, because &lt;code&gt;i&lt;/code&gt;&amp;#8216;s value is known to be non-negative and limited by its type to be less than &lt;code&gt;-(INT_MIN + 1)&lt;/code&gt;, the comparison is necessarily false. Regrettably, partly as a result of a bug, but more interestingly as a result of the unavailability of value range optimization (VRP) in the front end, GCC fails to diagnose this (and many similar cases) because it doesn&amp;#8217;t have the knowledge that the &lt;code&gt;if&lt;/code&gt; statement constrains the range of &lt;code&gt;i&lt;/code&gt;&amp;#8216;s values to no less than zero. This information is readily available in later stages of compilation thanks to the VRP optimizing pass.&lt;/p&gt; &lt;h3&gt;Warnings in unreachable code&lt;/h3&gt; &lt;p&gt;As an example of a false positive, consider &lt;code&gt;-Wshift-count-overflow&lt;/code&gt; and the following two equivalent functions. (The example is deliberately contrived to illustrate the limitation in the implementation of the warning. There are much better ways to code it.)&lt;/p&gt; &lt;pre&gt;unsigned long f (unsigned long x) {   if (sizeof (long) == 8)     &lt;span style="color: #ff00ff; font-family: monospace;"&gt;x &amp;#60;&amp;#60;= 63&lt;/span&gt;;   else     x &amp;#60;&amp;#60;= 31;   return x; } unsigned long g (unsigned long x) {   &lt;span style="color: #000000; font-family: monospace;"&gt;x &amp;#60;&amp;#60;= &lt;/span&gt;(sizeof (long) == 8) ? 63 : 31;   return x; }&lt;/pre&gt; &lt;p&gt;In ILP64 mode, where most of us develop and test software and where &lt;code&gt;long&lt;/code&gt; is a 64-bit wide type, the code compiles without a warning. But in ILP32 mode with 32-bit &lt;code&gt;long&lt;/code&gt;, GCC complains:&lt;/p&gt; &lt;pre&gt;&lt;strong&gt;&lt;span style="color: #ff00ff; font-family: monospace;"&gt;warning:&lt;/span&gt;&lt;/strong&gt; left shift count &amp;#62;= width of type [&lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;strong&gt;-Wshift-count-overflow&lt;/strong&gt;&lt;/span&gt;] &lt;span style="color: #ff00ff; font-family: monospace;"&gt;&lt;span style="color: #000000;"&gt;4 | &lt;/span&gt;&lt;span style="color: #000000; font-family: monospace;"&gt;x&lt;/span&gt; &amp;#60;&amp;#60;=&lt;span style="color: #000000; font-family: monospace;"&gt; 63;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt; &lt;p&gt;The warning is a clear false positive: &lt;code&gt;sizeof (long)&lt;/code&gt; is 4 in ILP32, but the assignment on the line the warning points to only takes place when &lt;code&gt;sizeof (long) == 8&lt;/code&gt; holds. GCC must see that in &lt;code&gt;g()&lt;/code&gt; because it doesn&amp;#8217;t issue the warning there, but it cannot determine the same thing in &lt;code&gt;f()&lt;/code&gt; because the C front end in GCC translates one statement at a time. In &lt;code&gt;g()&lt;/code&gt;, the front end is able to evaluate the right operand of the assignment expression and &amp;#8220;fold&amp;#8221; it into 31 before it evaluates the shift assignment. But in &lt;code&gt;f()&lt;/code&gt;, even though it also evaluates the condition in the &lt;code&gt;if&lt;/code&gt; statement to false, it still translates both assignments in the two arms of the &lt;code&gt;if&lt;/code&gt; statement, even though one is clearly dead (later stages of the compiler eliminate dead code). The front end&amp;#8217;s inability to eliminate unreachable code is the main reason for false positives in front-end warnings that depend on flow analysis.&lt;/p&gt; &lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings-part-2/"&gt;part 2&lt;/a&gt;, learn how implementing flow-based warnings in the GCC middle end overcomes front-end limitations.&lt;/p&gt; &lt;h2&gt;More articles for C/C++ developers&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/03/05/yum-install-gcc-8-clang-6/"&gt;How to install GCC 8 and Clang/LLVM 6 on Red Hat Enterprise Linux 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc/"&gt;Recommended compiler and linker flags for GCC&lt;/a&gt;—Improve warnings and code generation with the right flags.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/15/gcc-8-usability-improvements/"&gt;Usability improvements in GCC 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/11/01/getting-started-llvm-toolset/"&gt;Getting started with Clang/LLVM&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/05/24/detecting-string-truncation-with-gcc-8/"&gt;Detecting String Truncation with GCC 8&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/03/10/wimplicit-fallthrough-in-gcc-7/"&gt;Implicit fall through detection with GCC 7&lt;/a&gt;—Detect missing break statements inside of a switch block. The warning is enabled with &lt;code class="notranslate"&gt;-Wimplicit-fallthrough&lt;/code&gt;. It is also one of the warnings that will be enabled if you use &lt;code class="notranslate"&gt;-Wextra&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/02/22/memory-error-detection-using-gcc/"&gt;Memory error detection using GCC 7&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2017/03/17/diagnosing-function-pointer-security-flaws-with-a-gcc-plugin/" rel="bookmark"&gt;Diagnosing Function Pointer Security Flaws with a GCC plugin&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2016/01/14/toward-a-better-use-of-c11-atomics-part-1/" rel="bookmark"&gt;Toward a Better Use of C11 Atomics – Part 1&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#38;linkname=Understanding%20GCC%20warnings" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F03%2F13%2Funderstanding-gcc-warnings%2F&amp;#038;title=Understanding%20GCC%20warnings" data-a2a-url="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings/" data-a2a-title="Understanding GCC warnings"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings/"&gt;Understanding GCC warnings&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/qYAXgQmPA3k" height="1" width="1" alt=""/&gt;</content><summary>Most of us appreciate when our compiler lets us know we made a mistake. Finding coding errors early lets us correct them before they embarrass us in a code review or, worse, turn into bugs that impact our customers. Besides the compulsory errors, many projects enable additional diagnostics by using the -Wall and -Wextra command-line options. For this reason, some projects even turn them into error...</summary><dc:creator>Martin Sebor</dc:creator><dc:date>2019-03-13T07:05:00Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/03/13/understanding-gcc-warnings/</feedburner:origLink></entry></feed>
